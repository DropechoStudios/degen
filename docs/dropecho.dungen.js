// Generated by Haxe 4.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["algos"] = $hx_exports["algos"] || {};
$hx_exports["dungen"] = $hx_exports["dungen"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	matchedLeft() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	matchedRight() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		let sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	matchedPos() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			let b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			let b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	split(s) {
		return s.replace(this.r,"#__delim__#").split("#__delim__#");
	}
	replace(s,by) {
		return s.replace(this.r,by);
	}
	map(s,f) {
		let offset = 0;
		let buf_b = "";
		do {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			let p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
		} while(this.r.global);
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	static escape(s) {
		return s.replace(EReg.escapeRe,"\\$&");
	}
}
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class EnumValue {
	static match(this1,pattern) {
		return false;
	}
}
class HxOverrides {
	static dateStr(date) {
		let m = date.getMonth() + 1;
		let d = date.getDate();
		let h = date.getHours();
		let mi = date.getMinutes();
		let s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
	}
	static strDate(s) {
		switch(s.length) {
		case 8:
			let k = s.split(":");
			let d = new Date();
			d["setTime"](0);
			d["setUTCHours"](k[0]);
			d["setUTCMinutes"](k[1]);
			d["setUTCSeconds"](k[2]);
			return d;
		case 10:
			let k1 = s.split("-");
			return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
		case 19:
			let k2 = s.split(" ");
			let y = k2[0].split("-");
			let t = k2[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw haxe_Exception.thrown("Invalid date format : " + s);
		}
	}
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static indexOf(a,obj,i) {
		let len = a.length;
		if(i < 0) {
			i += len;
			if(i < 0) {
				i = 0;
			}
		}
		while(i < len) {
			if(((a[i]) === obj)) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static lastIndexOf(a,obj,i) {
		let len = a.length;
		if(i >= len) {
			i = len - 1;
		} else if(i < 0) {
			i += len;
		}
		while(i >= 0) {
			if(((a[i]) === obj)) {
				return i;
			}
			--i;
		}
		return -1;
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
	static keyValueIter(a) {
		return new haxe_iterators_ArrayKeyValueIterator(a);
	}
	static now() {
		return Date.now();
	}
}
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
class IntIterator {
	constructor(min,max) {
		this.min = min;
		this.max = max;
	}
	hasNext() {
		return this.min < this.max;
	}
	next() {
		return this.min++;
	}
}
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
Object.assign(IntIterator.prototype, {
	__class__: IntIterator
	,min: null
	,max: null
});
class Lambda {
	static array(it) {
		let a = [];
		let i = $getIterator(it);
		while(i.hasNext()) a.push(i.next());
		return a;
	}
	static list(it) {
		let l = new haxe_ds_List();
		let i = $getIterator(it);
		while(i.hasNext()) l.add(i.next());
		return l;
	}
	static map(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) _g.push(f(x.next()));
		return _g;
	}
	static mapi(it,f) {
		let i = 0;
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) _g.push(f(i++,x.next()));
		return _g;
	}
	static flatten(it) {
		let _g = [];
		let e = $getIterator(it);
		while(e.hasNext()) {
			let x = $getIterator(e.next());
			while(x.hasNext()) _g.push(x.next());
		}
		return _g;
	}
	static flatMap(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) _g.push(f(x.next()));
		let _g1 = [];
		let e = $getIterator(_g);
		while(e.hasNext()) {
			let x = $getIterator(e.next());
			while(x.hasNext()) _g1.push(x.next());
		}
		return _g1;
	}
	static has(it,elt) {
		let x = $getIterator(it);
		while(x.hasNext()) if(x.next() == elt) {
			return true;
		}
		return false;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) if(f(x.next())) {
			return true;
		}
		return false;
	}
	static foreach(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) if(!f(x.next())) {
			return false;
		}
		return true;
	}
	static iter(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) f(x.next());
	}
	static filter(it,f) {
		let _g = [];
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				_g.push(x1);
			}
		}
		return _g;
	}
	static fold(it,f,first) {
		let x = $getIterator(it);
		while(x.hasNext()) first = f(x.next(),first);
		return first;
	}
	static foldi(it,f,first) {
		let i = 0;
		let x = $getIterator(it);
		while(x.hasNext()) {
			first = f(x.next(),first,i);
			++i;
		}
		return first;
	}
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				_.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) if(pred(x.next())) {
				++n;
			}
		}
		return n;
	}
	static empty(it) {
		return !$getIterator(it).hasNext();
	}
	static indexOf(it,v) {
		let i = 0;
		let v2 = $getIterator(it);
		while(v2.hasNext()) {
			if(v == v2.next()) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static find(it,f) {
		let v = $getIterator(it);
		while(v.hasNext()) {
			let v1 = v.next();
			if(f(v1)) {
				return v1;
			}
		}
		return null;
	}
	static findIndex(it,f) {
		let i = 0;
		let v = $getIterator(it);
		while(v.hasNext()) {
			if(f(v.next())) {
				return i;
			}
			++i;
		}
		return -1;
	}
	static concat(a,b) {
		let l = [];
		let x = $getIterator(a);
		while(x.hasNext()) l.push(x.next());
		let x1 = $getIterator(b);
		while(x1.hasNext()) l.push(x1.next());
		return l;
	}
}
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class Reflect {
	static hasField(o,field) {
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return null;
		}
	}
	static setField(o,field,value) {
		o[field] = value;
	}
	static getProperty(o,field) {
		let tmp;
		if(o == null) {
			return null;
		} else {
			let tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static callMethod(o,func,args) {
		return func.apply(o,args);
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		return f1 == f2;
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		let t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static isEnumValue(v) {
		if(v != null) {
			return v.__enum__ != null;
		} else {
			return false;
		}
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
	static copy(o) {
		if(o == null) {
			return null;
		}
		let o2 = { };
		let _g = 0;
		let _g1 = Reflect.fields(o);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			o2[f] = Reflect.field(o,f);
		}
		return o2;
	}
	static makeVarArgs(f) {
		return function() {
			let a = Array.prototype.slice;
			let a1 = arguments;
			let a2 = a.call(a1);
			return f(a2);
		};
	}
}
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
class Std {
	static is(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static isOfType(v,t) {
		return js_Boot.__instanceof(v,t);
	}
	static downcast(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static instance(value,c) {
		if(js_Boot.__downcastCheck(value,c)) {
			return value;
		} else {
			return null;
		}
	}
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static int(x) {
		return x | 0;
	}
	static parseInt(x) {
		let v = parseInt(x);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
	static parseFloat(x) {
		return parseFloat(x);
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
	get_length() {
		return this.b.length;
	}
	add(x) {
		this.b += Std.string(x);
	}
	addChar(c) {
		this.b += String.fromCodePoint(c);
	}
	addSub(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	toString() {
		return this.b;
	}
}
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
	,__properties__: {get_length: "get_length"}
});
class haxe_SysTools {
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		}
		if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		}
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		if(!new EReg("^(/)?[^ \t/\\\\\"]+$","").match(argument)) {
			let result_b = "";
			let needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "" || argument.indexOf("/") > 0;
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let _g1 = HxOverrides.cca(argument,_g++);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += bs == null ? "null" : "" + bs;
						result_b += bs == null ? "null" : "" + bs;
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument.length;
			while(_g < _g1) {
				let c = HxOverrides.cca(argument,_g++);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument;
		}
	}
}
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
class StringTools {
	static urlEncode(s) {
		return encodeURIComponent(s);
	}
	static urlDecode(s) {
		return decodeURIComponent(s.split("+").join(" "));
	}
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static htmlUnescape(s) {
		return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
	}
	static contains(s,value) {
		return s.includes(value);
	}
	static startsWith(s,start) {
		return s.startsWith(start);
	}
	static endsWith(s,end) {
		return s.endsWith(end);
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static lpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		l -= s.length;
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		buf_b += s == null ? "null" : "" + s;
		return buf_b;
	}
	static rpad(s,c,l) {
		if(c.length <= 0) {
			return s;
		}
		let buf_b = "";
		buf_b = "" + (s == null ? "null" : "" + s);
		while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
		return buf_b;
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		let s = "";
		do {
			s = "0123456789ABCDEF".charAt(n & 15) + s;
			n >>>= 4;
		} while(n > 0);
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
	static fastCodeAt(s,index) {
		return s.charCodeAt(index);
	}
	static unsafeCodeAt(s,index) {
		return s.charCodeAt(index);
	}
	static iterator(s) {
		return new haxe_iterators_StringIterator(s);
	}
	static keyValueIterator(s) {
		return new haxe_iterators_StringKeyValueIterator(s);
	}
	static isEof(c) {
		return c != c;
	}
	static quoteUnixArg(argument) {
		if(argument == "") {
			return "''";
		} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
			return argument;
		} else {
			return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
		}
	}
	static quoteWinArg(argument,escapeMetaCharacters) {
		let argument1 = argument;
		if(!new EReg("^(/)?[^ \t/\\\\\"]+$","").match(argument1)) {
			let result_b = "";
			let needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "" || argument1.indexOf("/") > 0;
			if(needquote) {
				result_b += "\"";
			}
			let bs_buf = new StringBuf();
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let _g1 = HxOverrides.cca(argument1,_g++);
				if(_g1 == null) {
					let c = _g1;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c);
				} else {
					switch(_g1) {
					case 34:
						let bs = bs_buf.b;
						result_b += Std.string(bs);
						result_b += Std.string(bs);
						bs_buf = new StringBuf();
						result_b += "\\\"";
						break;
					case 92:
						bs_buf.b += "\\";
						break;
					default:
						let c = _g1;
						if(bs_buf.b.length > 0) {
							result_b += Std.string(bs_buf.b);
							bs_buf = new StringBuf();
						}
						result_b += String.fromCodePoint(c);
					}
				}
			}
			result_b += Std.string(bs_buf.b);
			if(needquote) {
				result_b += Std.string(bs_buf.b);
				result_b += "\"";
			}
			argument1 = result_b;
		}
		if(escapeMetaCharacters) {
			let result_b = "";
			let _g = 0;
			let _g1 = argument1.length;
			while(_g < _g1) {
				let c = HxOverrides.cca(argument1,_g++);
				if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
					result_b += String.fromCodePoint(94);
				}
				result_b += String.fromCodePoint(c);
			}
			return result_b;
		} else {
			return argument1;
		}
	}
	static utf16CodePointAt(s,index) {
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		return c;
	}
}
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
class Type {
	static getClass(o) {
		return js_Boot.getClass(o);
	}
	static getEnum(o) {
		if(o == null) {
			return null;
		}
		return $hxEnums[o.__enum__];
	}
	static getSuperClass(c) {
		return c.__super__;
	}
	static getClassName(c) {
		return c.__name__;
	}
	static getEnumName(e) {
		return e.__ename__;
	}
	static resolveClass(name) {
		return $hxClasses[name];
	}
	static resolveEnum(name) {
		return $hxEnums[name];
	}
	static createInstance(cl,args) {
		let ctor = Function.prototype.bind.apply(cl,[null].concat(args));
		return new (ctor);
	}
	static createEmptyInstance(cl) {
		return Object.create(cl.prototype);
	}
	static createEnum(e,constr,params) {
		let f = Reflect.field(e,constr);
		if(f == null) {
			throw haxe_Exception.thrown("No such constructor " + constr);
		}
		if(Reflect.isFunction(f)) {
			if(params == null) {
				throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
			}
			return f.apply(e,params);
		}
		if(params != null && params.length != 0) {
			throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
		}
		return f;
	}
	static createEnumIndex(e,index,params) {
		let c;
		let _g = e.__constructs__[index];
		if(_g == null) {
			c = null;
		} else {
			let ctor = _g;
			c = ctor._hx_name;
		}
		if(c == null) {
			throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
		}
		return Type.createEnum(e,c,params);
	}
	static getInstanceFields(c) {
		let result = [];
		while(c != null) {
			let _g = 0;
			let _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				let name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static getClassFields(c) {
		let a = Object.getOwnPropertyNames(c);
		HxOverrides.remove(a,"__id__");
		HxOverrides.remove(a,"hx__closures__");
		HxOverrides.remove(a,"__name__");
		HxOverrides.remove(a,"__interfaces__");
		HxOverrides.remove(a,"__isInterface__");
		HxOverrides.remove(a,"__properties__");
		HxOverrides.remove(a,"__instanceFields__");
		HxOverrides.remove(a,"__super__");
		HxOverrides.remove(a,"__meta__");
		HxOverrides.remove(a,"prototype");
		HxOverrides.remove(a,"name");
		HxOverrides.remove(a,"length");
		return a;
	}
	static getEnumConstructs(e) {
		let _this = e.__constructs__;
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = _this[i]._hx_name;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			let e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			let c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumEq(a,b) {
		if(a == b) {
			return true;
		}
		try {
			let e = a.__enum__;
			if(e == null || e != b.__enum__) {
				return false;
			}
			if(a._hx_index != b._hx_index) {
				return false;
			}
			let enm = $hxEnums[e];
			let params = enm.__constructs__[a._hx_index].__params__;
			let _g = 0;
			while(_g < params.length) {
				let f = params[_g];
				++_g;
				if(!Type.enumEq(a[f],b[f])) {
					return false;
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return false;
		}
		return true;
	}
	static enumConstructor(e) {
		return $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name;
	}
	static enumParameters(e) {
		let enm = $hxEnums[e.__enum__];
		let params = enm.__constructs__[e._hx_index].__params__;
		if(params != null) {
			let _g = [];
			let _g1 = 0;
			while(_g1 < params.length) {
				let p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
	static enumIndex(e) {
		return e._hx_index;
	}
	static allEnums(e) {
		return e.__empty_constructs__.slice();
	}
}
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
class UInt {
	static add(a,b) {
		return a + b;
	}
	static div(a,b) {
		return UInt.toFloat(a) / UInt.toFloat(b);
	}
	static mul(a,b) {
		return a * b;
	}
	static sub(a,b) {
		return a - b;
	}
	static gt(a,b) {
		let aNeg = a < 0;
		if(aNeg != b < 0) {
			return aNeg;
		} else {
			return a > b;
		}
	}
	static gte(a,b) {
		let aNeg = a < 0;
		if(aNeg != b < 0) {
			return aNeg;
		} else {
			return a >= b;
		}
	}
	static lt(a,b) {
		return UInt.gt(b,a);
	}
	static lte(a,b) {
		return UInt.gte(b,a);
	}
	static and(a,b) {
		return a & b;
	}
	static or(a,b) {
		return a | b;
	}
	static xor(a,b) {
		return a ^ b;
	}
	static shl(a,b) {
		return a << b;
	}
	static shr(a,b) {
		return a >>> b;
	}
	static ushr(a,b) {
		return a >>> b;
	}
	static mod(a,b) {
		return UInt.toFloat(a) % UInt.toFloat(b) | 0;
	}
	static addWithFloat(a,b) {
		return UInt.toFloat(a) + b;
	}
	static mulWithFloat(a,b) {
		return UInt.toFloat(a) * b;
	}
	static divFloat(a,b) {
		return UInt.toFloat(a) / b;
	}
	static floatDiv(a,b) {
		return a / UInt.toFloat(b);
	}
	static subFloat(a,b) {
		return UInt.toFloat(a) - b;
	}
	static floatSub(a,b) {
		return a - UInt.toFloat(b);
	}
	static gtFloat(a,b) {
		return UInt.toFloat(a) > b;
	}
	static equalsInt(a,b) {
		return a == b;
	}
	static notEqualsInt(a,b) {
		return a != b;
	}
	static equalsFloat(a,b) {
		return UInt.toFloat(a) == b;
	}
	static notEqualsFloat(a,b) {
		return UInt.toFloat(a) != b;
	}
	static gteFloat(a,b) {
		return UInt.toFloat(a) >= b;
	}
	static floatGt(a,b) {
		return a > UInt.toFloat(b);
	}
	static floatGte(a,b) {
		return a >= UInt.toFloat(b);
	}
	static ltFloat(a,b) {
		return UInt.toFloat(a) < b;
	}
	static lteFloat(a,b) {
		return UInt.toFloat(a) <= b;
	}
	static floatLt(a,b) {
		return a < UInt.toFloat(b);
	}
	static floatLte(a,b) {
		return a <= UInt.toFloat(b);
	}
	static modFloat(a,b) {
		return UInt.toFloat(a) % b;
	}
	static floatMod(a,b) {
		return a % UInt.toFloat(b);
	}
	static negBits(this1) {
		return ~this1;
	}
	static prefixIncrement(this1) {
		return ++this1;
	}
	static postfixIncrement(this1) {
		return this1++;
	}
	static prefixDecrement(this1) {
		return --this1;
	}
	static postfixDecrement(this1) {
		return this1--;
	}
	static toString(this1,radix) {
		return Std.string(UInt.toFloat(this1));
	}
	static toInt(this1) {
		return this1;
	}
	static toFloat(this1) {
		if(this1 < 0) {
			return 4294967296.0 + this1;
		} else {
			return this1 + 0.0;
		}
	}
}
class dropecho_ds_GraphNode {
	constructor(value,id) {
		this.id = id != null ? id : Std.string(Std.random(10000000));
		this.value = value;
	}
	addUniEdge(to,data) {
		this.graph.addUniEdge(this.id,to.id);
	}
	addBiEdge(to,data) {
		this.graph.addBiEdge(this.id,to.id);
	}
	neighborIds() {
		return this.graph.neighborIds(this);
	}
	neighbors() {
		return this.graph.neighbors(this);
	}
}
$hxClasses["dropecho.ds.GraphNode"] = $hx_exports["GraphNode"] = dropecho_ds_GraphNode;
dropecho_ds_GraphNode.__name__ = "dropecho.ds.GraphNode";
Object.assign(dropecho_ds_GraphNode.prototype, {
	__class__: dropecho_ds_GraphNode
	,id: null
	,value: null
	,graph: null
});
class dropecho_ds_BSPNode extends dropecho_ds_GraphNode {
	constructor(value) {
		super(value);
	}
	createLeft(value) {
		return this.setLeft(new dropecho_ds_BSPNode(value));
	}
	createRight(value) {
		return this.setRight(new dropecho_ds_BSPNode(value));
	}
	setLeft(node) {
		this.left = node;
		node.parent = this;
		this.graph.addNode(node);
		this.graph.addUniEdge(this.id,node.id,"left");
		this.graph.addUniEdge(node.id,this.id,"parent");
		return node;
	}
	setRight(node) {
		this.right = node;
		node.parent = this;
		this.graph.addNode(node);
		this.graph.addUniEdge(this.id,node.id,"right");
		this.graph.addUniEdge(node.id,this.id,"parent");
		return node;
	}
	isLeaf() {
		if(this.right == null) {
			return this.left == null;
		} else {
			return false;
		}
	}
	isRoot() {
		return this.parent == null;
	}
	hasLeft() {
		return this.left != null;
	}
	hasRight() {
		return this.right != null;
	}
}
$hxClasses["dropecho.ds.BSPNode"] = $hx_exports["BSPNode"] = dropecho_ds_BSPNode;
dropecho_ds_BSPNode.__name__ = "dropecho.ds.BSPNode";
dropecho_ds_BSPNode.__super__ = dropecho_ds_GraphNode;
Object.assign(dropecho_ds_BSPNode.prototype, {
	__class__: dropecho_ds_BSPNode
	,parent: null
	,left: null
	,right: null
});
class dropecho_ds_Graph {
	constructor() {
		this.nodes = dropecho_interop_AbstractMap._new();
		this.edges = dropecho_interop_AbstractMap._new();
	}
	createNode(value,id) {
		return this.addNode(new dropecho_ds_GraphNode(value,id));
	}
	addNode(node) {
		node.graph = this;
		this.nodes[Std.string(node.id)] = node;
		return node;
	}
	addUniEdge(fromId,toId,data) {
		if(!Object.prototype.hasOwnProperty.call(this.edges,fromId == null ? "null" : "" + fromId)) {
			this.edges[fromId == null ? "null" : "" + fromId] = dropecho_interop_AbstractMap._new();
		}
		this.edges[fromId == null ? "null" : "" + fromId][toId == null ? "null" : "" + toId] = data;
	}
	addBiEdge(nodeId,otherId,data) {
		this.addUniEdge(nodeId,otherId,data);
		this.addUniEdge(otherId,nodeId,data);
	}
	remove(id) {
		let _g = 0;
		let _g1 = this.inNeighborIds(this.nodes[id == null ? "null" : "" + id]);
		while(_g < _g1.length) {
			let n = _g1[_g];
			++_g;
			Reflect.deleteField(this.edges[n == null ? "null" : "" + n],id);
		}
		Reflect.deleteField(this.edges,id);
		Reflect.deleteField(this.nodes,id);
	}
	inNeighbors(node,filter) {
		let _this = this.inNeighborIds(node,filter);
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			let id = _this[i];
			result[i] = this.nodes[id == null ? "null" : "" + id];
		}
		return result;
	}
	inNeighborIds(node,filter) {
		let ids = [];
		let _g = new dropecho_interop_JSAbstractMapKeyValueIterator(this.edges);
		while(_g.hasNext()) {
			let _g1 = _g.next();
			let id = _g1.key;
			if(Object.prototype.hasOwnProperty.call(_g1.value,Std.string(node.id))) {
				ids.push(id);
			}
		}
		return ids;
	}
	outNeighbors(node,filter) {
		let _this = this.outNeighborIds(node,filter);
		let result = new Array(_this.length);
		let _g = 0;
		let _g1 = _this.length;
		while(_g < _g1) {
			let i = _g++;
			let id = _this[i];
			result[i] = this.nodes[id == null ? "null" : "" + id];
		}
		return result;
	}
	outNeighborIds(node,filter) {
		if(!Object.prototype.hasOwnProperty.call(this.edges,Std.string(node.id))) {
			return [];
		}
		let _g = [];
		let _g1 = new dropecho_interop_JSAbstractMapKeyValueIterator(this.edges[Std.string(node.id)]);
		while(_g1.hasNext()) {
			let _g2 = _g1.next();
			let id = _g2.key;
			if(filter == null || filter(id,_g2.value)) {
				_g.push(id);
			}
		}
		haxe_ds_ArraySort.sort(_g,Reflect.compare);
		return _g;
	}
	neighborIds(node,filter) {
		return this.outNeighborIds(node,filter).concat(this.inNeighborIds(node,filter));
	}
	neighbors(node,filter) {
		return this.outNeighbors(node,filter).concat(this.inNeighbors(node,filter));
	}
	edgeData(fromId,toId) {
		if(Object.prototype.hasOwnProperty.call(this.edges,fromId == null ? "null" : "" + fromId)) {
			let edgefrom = this.edges[fromId == null ? "null" : "" + fromId];
			if(Object.prototype.hasOwnProperty.call(edgefrom,toId == null ? "null" : "" + toId)) {
				return edgefrom[toId == null ? "null" : "" + toId];
			}
		}
		return null;
	}
	toString() {
		let adjList = "\nGraph:\n";
		adjList = "\nGraph:\n" + "out-Neighbors:\n";
		let access = this.nodes;
		let _g_keys = Reflect.fields(access);
		let _g_index = 0;
		while(_g_index < _g_keys.length) {
			let node = access[_g_keys[_g_index++]];
			adjList += node.id;
			adjList += "\t-> ";
			let neighbors = this.outNeighbors(node);
			let _g = 0;
			while(_g < neighbors.length) {
				let node = neighbors[_g];
				++_g;
				adjList += node.id;
				if(neighbors.indexOf(node) != neighbors.length - 1) {
					adjList += ",";
				}
			}
			adjList += "\n";
		}
		adjList += "in-Neighbors:\n";
		let access1 = this.nodes;
		let _g_keys1 = Reflect.fields(access1);
		let _g_index1 = 0;
		while(_g_index1 < _g_keys1.length) {
			let node = access1[_g_keys1[_g_index1++]];
			adjList += node.id;
			adjList += "\t-> ";
			let neighbors = this.inNeighbors(node);
			let _g = 0;
			while(_g < neighbors.length) {
				let node = neighbors[_g];
				++_g;
				adjList += node.id;
				if(neighbors.indexOf(node) != neighbors.length - 1) {
					adjList += ",";
				}
			}
			adjList += "\n";
		}
		return adjList;
	}
	toDot() {
		let dot = "digraph {\n";
		let access = this.nodes;
		let _g_keys = Reflect.fields(access);
		let _g_index = 0;
		while(_g_index < _g_keys.length) dot += "\t" + access[_g_keys[_g_index++]].id + "\n";
		let access1 = this.nodes;
		let _g_keys1 = Reflect.fields(access1);
		let _g_index1 = 0;
		while(_g_index1 < _g_keys1.length) {
			let node = access1[_g_keys1[_g_index1++]];
			let neighbors = this.outNeighbors(node);
			let _g = 0;
			while(_g < neighbors.length) dot += "\t" + node.id + " -> " + neighbors[_g++].id + "\n";
		}
		dot += "}";
		return dot;
	}
}
$hxClasses["dropecho.ds.Graph"] = $hx_exports["Graph"] = dropecho_ds_Graph;
dropecho_ds_Graph.__name__ = "dropecho.ds.Graph";
Object.assign(dropecho_ds_Graph.prototype, {
	__class__: dropecho_ds_Graph
	,nodes: null
	,edges: null
});
class dropecho_ds_BSPTree extends dropecho_ds_Graph {
	constructor(rootValue) {
		super();
		this.root = new dropecho_ds_BSPNode(rootValue);
		this.addNode(this.root);
	}
	getParent(node) {
		return node.parent;
	}
	getChildren(node) {
		let children = [];
		if(node.left != null) {
			children.push(node.left);
		}
		if(node.right != null) {
			children.push(node.right);
		}
		return children;
	}
	getRoot() {
		return this.root;
	}
	getLeafs() {
		let _g = [];
		let access = this.nodes;
		let _g_keys = Reflect.fields(access);
		let _g_index = 0;
		while(_g_index < _g_keys.length) {
			let node = access[_g_keys[_g_index++]];
			if(!node.isLeaf()) {
				continue;
			}
			_g.push(node);
		}
		return _g;
	}
}
$hxClasses["dropecho.ds.BSPTree"] = $hx_exports["BSPTree"] = dropecho_ds_BSPTree;
dropecho_ds_BSPTree.__name__ = "dropecho.ds.BSPTree";
dropecho_ds_BSPTree.__super__ = dropecho_ds_Graph;
Object.assign(dropecho_ds_BSPTree.prototype, {
	__class__: dropecho_ds_BSPTree
	,root: null
});
class dropecho_ds_Queue {
	constructor() {
		this._data = new haxe_ds_List();
	}
	enqueue(value) {
		this._data.add(value);
	}
	enqueueMany(iter) {
		let item = $getIterator(iter);
		while(item.hasNext()) {
			let item1 = item.next();
			this._data.push(item1);
		}
	}
	dequeue() {
		return this._data.pop();
	}
	peek() {
		return this._data.first();
	}
	get_length() {
		return this._data.length;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this._data.h);
	}
}
$hxClasses["dropecho.ds.Queue"] = $hx_exports["Queue"] = dropecho_ds_Queue;
dropecho_ds_Queue.__name__ = "dropecho.ds.Queue";
Object.assign(dropecho_ds_Queue.prototype, {
	__class__: dropecho_ds_Queue
	,_data: null
	,__properties__: {get_length: "get_length"}
});
class dropecho_ds_Set {
	constructor(hasher) {
		this._data = new haxe_ds_IntMap();
		this._hasher = hasher != null ? hasher : function(item) {
			return haxe_crypto_Crc32.make(haxe_io_Bytes.ofString(Std.string(item)));
		};
	}
	add(item) {
		let key = this._hasher(item);
		if(!this._data.h.hasOwnProperty(key)) {
			this._data.h[key] = item;
			return true;
		}
		return false;
	}
	remove(item) {
		this._data.remove(this._hasher(item));
	}
	exists(item) {
		let _this = this._data;
		let key = this._hasher(item);
		return _this.h.hasOwnProperty(key);
	}
	size() {
		let count = 0;
		let key = this._data.keys();
		while(key.hasNext()) {
			key.next();
			++count;
		}
		return count;
	}
	array() {
		let _g = [];
		let map = this._data;
		let _g_keys = map.keys();
		while(_g_keys.hasNext()) _g.push(map.get(_g_keys.next()));
		return _g;
	}
	iterator() {
		return this._data.iterator();
	}
}
$hxClasses["dropecho.ds.Set"] = $hx_exports["Set"] = dropecho_ds_Set;
dropecho_ds_Set.__name__ = "dropecho.ds.Set";
Object.assign(dropecho_ds_Set.prototype, {
	__class__: dropecho_ds_Set
	,_data: null
	,_hasher: null
});
class dropecho_ds_Stack {
	constructor() {
		this._data = new haxe_ds_List();
	}
	push(value) {
		this._data.push(value);
	}
	pushMany(iter) {
		let item = $getIterator(iter);
		while(item.hasNext()) {
			let item1 = item.next();
			this._data.push(item1);
		}
	}
	pop() {
		return this._data.pop();
	}
	peek() {
		return this._data.first();
	}
	get_length() {
		return this._data.length;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this._data.h);
	}
}
$hxClasses["dropecho.ds.Stack"] = $hx_exports["Stack"] = dropecho_ds_Stack;
dropecho_ds_Stack.__name__ = "dropecho.ds.Stack";
Object.assign(dropecho_ds_Stack.prototype, {
	__class__: dropecho_ds_Stack
	,_data: null
	,__properties__: {get_length: "get_length"}
});
class dropecho_ds_algos_InOrderTraversal {
	constructor() {
		this.visited = [];
	}
	run(node,visitor) {
		if(node.left != null) {
			this.run(node.left,visitor);
		}
		if(visitor != null) {
			if(visitor(node)) {
				this.visited.push(node.id);
			} else {
				return this.visited;
			}
		} else {
			this.visited.push(node.id);
		}
		if(node.right != null) {
			this.run(node.right,visitor);
		}
		return this.visited;
	}
}
$hxClasses["dropecho.ds.algos.InOrderTraversal"] = $hx_exports["algos"]["InOrderTraversal"] = dropecho_ds_algos_InOrderTraversal;
dropecho_ds_algos_InOrderTraversal.__name__ = "dropecho.ds.algos.InOrderTraversal";
Object.assign(dropecho_ds_algos_InOrderTraversal.prototype, {
	__class__: dropecho_ds_algos_InOrderTraversal
	,visited: null
});
class dropecho_ds_algos_PostOrderTraversal {
	constructor() {
		this.visited = [];
	}
	run(node,visitor) {
		if(node.left != null) {
			this.run(node.left,visitor);
		}
		if(node.right != null) {
			this.run(node.right,visitor);
		}
		if(visitor != null) {
			if(visitor(node)) {
				this.visited.push(node.id);
			} else {
				return this.visited;
			}
		} else {
			this.visited.push(node.id);
		}
		return this.visited;
	}
}
$hxClasses["dropecho.ds.algos.PostOrderTraversal"] = $hx_exports["algos"]["PostOrderTraversal"] = dropecho_ds_algos_PostOrderTraversal;
dropecho_ds_algos_PostOrderTraversal.__name__ = "dropecho.ds.algos.PostOrderTraversal";
Object.assign(dropecho_ds_algos_PostOrderTraversal.prototype, {
	__class__: dropecho_ds_algos_PostOrderTraversal
	,visited: null
});
class dropecho_dungen_Tile2d {
	constructor(x,y,val) {
		this.x = x;
		this.y = y;
		this.val = val;
	}
}
$hxClasses["dropecho.dungen.Tile2d"] = $hx_exports["dungen"]["Tile2d"] = dropecho_dungen_Tile2d;
dropecho_dungen_Tile2d.__name__ = "dropecho.dungen.Tile2d";
Object.assign(dropecho_dungen_Tile2d.prototype, {
	__class__: dropecho_dungen_Tile2d
	,x: null
	,y: null
	,val: null
});
class dropecho_dungen_TileIterator {
	constructor(map) {
		this.current = 0;
		this.map = map;
	}
	hasNext() {
		return this.current < this.map._mapData.length;
	}
	next() {
		let _this = this.map;
		let index = this.current++;
		let tile = new dropecho_dungen_Tile2d(index % _this._width,index / _this._width | 0);
		let _this1 = this.map;
		tile.val = _this1._mapData[_this1._width * tile.y + tile.x];
		return tile;
	}
}
$hxClasses["dropecho.dungen.TileIterator"] = dropecho_dungen_TileIterator;
dropecho_dungen_TileIterator.__name__ = "dropecho.dungen.TileIterator";
Object.assign(dropecho_dungen_TileIterator.prototype, {
	__class__: dropecho_dungen_TileIterator
	,map: null
	,current: null
});
class dropecho_dungen_Map2d {
	constructor(width,height,initTileData) {
		if(dropecho_dungen_Map2d._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(width,height,initTileData);
	}
	_hx_constructor(width,height,initTileData) {
		if(initTileData == null) {
			initTileData = 0;
		}
		this._height = 0;
		this._width = 0;
		this._width = width;
		this._height = height;
		this._mapData = [];
		this.initializeData(initTileData);
	}
	initializeData(initTileData) {
		if(initTileData == -1) {
			return;
		}
		let length = this._height * this._width;
		let _g = 0;
		while(_g < length) this._mapData[_g++] = initTileData;
	}
	iterator() {
		return new dropecho_dungen_TileIterator(this);
	}
	tiles() {
		return new dropecho_dungen_TileIterator(this);
	}
	XYtoIndex(x,y) {
		return this._width * y + x;
	}
	tileToIndex(tile) {
		return this._width * tile.y + tile.x;
	}
	IndexToXY(index) {
		return new dropecho_dungen_Tile2d(index % this._width,index / this._width | 0);
	}
	set(x,y,data) {
		this._mapData[this._width * y + x] = data;
	}
	get(x,y) {
		return this._mapData[this._width * y + x];
	}
	toPrettyString(char) {
		if(char == null) {
			char = [" ",".",",","`"];
		}
		let output = "\n MAP2d: \n\n";
		let _g = 0;
		let _g1 = this._height;
		while(_g < _g1) {
			let y = _g++;
			let _g1 = 0;
			let _g2 = this._width;
			while(_g1 < _g2) output += char[this._mapData[this._width * y + _g1++]];
			output += "\n";
		}
		return output;
	}
	toString() {
		let output = "\n";
		let _g = 0;
		let _g1 = this._height;
		while(_g < _g1) {
			let y = _g++;
			let _g1 = 0;
			let _g2 = this._width;
			while(_g1 < _g2) output += this._mapData[this._width * y + _g1++];
			output += "\n";
		}
		return output;
	}
}
$hxClasses["dropecho.dungen.Map2d"] = $hx_exports["dungen"]["Map2d"] = dropecho_dungen_Map2d;
dropecho_dungen_Map2d.__name__ = "dropecho.dungen.Map2d";
Object.assign(dropecho_dungen_Map2d.prototype, {
	__class__: dropecho_dungen_Map2d
	,_width: null
	,_height: null
	,_mapData: null
});
class dropecho_dungen_Region {
	constructor(id) {
		this.tiles = [];
		this.id = id;
		this.tiles = [];
	}
}
$hxClasses["dropecho.dungen.Region"] = $hx_exports["dungen"]["Region"] = dropecho_dungen_Region;
dropecho_dungen_Region.__name__ = "dropecho.dungen.Region";
Object.assign(dropecho_dungen_Region.prototype, {
	__class__: dropecho_dungen_Region
	,id: null
	,tiles: null
});
class dropecho_dungen_RegionMap extends dropecho_dungen_Map2d {
	constructor(map,depth,expand) {
		dropecho_dungen_Map2d._hx_skip_constructor = true;
		super();
		dropecho_dungen_Map2d._hx_skip_constructor = false;
		this._hx_constructor(map,depth,expand);
	}
	_hx_constructor(map,depth,expand) {
		if(expand == null) {
			expand = true;
		}
		if(depth == null) {
			depth = 2;
		}
		this.graph = new dropecho_ds_Graph();
		this.borders = dropecho_interop_AbstractMap._new();
		this.regions = dropecho_interop_AbstractMap._new();
		super._hx_constructor(map._width,map._height,0);
		let regionMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		regionMap = dropecho_dungen_map_extensions_DistanceFill.distanceFill(regionMap,0,true);
		regionMap = dropecho_dungen_map_extensions_RegionManager.findAndTagRegions(regionMap,depth);
		let _g = 0;
		let _g1 = depth + 1;
		while(_g < _g1) {
			++_g;
			regionMap = dropecho_dungen_map_extensions_RegionManager.expandRegionsByOne(regionMap,depth);
		}
		this.buildRegions(regionMap,depth);
		this.buildBorders(dropecho_dungen_map_extensions_RegionManager.findAndTagBorders(regionMap,1,128));
		this.buildGraph();
	}
	buildGraph() {
		let access = this.regions;
		let _g_keys = Reflect.fields(access);
		let _g_index = 0;
		while(_g_index < _g_keys.length) {
			let region = access[_g_keys[_g_index++]];
			this.graph.addNode(new dropecho_ds_GraphNode(region,region.id));
		}
		let access1 = this.borders;
		let _g_keys1 = Reflect.fields(access1);
		let _g_index1 = 0;
		while(_g_index1 < _g_keys1.length) {
			let border = access1[_g_keys1[_g_index1++]];
			let borderRegions = [];
			let _g = 0;
			let _g1 = border.tiles;
			while(_g < _g1.length) {
				let tile = _g1[_g];
				++_g;
				let neighbors = dropecho_dungen_map_extensions_Neighbors.getNeighbors(this,tile.x,tile.y);
				let _g2 = 0;
				while(_g2 < neighbors.length) {
					let n = neighbors[_g2];
					++_g2;
					if(Object.prototype.hasOwnProperty.call(this.regions,Std.string(n.val))) {
						let region = this.regions[Std.string(n.val)];
						if(!Lambda.has(borderRegions,region)) {
							borderRegions.push(region);
						}
					}
				}
			}
			let _g2 = 0;
			while(_g2 < borderRegions.length) {
				let region = borderRegions[_g2];
				++_g2;
				let _g = 0;
				while(_g < borderRegions.length) {
					let region2 = borderRegions[_g];
					++_g;
					if(region.id == region2.id) {
						continue;
					}
					this.graph.addUniEdge(region.id,region2.id,border);
				}
			}
		}
	}
	buildRegions(regionmap,depth) {
		if(depth == null) {
			depth = 2;
		}
		let _g = 0;
		let _g1 = regionmap._mapData.length;
		while(_g < _g1) {
			let tile = _g++;
			let regionTileId = regionmap._mapData[tile];
			this._mapData[tile] = regionmap._mapData[tile];
			if(regionTileId > depth) {
				let region;
				if(Object.prototype.hasOwnProperty.call(this.regions,regionTileId == null ? "null" : "" + regionTileId) == false) {
					region = new dropecho_dungen_Region(regionTileId);
					this.regions[Std.string(region.id)] = region;
				} else {
					region = this.regions[regionTileId == null ? "null" : "" + regionTileId];
				}
				region.tiles.push(new dropecho_dungen_Tile2d(tile % regionmap._width,tile / regionmap._width | 0));
			}
		}
	}
	buildBorders(bordermap) {
		let _g = 0;
		let _g1 = bordermap._mapData.length;
		while(_g < _g1) {
			let tile = _g++;
			let borderTile = bordermap._mapData[tile];
			let isBorder = borderTile != 0;
			this._mapData[tile] = isBorder ? borderTile : this._mapData[tile];
			if(isBorder) {
				let border;
				if(Object.prototype.hasOwnProperty.call(this.borders,borderTile == null ? "null" : "" + borderTile) == false) {
					border = new dropecho_dungen_Region(borderTile);
					this.borders[Std.string(border.id)] = border;
				} else {
					border = this.borders[borderTile == null ? "null" : "" + borderTile];
				}
				border.tiles.push(new dropecho_dungen_Tile2d(tile % bordermap._width,tile / bordermap._width | 0));
			}
		}
	}
	toStringSingleRegion(regionId) {
		let chars = [];
		let _g = 0;
		while(_g < 255) {
			let i = _g++;
			chars[i] = i - 1 == regionId ? "." : " ";
		}
		return this.toPrettyString(chars);
	}
	toRegionBorderIdString() {
		let output = "\n MAP2d: \n\n";
		let _g = 0;
		let _g1 = this._height;
		while(_g < _g1) {
			let y = _g++;
			let _g1 = 0;
			let _g2 = this._width;
			while(_g1 < _g2) {
				let x = _g1++;
				let val = this._mapData[this._width * y + x];
				if(Object.prototype.hasOwnProperty.call(this.regions,val == null ? "null" : "" + val)) {
					let tiles = this.regions[val == null ? "null" : "" + val].tiles;
					let _g = 0;
					let _g1 = tiles.length;
					while(_g < _g1) {
						let i = _g++;
						if(tiles[i].x == x && tiles[i].y == y) {
							output += val;
						}
					}
				} else if(Object.prototype.hasOwnProperty.call(this.borders,val == null ? "null" : "" + val)) {
					let tiles = this.borders[val == null ? "null" : "" + val].tiles;
					let _g = 0;
					while(_g < tiles.length) {
						let tile = tiles[_g];
						++_g;
						if(tile.x == x && tile.y == y) {
							output += val - 127;
						}
					}
				} else {
					output += val == 0 ? "." : val;
				}
			}
			output += "\n";
		}
		return output;
	}
	toRegionBorderString() {
		let output = "\n MAP2d: \n\n";
		let _g = 0;
		let _g1 = this._height;
		while(_g < _g1) {
			let y = _g++;
			let _g1 = 0;
			let _g2 = this._width;
			while(_g1 < _g2) {
				let x = _g1++;
				let isBorder = false;
				let isRegion = false;
				let val = this._mapData[this._width * y + x];
				if(Object.prototype.hasOwnProperty.call(this.regions,val == null ? "null" : "" + val)) {
					let tiles = this.regions[val == null ? "null" : "" + val].tiles;
					let _g = 0;
					let _g1 = tiles.length;
					while(_g < _g1) {
						let i = _g++;
						if(tiles[i].x == x && tiles[i].y == y) {
							isRegion = true;
						}
					}
				}
				if(Object.prototype.hasOwnProperty.call(this.borders,val == null ? "null" : "" + val)) {
					let tiles = this.borders[val == null ? "null" : "" + val].tiles;
					let _g = 0;
					while(_g < tiles.length) {
						let tile = tiles[_g];
						++_g;
						if(tile.x == x && tile.y == y) {
							isBorder = true;
						}
					}
				}
				output += isBorder ? "b" : isRegion ? "r" : ".";
			}
			output += "\n";
		}
		return output;
	}
}
$hxClasses["dropecho.dungen.RegionMap"] = $hx_exports["dungen"]["RegionMap"] = dropecho_dungen_RegionMap;
dropecho_dungen_RegionMap.__name__ = "dropecho.dungen.RegionMap";
dropecho_dungen_RegionMap.__super__ = dropecho_dungen_Map2d;
Object.assign(dropecho_dungen_RegionMap.prototype, {
	__class__: dropecho_dungen_RegionMap
	,regions: null
	,borders: null
	,graph: null
});
class dropecho_dungen_bsp_BSPBuilderConfig {
	constructor() {
		if(dropecho_dungen_bsp_BSPBuilderConfig._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.seed = "0";
		this.y = 0;
		this.x = 0;
		this.ratio = .45;
		this.depth = 10;
		this.minWidth = 10;
		this.minHeight = 10;
		this.height = 60;
		this.width = 120;
	}
}
$hxClasses["dropecho.dungen.bsp.BSPBuilderConfig"] = dropecho_dungen_bsp_BSPBuilderConfig;
dropecho_dungen_bsp_BSPBuilderConfig.__name__ = "dropecho.dungen.bsp.BSPBuilderConfig";
Object.assign(dropecho_dungen_bsp_BSPBuilderConfig.prototype, {
	__class__: dropecho_dungen_bsp_BSPBuilderConfig
	,width: null
	,height: null
	,minHeight: null
	,minWidth: null
	,depth: null
	,ratio: null
	,x: null
	,y: null
	,seed: null
});
class dropecho_dungen_bsp_BSPBuilder extends dropecho_dungen_bsp_BSPBuilderConfig {
	constructor(ops) {
		dropecho_dungen_bsp_BSPBuilderConfig._hx_skip_constructor = true;
		super();
		dropecho_dungen_bsp_BSPBuilderConfig._hx_skip_constructor = false;
		this._hx_constructor(ops);
	}
	_hx_constructor(ops) {
		this.random = new seedyrng_Random();
		super._hx_constructor();
		dropecho_interop_Extender.extendThis(this,ops);
	}
	generate() {
		this.random.setStringSeed(this.seed);
		let tree = new dropecho_ds_BSPTree(new dropecho_dungen_bsp_BSPData({ height : this.height, width : this.width, x : this.x, y : this.y}));
		this.buildTree(tree.root);
		return tree;
	}
	buildTree(node,level) {
		if(level == null) {
			level = 0;
		}
		if(node == null || level >= this.depth) {
			return;
		}
		this.makeSplit(node);
		this.buildTree(node.left,level + 1);
		this.buildTree(node.right,level + 1);
	}
	makeSplit(node) {
		let data = node.value;
		let left;
		let right;
		let tallEnough = data.height > this.minHeight * 2;
		let wideEnough = data.width > this.minWidth * 2;
		if(!tallEnough && !wideEnough) {
			return;
		}
		if(this.random.random() > 0.5 && tallEnough || !wideEnough) {
			let splitAt = this.random.randomInt(this.minHeight,data.height - this.minHeight);
			let rHeight = data.height - splitAt;
			left = new dropecho_ds_BSPNode(new dropecho_dungen_bsp_BSPData({ height : splitAt, width : data.width, x : data.x, y : data.y}));
			right = new dropecho_ds_BSPNode(new dropecho_dungen_bsp_BSPData({ height : rHeight, width : data.width, x : data.x, y : data.y + splitAt}));
		} else if(wideEnough) {
			let splitAt = this.random.randomInt(this.minWidth,data.width - this.minWidth);
			let rWidth = data.width - splitAt;
			left = new dropecho_ds_BSPNode(new dropecho_dungen_bsp_BSPData({ height : data.height, width : splitAt, x : data.x, y : data.y}));
			right = new dropecho_ds_BSPNode(new dropecho_dungen_bsp_BSPData({ height : data.height, width : rWidth, x : data.x + splitAt, y : data.y}));
		} else {
			return;
		}
		node.setLeft(left);
		node.setRight(right);
	}
}
$hxClasses["dropecho.dungen.bsp.BSPBuilder"] = $hx_exports["dungen"]["BSPGenerator"] = dropecho_dungen_bsp_BSPBuilder;
dropecho_dungen_bsp_BSPBuilder.__name__ = "dropecho.dungen.bsp.BSPBuilder";
dropecho_dungen_bsp_BSPBuilder.__super__ = dropecho_dungen_bsp_BSPBuilderConfig;
Object.assign(dropecho_dungen_bsp_BSPBuilder.prototype, {
	__class__: dropecho_dungen_bsp_BSPBuilder
	,random: null
});
class dropecho_dungen_bsp_BSPData {
	constructor(ops) {
		this.y = 0;
		this.x = 0;
		this.height = 0;
		this.width = 0;
		dropecho_interop_Extender.extendThis(this,ops);
	}
}
$hxClasses["dropecho.dungen.bsp.BSPData"] = $hx_exports["dungen"]["BSPData"] = dropecho_dungen_bsp_BSPData;
dropecho_dungen_bsp_BSPData.__name__ = "dropecho.dungen.bsp.BSPData";
Object.assign(dropecho_dungen_bsp_BSPData.prototype, {
	__class__: dropecho_dungen_bsp_BSPData
	,width: null
	,height: null
	,x: null
	,y: null
});
class dropecho_dungen_export_TiledExporter {
	static export(map) {
		return "0";
	}
}
$hxClasses["dropecho.dungen.export.TiledExporter"] = $hx_exports["dungen"]["TiledExporter"] = dropecho_dungen_export_TiledExporter;
dropecho_dungen_export_TiledExporter.__name__ = "dropecho.dungen.export.TiledExporter";
class dropecho_dungen_generators_CA_$PARAMS {
	constructor() {
		this.useOtherType = false;
		this.seed = "0";
		this.start_fill_percent = 65;
		this.tile_wall = 0;
		this.tile_floor = 1;
		this.width = 64;
		this.height = 64;
		this.steps = [];
		this.steps = [{ reps : 4, r1_cutoff : 5, r2_cutoff : 2, invert : true},{ reps : 3, r1_cutoff : 5, r2_cutoff : 0, invert : true}];
	}
}
$hxClasses["dropecho.dungen.generators.CA_PARAMS"] = $hx_exports["dungen"]["CA_PARAMS"] = dropecho_dungen_generators_CA_$PARAMS;
dropecho_dungen_generators_CA_$PARAMS.__name__ = "dropecho.dungen.generators.CA_PARAMS";
Object.assign(dropecho_dungen_generators_CA_$PARAMS.prototype, {
	__class__: dropecho_dungen_generators_CA_$PARAMS
	,steps: null
	,height: null
	,width: null
	,tile_floor: null
	,tile_wall: null
	,start_fill_percent: null
	,seed: null
	,useOtherType: null
});
class dropecho_dungen_generators_CAGenerator {
	static generate(opts) {
		let params = opts == null ? new dropecho_dungen_generators_CA_$PARAMS() : opts;
		let map = dropecho_dungen_generators_RandomGenerator.generate(params);
		let temp = dropecho_dungen_map_Map2dExtensions.clone(map);
		let _g = 0;
		let _g1 = params.steps;
		while(_g < _g1.length) {
			let step = _g1[_g];
			++_g;
			let _g2 = 0;
			let _g3 = step.reps;
			while(_g2 < _g3) {
				++_g2;
				dropecho_dungen_generators_CAGenerator.buildFromCA(temp,map,params,step);
			}
		}
		return map;
	}
	static buildFromCA(temp,map,params,step) {
		let alive_tile_type = step.invert ? params.tile_floor : params.tile_wall;
		let dead_tile_type = step.invert ? params.tile_wall : params.tile_floor;
		let _g = 0;
		let _g1 = params.width;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = params.height;
			while(_g1 < _g2) {
				let y = _g1++;
				let nCount = dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,x,y,alive_tile_type);
				if(!params.useOtherType) {
					let is_alive = map._mapData[map._width * y + x] == alive_tile_type;
					if(!is_alive && nCount >= step.r1_cutoff) {
						is_alive = true;
					} else if(is_alive && nCount >= step.r2_cutoff) {
						is_alive = true;
					} else {
						is_alive = false;
					}
					temp._mapData[temp._width * y + x] = is_alive ? alive_tile_type : dead_tile_type;
				} else if(nCount >= step.r1_cutoff || dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,x,y,alive_tile_type,2) <= step.r2_cutoff) {
					temp._mapData[temp._width * y + x] = dead_tile_type;
				} else {
					temp._mapData[temp._width * y + x] = alive_tile_type;
				}
			}
		}
		map._mapData = temp._mapData.slice();
	}
}
$hxClasses["dropecho.dungen.generators.CAGenerator"] = $hx_exports["dungen"]["CAGenerator"] = dropecho_dungen_generators_CAGenerator;
dropecho_dungen_generators_CAGenerator.__name__ = "dropecho.dungen.generators.CAGenerator";
class dropecho_dungen_generators_CELLULAR_$PARAMS {
	constructor() {
		this.passes = 1;
		this.surviveCount = 5;
		this.bornCount = 4;
		this.seed = "0";
		this.start_fill_percent = 65;
		this.tile_wall = 0;
		this.tile_floor = 1;
		this.width = 64;
		this.height = 64;
	}
}
$hxClasses["dropecho.dungen.generators.CELLULAR_PARAMS"] = $hx_exports["dungen"]["CELLULAR_PARAMS"] = dropecho_dungen_generators_CELLULAR_$PARAMS;
dropecho_dungen_generators_CELLULAR_$PARAMS.__name__ = "dropecho.dungen.generators.CELLULAR_PARAMS";
Object.assign(dropecho_dungen_generators_CELLULAR_$PARAMS.prototype, {
	__class__: dropecho_dungen_generators_CELLULAR_$PARAMS
	,height: null
	,width: null
	,tile_floor: null
	,tile_wall: null
	,start_fill_percent: null
	,seed: null
	,bornCount: null
	,surviveCount: null
	,passes: null
});
class dropecho_dungen_generators_CellularGenerator {
	static generate(opts) {
		let params = opts == null ? new dropecho_dungen_generators_CELLULAR_$PARAMS() : opts;
		let map = dropecho_dungen_generators_RandomGenerator.generate(params);
		let temp = dropecho_dungen_map_Map2dExtensions.clone(map);
		let _g = 0;
		let _g1 = params.passes;
		while(_g < _g1) {
			++_g;
			let tile = new dropecho_dungen_TileIterator(map);
			while(tile.hasNext()) {
				let tile1 = tile.next();
				let neighborCount = dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,tile1.x,tile1.y,params.tile_floor);
				if(tile1.val == params.tile_floor && neighborCount > params.surviveCount) {
					continue;
				}
				if(tile1.val == params.tile_wall && neighborCount > params.bornCount) {
					temp._mapData[temp._width * tile1.y + tile1.x] = params.tile_floor;
				}
				temp._mapData[temp._width * tile1.y + tile1.x] = params.tile_wall;
			}
			map._mapData = temp._mapData.slice();
			temp = dropecho_dungen_map_Map2dExtensions.clone(map);
		}
		map._mapData = temp._mapData.slice();
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.CellularGenerator"] = $hx_exports["dungen"]["CellularGenerator"] = dropecho_dungen_generators_CellularGenerator;
dropecho_dungen_generators_CellularGenerator.__name__ = "dropecho.dungen.generators.CellularGenerator";
class dropecho_dungen_generators_ConvChain {
	constructor(sample) {
		this.seed = "0";
		this.sample = sample;
		this.cachedN = -1;
		this.cachedWeights = null;
		this.rng = new seedyrng_Random();
		this.rng.setStringSeed(this.seed);
	}
	processWeights(sample,n) {
		let size = Math.pow(2,n * n) | 0;
		let _g = [];
		let _g1 = 0;
		while(_g1 < size) {
			++_g1;
			_g.push(0.0);
		}
		let _g2 = 0;
		let _g3 = sample._height;
		while(_g2 < _g3) {
			let x = _g2++;
			let _g1 = 0;
			let _g3 = sample._width;
			while(_g1 < _g3) {
				let p = dropecho_dungen_map_Pattern.init(n,dropecho_dungen_map_extensions_Utils.getRect(sample,{ x : x, y : _g1++, width : n, height : n},true));
				let _g2 = 0;
				let _g3 = p._hashes.length;
				while(_g2 < _g3) _g[p._hashes[_g2++]] += 1;
			}
		}
		let _g4 = 0;
		let _g5 = _g.length;
		while(_g4 < _g5) {
			let k = _g4++;
			_g[k] = _g[k] <= 0 ? 0.1 : _g[k];
		}
		return _g;
	}
	getWeights(n) {
		if(this.cachedN != n) {
			this.cachedN = n;
			this.cachedWeights = this.processWeights(this.sample,n);
		}
		return this.cachedWeights;
	}
	generateBaseField(width,height) {
		return dropecho_dungen_generators_RandomGenerator.generate({ height : height, width : width, seed : this.seed});
	}
	applyChanges(field,weights,n,temperature,changes) {
		let r;
		let q;
		let x;
		let y;
		let ind;
		let difference;
		let _g = 0;
		while(_g < changes) {
			++_g;
			q = 1.0;
			r = this.rng.randomInt(0,field._mapData.length);
			x = r % field._width | 0;
			y = r / field._width | 0;
			let _g1 = y - n + 1;
			let _g2 = y + n;
			while(_g1 < _g2) {
				let sy = _g1++;
				let _g = x - n + 1;
				let _g2 = x + n;
				while(_g < _g2) {
					let sx = _g++;
					ind = 0;
					difference = 0;
					let _g1 = 0;
					while(_g1 < n) {
						let dy = _g1++;
						let _g = 0;
						while(_g < n) {
							let dx = _g++;
							let power = 1 << dy * n + dx;
							let X = sx + dx;
							let Y = sy + dy;
							X = Math.abs(X % field._width) | 0;
							Y = Math.abs(Y % field._height) | 0;
							let value = field._mapData[field._width * Y + X];
							ind += value != 0 ? power : 0;
							if(X == x && Y == y) {
								difference = value != 0 ? power : -power;
							}
						}
					}
					q *= weights[ind - difference] / weights[ind];
				}
			}
			if(q >= 1) {
				field._mapData[field._width * y + x] = field._mapData[field._width * y + x] != 1 ? 1 : 0;
			} else {
				if(temperature != 1) {
					q = Math.pow(q,1.0 / temperature);
				}
				if(q > this.rng.random()) {
					field._mapData[field._width * y + x] = field._mapData[field._width * y + x] != 1 ? 1 : 0;
				}
			}
		}
	}
	generate(width,height,n,temperature,iterations) {
		let changesPerIterations = width * height;
		let field = this.generateBaseField(width,height);
		let weights = this.getWeights(n);
		let _g = 0;
		while(_g < iterations) {
			++_g;
			this.applyChanges(field,weights,n,temperature,changesPerIterations);
		}
		return field;
	}
}
$hxClasses["dropecho.dungen.generators.ConvChain"] = $hx_exports["dungen"]["ConvChain"] = dropecho_dungen_generators_ConvChain;
dropecho_dungen_generators_ConvChain.__name__ = "dropecho.dungen.generators.ConvChain";
Object.assign(dropecho_dungen_generators_ConvChain.prototype, {
	__class__: dropecho_dungen_generators_ConvChain
	,sample: null
	,cachedN: null
	,cachedWeights: null
	,rng: null
	,seed: null
});
class dropecho_dungen_generators_FloorPlanGenerator {
	static generate(params) {
		let map = new dropecho_dungen_Map2d(params.width,params.height);
		let rooms = [];
		rooms.push({ width : 20, height : 20, x : -999999, y : -999999});
		rooms.push({ width : 20, height : 20, x : -999999, y : -999999});
		rooms.push({ width : 20, height : 30, x : -999999, y : -999999});
		rooms.push({ width : 30, height : 20, x : -999999, y : -999999});
		dropecho_dungen_generators_FloorPlanGenerator.arrangeRooms(map,rooms);
		return map;
	}
	static scaleFloorPlan(map,rooms) {
	}
	static arrangeRooms(map,rooms) {
		let random = new seedyrng_Random();
		let randomRooms = rooms.slice();
		random.shuffle(randomRooms);
		let _g = 0;
		while(_g < randomRooms.length) {
			let r = randomRooms[_g];
			++_g;
			r.x = 500;
			r.y = 500;
		}
	}
}
$hxClasses["dropecho.dungen.generators.FloorPlanGenerator"] = $hx_exports["dungen"]["FloorPlanGenerator"] = dropecho_dungen_generators_FloorPlanGenerator;
dropecho_dungen_generators_FloorPlanGenerator.__name__ = "dropecho.dungen.generators.FloorPlanGenerator";
class dropecho_dungen_generators_MixedGenerator {
	static buildRooms(tree,opts) {
		let random = new seedyrng_Random();
		let params = dropecho_interop_Extender.defaults({ tile_wall : 0, tile_floor : 1, cave_percent : 20, seed : "0"},opts);
		random.setStringSeed(params.seed);
		let rootvalue = tree.root.value;
		let map = new dropecho_dungen_Map2d(rootvalue.width,rootvalue.height,params.tile_wall);
		let makeRooms = function(node) {
			if(node.left != null || node.right != null) {
				return true;
			}
			let roomStartY = node.value.y + 1;
			let roomEndX = node.value.x + node.value.width - 1;
			let roomEndY = node.value.y + node.value.height - 1;
			let _g = node.value.x + 1;
			while(_g < roomEndX) {
				let x = _g++;
				let _g1 = roomStartY;
				while(_g1 < roomEndY) map._mapData[map._width * _g1++ + x] = params.tile_floor;
			}
			return true;
		};
		let makeCaveFromCA = function(node) {
			if((node.left != null || node.right != null) && (node.right.right != null || node.right.left != null || node.left.right != null || node.left.left != null)) {
				return true;
			}
			let roomStartX = node.value.x + 1;
			let roomStartY = node.value.y + 1;
			let params = new dropecho_dungen_generators_CA_$PARAMS();
			params.height = node.value.height;
			params.width = node.value.width;
			let cave = dropecho_dungen_generators_CAGenerator.generate(params);
			let _g = 0;
			let _g1 = cave._width;
			while(_g < _g1) {
				let x = _g++;
				let _g1 = 0;
				let _g2 = cave._height;
				while(_g1 < _g2) {
					let y = _g1++;
					map._mapData[map._width * (y + roomStartY) + (x + roomStartX)] = cave._mapData[cave._width * y + x];
				}
			}
			return true;
		};
		let makeCorridors = function(node) {
			if(node.left == null && node.right == null) {
				return true;
			}
			let leftXcenter = node.left.value.x + node.left.value.width / 2 | 0;
			let leftYcenter = node.left.value.y + node.left.value.height / 2 | 0;
			let rightXcenter = node.right.value.x + node.right.value.width / 2 | 0;
			let rightYcenter = node.right.value.y + node.right.value.height / 2 | 0;
			let startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
			let startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
			let endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
			let _g = startX;
			let _g1 = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
			while(_g < _g1) map._mapData[map._width * startY + _g++] = params.tile_floor;
			let _g2 = startY;
			let _g3 = endY;
			while(_g2 < _g3) map._mapData[map._width * _g2++ + startX] = params.tile_floor;
			return true;
		};
		let chooseRoomOrCave = function(node) {
			if(random.random() * 100 > params.cave_percent) {
				return makeRooms(node);
			} else {
				return makeCaveFromCA(node);
			}
		};
		let closeEdges = function(node) {
			if(node.parent != null) {
				return true;
			}
			let _g = 0;
			let _g1 = node.value.width;
			while(_g < _g1) {
				let x = _g++;
				map._mapData[map._width * 0 + x] = params.tile_wall;
				map._mapData[map._width * node.value.height + x] = params.tile_wall;
			}
			let _g2 = 0;
			let _g3 = node.value.height;
			while(_g2 < _g3) {
				let y = _g2++;
				map._mapData[map._width * y] = params.tile_wall;
				map._mapData[map._width * y + node.value.width] = params.tile_wall;
			}
			return false;
		};
		let povisitor = new dropecho_ds_algos_PostOrderTraversal();
		let invisitor = new dropecho_ds_algos_InOrderTraversal();
		povisitor.run(tree.root,chooseRoomOrCave);
		povisitor.visited.length = 0;
		invisitor.run(tree.root,closeEdges);
		povisitor.run(tree.root,makeCorridors);
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.MixedGenerator"] = $hx_exports["dungen"]["MixedGenerator"] = dropecho_dungen_generators_MixedGenerator;
dropecho_dungen_generators_MixedGenerator.__name__ = "dropecho.dungen.generators.MixedGenerator";
class dropecho_dungen_generators_RandomParams {
	constructor() {
		this.seed = "0";
		this.start_fill_percent = 50;
		this.tile_wall = 0;
		this.tile_floor = 1;
		this.width = 64;
		this.height = 64;
	}
}
$hxClasses["dropecho.dungen.generators.RandomParams"] = dropecho_dungen_generators_RandomParams;
dropecho_dungen_generators_RandomParams.__name__ = "dropecho.dungen.generators.RandomParams";
Object.assign(dropecho_dungen_generators_RandomParams.prototype, {
	__class__: dropecho_dungen_generators_RandomParams
	,height: null
	,width: null
	,tile_floor: null
	,tile_wall: null
	,start_fill_percent: null
	,seed: null
});
class dropecho_dungen_generators_RandomGenerator {
	static generate(opts) {
		let params = opts == null ? new dropecho_dungen_generators_RandomParams() : opts;
		let random = new seedyrng_Random();
		random.setStringSeed(params.seed);
		let map = new dropecho_dungen_Map2d(params.width,params.height,params.tile_wall);
		let _g = 0;
		let _g1 = params.width * params.height;
		while(_g < _g1) map._mapData[_g++] = random.random() * 100 > params.start_fill_percent ? params.tile_floor : params.tile_wall;
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.RandomGenerator"] = $hx_exports["dungen"]["RandomGenerator"] = dropecho_dungen_generators_RandomGenerator;
dropecho_dungen_generators_RandomGenerator.__name__ = "dropecho.dungen.generators.RandomGenerator";
class dropecho_dungen_generators_RoomParams {
	constructor() {
		this.minHeight = 1;
		this.minWidth = 1;
		this.padding = 0;
		this.tileWall = 0;
		this.tileFloor = 1;
		this.tileCorridor = 1;
	}
}
$hxClasses["dropecho.dungen.generators.RoomParams"] = dropecho_dungen_generators_RoomParams;
dropecho_dungen_generators_RoomParams.__name__ = "dropecho.dungen.generators.RoomParams";
Object.assign(dropecho_dungen_generators_RoomParams.prototype, {
	__class__: dropecho_dungen_generators_RoomParams
	,tileCorridor: null
	,tileFloor: null
	,tileWall: null
	,padding: null
	,minWidth: null
	,minHeight: null
});
class dropecho_dungen_generators_RoomGenerator {
	static buildRooms(tree,opts) {
		let params = dropecho_interop_Extender.defaults(new dropecho_dungen_generators_RoomParams(),opts);
		let rootvalue = tree.root.value;
		let map = new dropecho_dungen_Map2d(rootvalue.width,rootvalue.height,params.tileWall);
		let makeRoom = function(node) {
			if(node.left != null || node.right != null) {
				return true;
			}
			let lPad = (params.padding / 2 | 0) + params.padding % 2;
			let rPad = (params.padding / 2 | 0) + params.padding % 2;
			let startX = node.value.x + lPad;
			let startY = node.value.y + lPad;
			let endX = node.value.x + node.value.width - rPad;
			let endY = node.value.y + node.value.height - rPad;
			let _g = startX;
			let _g1 = endX;
			while(_g < _g1) {
				let x = _g++;
				let _g1 = startY;
				let _g2 = endY;
				while(_g1 < _g2) map._mapData[map._width * _g1++ + x] = 2;
			}
			let random = new seedyrng_Random();
			let h = node.value.height;
			let mw = params.minWidth;
			let mh = params.minHeight;
			startX += random.randomInt(0,node.value.width - mw - params.padding);
			startY += random.randomInt(0,h - mh - params.padding);
			endX = startX + random.randomInt(mw,endX - startX);
			endY = startY + random.randomInt(mh,endY - startY);
			let _g2 = startX;
			let _g3 = endX;
			while(_g2 < _g3) {
				let x = _g2++;
				let _g = startY;
				let _g1 = endY;
				while(_g < _g1) map._mapData[map._width * _g++ + x] = params.tileFloor;
			}
			node.value.x = startX;
			node.value.y = startY;
			node.value.width = endX - startX;
			node.value.height = endY - startY;
			return true;
		};
		let makeCorridors = function(node) {
			if(node.left == null && node.right == null) {
				return true;
			}
			let leftXcenter = node.left.value.x + node.left.value.width / 2 | 0;
			let leftYcenter = node.left.value.y + node.left.value.height / 2 | 0;
			let rightXcenter = node.right.value.x + node.right.value.width / 2 | 0;
			let rightYcenter = node.right.value.y + node.right.value.height / 2 | 0;
			let startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
			let startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
			let endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
			let _g = startX;
			let _g1 = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
			while(_g < _g1) {
				let x = _g++;
				if(map._mapData[map._width * startY + x] != params.tileFloor) {
					map._mapData[map._width * startY + x] = params.tileCorridor;
				}
			}
			let _g2 = startY;
			let _g3 = endY;
			while(_g2 < _g3) {
				let y = _g2++;
				if(map._mapData[map._width * y + startX] != params.tileFloor) {
					map._mapData[map._width * y + startX] = params.tileCorridor;
				}
			}
			return true;
		};
		let visitor = new dropecho_ds_algos_PostOrderTraversal();
		visitor.run(tree.root,makeRoom);
		visitor.visited.length = 0;
		visitor.run(tree.root,makeCorridors);
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.RoomGenerator"] = $hx_exports["dungen"]["RoomGenerator"] = dropecho_dungen_generators_RoomGenerator;
dropecho_dungen_generators_RoomGenerator.__name__ = "dropecho.dungen.generators.RoomGenerator";
class dropecho_dungen_generators_TunnelerGenerator {
	static generate(params) {
		let height = params.height;
		let width = params.width;
		let map = new dropecho_dungen_Map2d(width,height,params.tile_wall);
		map._mapData[map._width * (height / 2 | 0) + (width / 2 | 0)] = 0;
		return map;
	}
	static getEntrancePosition(map) {
		let random = new seedyrng_Random();
		random.randomInt(0,1);
		random.randomInt(0,1);
		return null;
	}
}
$hxClasses["dropecho.dungen.generators.TunnelerGenerator"] = $hx_exports["dungen"]["TunnelerGenerator"] = dropecho_dungen_generators_TunnelerGenerator;
dropecho_dungen_generators_TunnelerGenerator.__name__ = "dropecho.dungen.generators.TunnelerGenerator";
class dropecho_dungen_generators__$TunnelerGenerator_Tunneler {
	constructor(map,position,width,direction,lifeSpan) {
		if(lifeSpan == null) {
			lifeSpan = 5;
		}
		if(direction == null) {
			direction = 2;
		}
		if(width == null) {
			width = 1;
		}
		this.map = map;
		this.position = position;
		this.width = width;
		this.direction = direction;
		this.lifeSpan = lifeSpan;
	}
	run() {
		while(0 < this.lifeSpan) {
		}
	}
}
$hxClasses["dropecho.dungen.generators._TunnelerGenerator.Tunneler"] = dropecho_dungen_generators__$TunnelerGenerator_Tunneler;
dropecho_dungen_generators__$TunnelerGenerator_Tunneler.__name__ = "dropecho.dungen.generators._TunnelerGenerator.Tunneler";
Object.assign(dropecho_dungen_generators__$TunnelerGenerator_Tunneler.prototype, {
	__class__: dropecho_dungen_generators__$TunnelerGenerator_Tunneler
	,map: null
	,position: null
	,width: null
	,direction: null
	,lifeSpan: null
});
class dropecho_dungen_generators_VillageParams {
	constructor() {
		this.padding = 0;
		this.tileWall = 0;
		this.tileFloor = 1;
		this.tileCorridor = 1;
	}
}
$hxClasses["dropecho.dungen.generators.VillageParams"] = dropecho_dungen_generators_VillageParams;
dropecho_dungen_generators_VillageParams.__name__ = "dropecho.dungen.generators.VillageParams";
Object.assign(dropecho_dungen_generators_VillageParams.prototype, {
	__class__: dropecho_dungen_generators_VillageParams
	,tileCorridor: null
	,tileFloor: null
	,tileWall: null
	,padding: null
});
class dropecho_dungen_generators_VillageGenerator {
	static buildVillages(tree,opts) {
		let params = dropecho_interop_Extender.defaults(new dropecho_dungen_generators_VillageParams(),opts);
		let rootvalue = tree.root.value;
		let map = new dropecho_dungen_Map2d(rootvalue.width,rootvalue.height,params.tileCorridor);
		let rnd = new seedyrng_Random();
		let makeVillage = function(node) {
			if((node.right == null && node.left == null) == false) {
				return true;
			}
			let lPad = params.padding / 2 | 0;
			let rPad = (params.padding / 2 | 0) + params.padding % 2;
			let roomStartX = node.value.x + 1 + lPad;
			let roomStartY = node.value.y + 1 + lPad;
			let roomEndX = node.value.x + node.value.width - 1 - rPad;
			let roomEndY = node.value.y + node.value.height - 1 - rPad;
			if(roomStartX >= 4) {
				--roomStartX;
			}
			if(roomStartY >= 4) {
				--roomStartY;
			}
			let door = rnd.choice([true,false]) ? roomStartY : roomEndY - 1;
			let _g = roomStartX;
			while(_g < roomEndX) {
				let x = _g++;
				let _g1 = roomStartY;
				while(_g1 < roomEndY) {
					let y = _g1++;
					if(x == roomStartX + Math.floor((roomEndX - roomStartX) / 2) && y == door) {
						continue;
					}
					if(x == roomStartX || x == roomEndX - 1 || y == roomStartY || y == roomEndY - 1) {
						map._mapData[map._width * y + x] = params.tileWall;
					} else {
						map._mapData[map._width * y + x] = params.tileFloor;
					}
				}
			}
			return true;
		};
		new dropecho_ds_algos_PostOrderTraversal().run(tree.root,makeVillage);
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.VillageGenerator"] = $hx_exports["dungen"]["VillageGenerator"] = dropecho_dungen_generators_VillageGenerator;
dropecho_dungen_generators_VillageGenerator.__name__ = "dropecho.dungen.generators.VillageGenerator";
class dropecho_dungen_generators_WFC {
	constructor(sample,n) {
		this.sample = sample;
		this.n = n;
	}
	getPossibilities() {
		let patterns = [];
		let _g = 0;
		let _g1 = this.sample._width - this.n + 1;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = this.sample._height - this.n + 1;
			while(_g1 < _g2) patterns.push(dropecho_dungen_map_Pattern.init(2,dropecho_dungen_map_extensions_Utils.getRect(this.sample,{ x : x, y : _g1++, width : 2, height : 2})));
		}
		let hashedPatterns = new haxe_ds_IntMap();
		let _g2 = 0;
		while(_g2 < patterns.length) {
			let pattern = patterns[_g2];
			++_g2;
			let _g = 0;
			let _g1 = pattern._variations.length;
			while(_g < _g1) {
				let i = _g++;
				hashedPatterns.h[pattern._hashes[i]] = pattern._variations[i];
			}
		}
		return hashedPatterns;
	}
	generate(width,height,n) {
	}
}
$hxClasses["dropecho.dungen.generators.WFC"] = $hx_exports["dungen"]["WFC"] = dropecho_dungen_generators_WFC;
dropecho_dungen_generators_WFC.__name__ = "dropecho.dungen.generators.WFC";
Object.assign(dropecho_dungen_generators_WFC.prototype, {
	__class__: dropecho_dungen_generators_WFC
	,sample: null
	,n: null
});
class dropecho_dungen_generators_WALK_$PARAMS_$DEF {
	constructor() {
		this.seed = "0";
		this.start_fill_percent = 50;
		this.tile_wall = 0;
		this.tile_floor = 1;
		this.width = 64;
		this.height = 64;
	}
}
$hxClasses["dropecho.dungen.generators.WALK_PARAMS_DEF"] = dropecho_dungen_generators_WALK_$PARAMS_$DEF;
dropecho_dungen_generators_WALK_$PARAMS_$DEF.__name__ = "dropecho.dungen.generators.WALK_PARAMS_DEF";
Object.assign(dropecho_dungen_generators_WALK_$PARAMS_$DEF.prototype, {
	__class__: dropecho_dungen_generators_WALK_$PARAMS_$DEF
	,height: null
	,width: null
	,tile_floor: null
	,tile_wall: null
	,start_fill_percent: null
	,seed: null
});
class dropecho_dungen_generators_WalkGenerator {
	static generate(opts) {
		let params = dropecho_interop_Extender.defaults(new dropecho_dungen_generators_WALK_$PARAMS_$DEF(),opts);
		let random = new seedyrng_Random();
		random.setStringSeed(params.seed);
		let countOfFilled = 0;
		let totalCount = params.height * params.width;
		let map = new dropecho_dungen_Map2d(params.width,params.height,params.tile_wall);
		let walkerPos_x = params.width / 2 | 0;
		let walkerPos_y = params.height / 2 | 0;
		map._mapData[map._width * walkerPos_y + walkerPos_x] = 0;
		let counter = 0;
		let direction = random.randomInt(0,3);
		while(countOfFilled < totalCount * (params.start_fill_percent / 100)) {
			direction = random.randomInt(0,3);
			if(map._mapData[map._width * walkerPos_y + walkerPos_x] != params.tile_floor) {
				map._mapData[map._width * walkerPos_y + walkerPos_x] = params.tile_floor;
				++countOfFilled;
			}
			walkerPos_y += direction == 0 ? -1 : 0;
			walkerPos_y += direction == 2 ? 1 : 0;
			walkerPos_x += direction == 1 ? -1 : 0;
			walkerPos_x += direction == 3 ? 1 : 0;
			if(walkerPos_x < 0 || walkerPos_x > params.width - 1) {
				walkerPos_x = params.width / 2 | 0;
				walkerPos_y = params.height / 2 | 0;
			}
			if(walkerPos_y < 0 || walkerPos_y > params.height - 1) {
				walkerPos_x = params.width / 2 | 0;
				walkerPos_y = params.height / 2 | 0;
			}
			if(counter >= 500000) {
				break;
			}
			++counter;
		}
		return map;
	}
}
$hxClasses["dropecho.dungen.generators.WalkGenerator"] = $hx_exports["dungen"]["WalkGenerator"] = dropecho_dungen_generators_WalkGenerator;
dropecho_dungen_generators_WalkGenerator.__name__ = "dropecho.dungen.generators.WalkGenerator";
class dropecho_dungen_map_Map2dExtensions {
	static setAllEdgesTo(map,tileType) {
		if(tileType == null) {
			tileType = 0;
		}
		let _g = 0;
		let _g1 = map._width;
		while(_g < _g1) {
			let x = _g++;
			map._mapData[map._width * 0 + x] = tileType;
			map._mapData[map._width * (map._height - 1) + x] = tileType;
		}
		let _g2 = 0;
		let _g3 = map._height;
		while(_g2 < _g3) {
			let y = _g2++;
			map._mapData[map._width * y] = tileType;
			map._mapData[map._width * y + (map._width - 1)] = tileType;
		}
	}
	static clone(map,mapData) {
		let cloned = new dropecho_dungen_Map2d(map._width,map._height);
		if(mapData != null) {
			cloned._mapData = mapData;
		} else {
			let _g = 0;
			let _g1 = map._mapData.length;
			while(_g < _g1) {
				let i = _g++;
				cloned._mapData[i] = map._mapData[i];
			}
		}
		return cloned;
	}
}
$hxClasses["dropecho.dungen.map.Map2dExtensions"] = $hx_exports["dungen"]["Map2dExtensions"] = dropecho_dungen_map_Map2dExtensions;
dropecho_dungen_map_Map2dExtensions.__name__ = "dropecho.dungen.map.Map2dExtensions";
class dropecho_dungen_map_Pattern extends dropecho_dungen_Map2d {
	constructor(size,initTileData) {
		dropecho_dungen_Map2d._hx_skip_constructor = true;
		super();
		dropecho_dungen_Map2d._hx_skip_constructor = false;
		this._hx_constructor(size,initTileData);
	}
	_hx_constructor(size,initTileData) {
		if(initTileData == null) {
			initTileData = 0;
		}
		this._hashes = [];
		this._variations = [];
		super._hx_constructor(size,size,initTileData);
	}
	indexToMap(index) {
		if(index == null) {
			index = 0;
		}
		return dropecho_dungen_map_Map2dExtensions.clone(this,this._variations[index]);
	}
	matchesIndex(map,x,y,tileToIgnore) {
		if(tileToIgnore == null) {
			tileToIgnore = -1;
		}
		let toMatch = dropecho_dungen_map_extensions_Utils.getRect(map,{ x : x, y : y, width : this._width, height : this._height});
		let match = false;
		let _g = 0;
		let _g1 = this._variations.length;
		while(_g < _g1) {
			let p = _g++;
			let pattern = this._variations[p];
			let _g1 = 0;
			let _g2 = pattern.length;
			while(_g1 < _g2) {
				let tile = _g1++;
				match = toMatch[tile] == pattern[tile] || pattern[tile] == tileToIgnore;
				if(!match) {
					break;
				}
			}
			if(match) {
				return p;
			}
		}
		return -1;
	}
	matches(map,x,y) {
		return this.matchesIndex(map,x,y) != -1;
	}
	buildVariations(symmetry) {
		if(symmetry == null) {
			symmetry = 255;
		}
		let n = this._width;
		let variations = [];
		variations[0] = this._mapData;
		let p = variations[0];
		let _g = [];
		let _g1 = 0;
		while(_g1 < n) {
			let y = _g1++;
			let _g2 = 0;
			while(_g2 < n) _g.push(p[(n - _g2++ - 1) * n + y]);
		}
		variations[1] = _g;
		let p1 = variations[1];
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < n) {
			let y = _g3++;
			let _g = 0;
			while(_g < n) _g2.push(p1[(n - _g++ - 1) * n + y]);
		}
		variations[2] = _g2;
		let p2 = variations[2];
		let _g4 = [];
		let _g5 = 0;
		while(_g5 < n) {
			let y = _g5++;
			let _g = 0;
			while(_g < n) _g4.push(p2[(n - _g++ - 1) * n + y]);
		}
		variations[3] = _g4;
		let p3 = variations[0];
		let length = this._mapData.length;
		let _g6 = [];
		let _g7 = 0;
		while(_g7 < n) {
			let y = _g7++;
			let _g = 0;
			while(_g < n) _g6.push(p3[length - (n * y + 1) - _g++]);
		}
		variations[4] = _g6;
		let p4 = variations[1];
		let length1 = this._mapData.length;
		let _g8 = [];
		let _g9 = 0;
		while(_g9 < n) {
			let y = _g9++;
			let _g = 0;
			while(_g < n) _g8.push(p4[length1 - (n * y + 1) - _g++]);
		}
		variations[5] = _g8;
		let p5 = variations[2];
		let length2 = this._mapData.length;
		let _g10 = [];
		let _g11 = 0;
		while(_g11 < n) {
			let y = _g11++;
			let _g = 0;
			while(_g < n) _g10.push(p5[length2 - (n * y + 1) - _g++]);
		}
		variations[6] = _g10;
		let p6 = variations[3];
		let length3 = this._mapData.length;
		let _g12 = [];
		let _g13 = 0;
		while(_g13 < n) {
			let y = _g13++;
			let _g = 0;
			while(_g < n) _g12.push(p6[length3 - (n * y + 1) - _g++]);
		}
		variations[7] = _g12;
		let tmp = this._hashes;
		let p7 = variations[0];
		let result = 0;
		let _g14 = 0;
		let _g15 = p7.length;
		while(_g14 < _g15) {
			let i = _g14++;
			result += p7[p7.length - 1 - i] << i + 1;
		}
		tmp[0] = result;
		this._variations[0] = variations[0];
		if((symmetry & 1) != 0) {
			let tmp = this._hashes;
			let p = variations[1];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[1] = result;
			this._variations[1] = variations[1];
		}
		if((symmetry & 2) != 0) {
			let tmp = this._hashes;
			let p = variations[2];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[2] = result;
			this._variations[2] = variations[2];
		}
		if((symmetry & 3) != 0) {
			let tmp = this._hashes;
			let p = variations[3];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[3] = result;
			this._variations[3] = variations[3];
		}
		if((symmetry & 4) != 0) {
			let tmp = this._hashes;
			let p = variations[4];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[4] = result;
			this._variations[4] = variations[4];
		}
		if((symmetry & 5) != 0) {
			let tmp = this._hashes;
			let p = variations[5];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[5] = result;
			this._variations[5] = variations[5];
		}
		if((symmetry & 6) != 0) {
			let tmp = this._hashes;
			let p = variations[6];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[6] = result;
			this._variations[6] = variations[6];
		}
		if((symmetry & 7) != 0) {
			let tmp = this._hashes;
			let p = variations[7];
			let result = 0;
			let _g = 0;
			let _g1 = p.length;
			while(_g < _g1) {
				let i = _g++;
				result += p[p.length - 1 - i] << i + 1;
			}
			tmp[7] = result;
			this._variations[7] = variations[7];
		}
	}
	static init(size,pattern,symmetry) {
		if(symmetry == null) {
			symmetry = 255;
		}
		let p = new dropecho_dungen_map_Pattern(size,0);
		p._mapData = pattern;
		p.buildVariations(symmetry);
		return p;
	}
}
$hxClasses["dropecho.dungen.map.Pattern"] = $hx_exports["dungen"]["Pattern"] = dropecho_dungen_map_Pattern;
dropecho_dungen_map_Pattern.__name__ = "dropecho.dungen.map.Pattern";
dropecho_dungen_map_Pattern.__super__ = dropecho_dungen_Map2d;
Object.assign(dropecho_dungen_map_Pattern.prototype, {
	__class__: dropecho_dungen_map_Pattern
	,_variations: null
	,_hashes: null
});
class dropecho_dungen_map_extensions_BresenhamLine {
	static getLine(map,startX,startY,endX,endY) {
		if(endY == null) {
			endY = 0;
		}
		if(endX == null) {
			endX = 0;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		let dx = Math.abs(endX - startX);
		let sx = startX < endX ? 1 : -1;
		let dy = -Math.abs(endY - startY);
		let sy = startY < endY ? 1 : -1;
		let error = dx + dy;
		let x = startX;
		let y = startY;
		let tiles = [];
		while(true) {
			tiles.push(new dropecho_dungen_Tile2d(x,y,map._mapData[map._width * y + x]));
			if(x == endX && y == endY) {
				break;
			}
			let e2 = 2 * error;
			if(e2 >= dy) {
				if(x == endX) {
					break;
				}
				error += dy;
				x += sx;
			}
			if(e2 <= dx) {
				if(y == endY) {
					break;
				}
				error += dx;
				y += sy;
			}
		}
		return tiles;
	}
	static setLine(map,startX,startY,endX,endY,value) {
		if(value == null) {
			value = 0;
		}
		if(endY == null) {
			endY = 0;
		}
		if(endX == null) {
			endX = 0;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		let _g = 0;
		let _g1 = dropecho_dungen_map_extensions_BresenhamLine.getLine(map,startX,startY,endX,endY);
		while(_g < _g1.length) {
			let tile = _g1[_g];
			++_g;
			map._mapData[map._width * tile.y + tile.x] = value;
		}
	}
}
$hxClasses["dropecho.dungen.map.extensions.BresenhamLine"] = dropecho_dungen_map_extensions_BresenhamLine;
dropecho_dungen_map_extensions_BresenhamLine.__name__ = "dropecho.dungen.map.extensions.BresenhamLine";
class dropecho_dungen_map_extensions_CheckConnectivity {
	static checkConnectivity(map,tile,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(tile == null) {
			tile = 0;
		}
		let firstTile = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfType(map,tile);
		if(firstTile == null) {
			return false;
		}
		firstTile = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfTypeSet(map,tile,dropecho_dungen_map_extensions_FloodFill.floodFill(map,firstTile.x,firstTile.y,tile,diagonal));
		return firstTile == null;
	}
}
$hxClasses["dropecho.dungen.map.extensions.CheckConnectivity"] = $hx_exports["dungen"]["CheckConnectivity"] = dropecho_dungen_map_extensions_CheckConnectivity;
dropecho_dungen_map_extensions_CheckConnectivity.__name__ = "dropecho.dungen.map.extensions.CheckConnectivity";
class dropecho_dungen_map_extensions_DistanceFill {
	static distanceFill(map,valueToMeasureFrom,diagonal,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 40;
		}
		if(diagonal == null) {
			diagonal = true;
		}
		if(valueToMeasureFrom == null) {
			valueToMeasureFrom = 0;
		}
		let visited = new dropecho_ds_Set($bind(map,map.tileToIndex));
		let stack = new dropecho_ds_Stack();
		let neighbors = [];
		let distanceMap = new dropecho_dungen_Map2d(map._width,map._height);
		let tile = new dropecho_dungen_TileIterator(map);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			if(tile1.val == valueToMeasureFrom) {
				stack._data.push(tile1);
				distanceMap._mapData[distanceMap._width * tile1.y + tile1.x] = 0;
			} else {
				distanceMap._mapData[distanceMap._width * tile1.y + tile1.x] = maxDepth;
			}
		}
		while(stack._data.length > 0) {
			let current = stack._data.pop();
			visited.add(current);
			neighbors = dropecho_dungen_map_extensions_Neighbors.getNeighbors(distanceMap,current.x,current.y,1,diagonal);
			if(current.val == maxDepth) {
				let lowest = Lambda.fold(neighbors,function(t,val) {
					return Math.min(t.val,val);
				},maxDepth + 1) | 0;
				distanceMap._mapData[distanceMap._width * current.y + current.x] = Math.min(lowest + 1,maxDepth) | 0;
			}
			let _g = [];
			let _g1 = 0;
			let _g2 = neighbors;
			while(_g1 < _g2.length) {
				let v = _g2[_g1];
				++_g1;
				let _this = visited._data;
				let key = visited._hasher(v);
				if(!_this.h.hasOwnProperty(key)) {
					_g.push(v);
				}
			}
			let item = $getIterator(_g);
			while(item.hasNext()) {
				let item1 = item.next();
				stack._data.push(item1);
			}
		}
		return distanceMap;
	}
	static seep(map,valueToMeasureFrom,diagonal,maxDepth) {
		if(maxDepth == null) {
			maxDepth = 40;
		}
		if(diagonal == null) {
			diagonal = true;
		}
		if(valueToMeasureFrom == null) {
			valueToMeasureFrom = 0;
		}
		let stack = new dropecho_ds_Stack();
		let neighbors = [];
		let distanceMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let tile = new dropecho_dungen_TileIterator(map);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			if(tile1.val == 2) {
				stack._data.push(tile1);
			}
		}
		while(stack._data.length > 0) {
			let current = stack._data.pop();
			neighbors = dropecho_dungen_map_extensions_Neighbors.getNeighbors(distanceMap,current.x,current.y,1,diagonal);
			let _g = 0;
			while(_g < neighbors.length) {
				let n = neighbors[_g];
				++_g;
				if(n.val == 1) {
					distanceMap._mapData[distanceMap._width * n.y + n.x] = 2;
				}
			}
		}
		return distanceMap;
	}
}
$hxClasses["dropecho.dungen.map.extensions.DistanceFill"] = $hx_exports["dungen"]["DistanceFill"] = dropecho_dungen_map_extensions_DistanceFill;
dropecho_dungen_map_extensions_DistanceFill.__name__ = "dropecho.dungen.map.extensions.DistanceFill";
class dropecho_dungen_map_extensions_FindAndReplace {
	static findAndReplace(map,pattern1,pattern2,ignoreTile) {
		if(ignoreTile == null) {
			ignoreTile = -1;
		}
		let _g = 0;
		let _g1 = map._width;
		while(_g < _g1) {
			let x = _g++;
			let _g1 = 0;
			let _g2 = map._height;
			while(_g1 < _g2) {
				let y = _g1++;
				let patternIndex = pattern1.matchesIndex(map,x,y);
				if(patternIndex != -1) {
					dropecho_dungen_map_extensions_Splat.splat(map,pattern2.indexToMap(patternIndex),x,y,ignoreTile);
				}
			}
		}
		return map;
	}
}
$hxClasses["dropecho.dungen.map.extensions.FindAndReplace"] = $hx_exports["dungen"]["FindAndReplace"] = dropecho_dungen_map_extensions_FindAndReplace;
dropecho_dungen_map_extensions_FindAndReplace.__name__ = "dropecho.dungen.map.extensions.FindAndReplace";
class dropecho_dungen_map_extensions_FloodFill {
	static floodFill(map,x,y,value,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(value == null) {
			value = 0;
		}
		let visited = new dropecho_ds_Set(function(t) {
			return map._width * t.y + t.x;
		});
		let queue = new dropecho_ds_Queue();
		let current = new dropecho_dungen_Tile2d(x,y,0);
		queue._data.add(current);
		while(queue._data.length > 0) {
			current = queue._data.pop();
			visited.add(current);
			let _this = dropecho_dungen_map_extensions_Neighbors.getNeighbors(map,current.x,current.y,1,diagonal);
			let _g = [];
			let _g1 = 0;
			while(_g1 < _this.length) {
				let v = _this[_g1];
				++_g1;
				let _this1 = visited._data;
				let key = visited._hasher(v);
				if(!_this1.h.hasOwnProperty(key) && map._mapData[map._width * v.y + v.x] == value) {
					_g.push(v);
				}
			}
			let item = $getIterator(_g);
			while(item.hasNext()) {
				let item1 = item.next();
				queue._data.push(item1);
			}
		}
		return visited;
	}
}
$hxClasses["dropecho.dungen.map.extensions.FloodFill"] = $hx_exports["dungen"]["FloodFill"] = dropecho_dungen_map_extensions_FloodFill;
dropecho_dungen_map_extensions_FloodFill.__name__ = "dropecho.dungen.map.extensions.FloodFill";
class dropecho_dungen_map_extensions_GetFirstTileOfType {
	static getFirstTileOfType(map,tileVal,ignore) {
		if(tileVal == null) {
			tileVal = 0;
		}
		let isIgnored = function(check) {
			if(ignore == null) {
				return false;
			}
			return Lambda.find(ignore,function(tile) {
				if(tile.x == check.x) {
					return tile.y == check.y;
				} else {
					return false;
				}
			}) != null;
		};
		let tile = new dropecho_dungen_TileIterator(map);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			if(isIgnored(tile1)) {
				continue;
			}
			if(tile1.val == tileVal) {
				return tile1;
			}
		}
		return null;
	}
	static getFirstTileOfTypeSet(map,tileVal,ignore) {
		if(tileVal == null) {
			tileVal = 0;
		}
		let tile = new dropecho_dungen_TileIterator(map);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			let tmp;
			if(ignore != null) {
				let _this = ignore._data;
				let key = ignore._hasher(tile1);
				tmp = _this.h.hasOwnProperty(key);
			} else {
				tmp = false;
			}
			if(tmp) {
				continue;
			}
			if(tile1.val == tileVal) {
				return tile1;
			}
		}
		return null;
	}
}
$hxClasses["dropecho.dungen.map.extensions.GetFirstTileOfType"] = $hx_exports["dungen"]["GetFirstTileOfType"] = dropecho_dungen_map_extensions_GetFirstTileOfType;
dropecho_dungen_map_extensions_GetFirstTileOfType.__name__ = "dropecho.dungen.map.extensions.GetFirstTileOfType";
class dropecho_dungen_map_extensions_Neighbors {
	static getNeighborCount(map,x,y,neighborType,dist,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(dist == null) {
			dist = 1;
		}
		let count = 0;
		let isSelf = false;
		let isNotOnMap = false;
		let _g = -dist;
		let _g1 = dist + 1;
		while(_g < _g1) {
			let i = _g++;
			let _g1 = -dist;
			let _g2 = dist + 1;
			while(_g1 < _g2) {
				let j = _g1++;
				isSelf = i == 0 && j == 0;
				isNotOnMap = x + i < 0 || x + i >= map._width || y + j < 0 || y + j >= map._height;
				if(isSelf || isNotOnMap) {
					continue;
				}
				if(!diagonal && (i == j || i == -dist && j == dist || j == -dist && i == dist)) {
					continue;
				}
				if(map._mapData[map._width * (y + j) + (x + i)] == neighborType) {
					++count;
				}
			}
		}
		return count;
	}
	static getNeighbors(map,x,y,dist,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(dist == null) {
			dist = 1;
		}
		let neighbors = [];
		let isSelf = false;
		let isNotOnMap = false;
		let _g = -dist;
		let _g1 = dist + 1;
		while(_g < _g1) {
			let i = _g++;
			let _g1 = -dist;
			let _g2 = dist + 1;
			while(_g1 < _g2) {
				let j = _g1++;
				isSelf = i == 0 && j == 0;
				isNotOnMap = x + i < 0 || x + i >= map._width || y + j < 0 || y + j >= map._height;
				if(isSelf || isNotOnMap) {
					continue;
				}
				if(!diagonal && (i == j || i == -dist && j == dist || j == -dist && i == dist)) {
					continue;
				}
				neighbors.push(new dropecho_dungen_Tile2d(x + i,y + j,map._mapData[map._width * (y + j) + (x + i)]));
			}
		}
		return neighbors;
	}
}
$hxClasses["dropecho.dungen.map.extensions.Neighbors"] = $hx_exports["dungen"]["Neighbors"] = dropecho_dungen_map_extensions_Neighbors;
dropecho_dungen_map_extensions_Neighbors.__name__ = "dropecho.dungen.map.extensions.Neighbors";
class dropecho_dungen_map_extensions_RegionFill {
	static BFS(map,x,y,value) {
		let q = new dropecho_ds_Queue();
		let visited_h = { };
		q._data.add(new dropecho_dungen_Tile2d(x,y));
		visited_h[map._width * y + x] = -1;
		let currentIndex = -1;
		while(q._data.length > 0) {
			let current = q._data.pop();
			if(map._mapData[map._width * current.y + current.x] == value) {
				break;
			}
			currentIndex = map._width * current.y + current.x;
			let neighbors = dropecho_dungen_map_extensions_Neighbors.getNeighbors(map,current.x,current.y);
			let _g = 0;
			while(_g < neighbors.length) {
				let neighbor = neighbors[_g];
				++_g;
				let index = map._width * neighbor.y + neighbor.x;
				if(!visited_h.hasOwnProperty(index)) {
					visited_h[index] = currentIndex;
					q._data.add(neighbor);
				}
			}
		}
		let path = [];
		while(currentIndex != -1) {
			currentIndex = visited_h[currentIndex];
			if(currentIndex != -1) {
				path.push(new dropecho_dungen_Tile2d(currentIndex % map._width,currentIndex / map._width | 0));
			}
		}
		return path;
	}
	static distToValue(map,x,y,value) {
		let count = 0;
		let dist = 0;
		while(count == 0 && dist < 10) {
			++dist;
			count = dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,x,y,value,dist);
		}
		return dist - 1;
	}
	static regionFill(map,wall,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(wall == null) {
			wall = 0;
		}
		let regionMap = new dropecho_dungen_Map2d(map._width,map._height);
		let _g = 0;
		let _g1 = map._mapData.length;
		while(_g < _g1) {
			let i = _g++;
			if(map._mapData[i] == wall) {
				regionMap._mapData[i] = 999999;
			} else {
				regionMap._mapData[i] = map._mapData[i];
			}
		}
		let _g2 = 0;
		let _g3 = regionMap._mapData.length;
		while(_g2 < _g3) {
			let i = _g2++;
			if(regionMap._mapData[i] == 999999) {
				continue;
			}
			let tile = new dropecho_dungen_Tile2d(i % regionMap._width,i / regionMap._width | 0);
			regionMap._mapData[i] = dropecho_dungen_map_extensions_RegionFill.distToValue(regionMap,tile.x,tile.y,999999);
		}
		return regionMap;
	}
}
$hxClasses["dropecho.dungen.map.extensions.RegionFill"] = $hx_exports["dungen"]["RegionFill"] = dropecho_dungen_map_extensions_RegionFill;
dropecho_dungen_map_extensions_RegionFill.__name__ = "dropecho.dungen.map.extensions.RegionFill";
class dropecho_dungen_map_extensions_RegionManager {
	static removeIslandsBySize(map,size,tileType) {
		if(tileType == null) {
			tileType = 1;
		}
		if(size == null) {
			size = 4;
		}
		let cleanedMap = new dropecho_dungen_Map2d(map._width,map._height);
		let nextTile;
		let visited = new dropecho_ds_Set(function(t) {
			return cleanedMap._width * t.y + t.x;
		});
		let _g = 0;
		let _g1 = map._mapData.length;
		while(_g < _g1) {
			let i = _g++;
			cleanedMap._mapData[i] = map._mapData[i];
		}
		while(true) {
			nextTile = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfTypeSet(cleanedMap,tileType,visited);
			if(!(nextTile != null)) {
				break;
			}
			let tiles = dropecho_dungen_map_extensions_FloodFill.floodFill(cleanedMap,nextTile.x,nextTile.y,tileType);
			let count = 0;
			let key = tiles._data.keys();
			while(key.hasNext()) {
				key.next();
				++count;
			}
			let isIsland = count <= size;
			if(isIsland) {
				visited.add(nextTile);
			}
			let t = tiles._data.iterator();
			while(t.hasNext()) {
				let t1 = t.next();
				if(isIsland) {
					cleanedMap._mapData[cleanedMap._width * t1.y + t1.x] = 0;
				} else {
					visited.add(t1);
				}
			}
		}
		return cleanedMap;
	}
	static removeIslands(map,tileType) {
		if(tileType == null) {
			tileType = 1;
		}
		let nextTile;
		let visited = new dropecho_ds_Set(function(t) {
			return map._width * t.y + t.x;
		});
		let cleanedMap = new dropecho_dungen_Map2d(map._width,map._height);
		let _g = 0;
		let _g1 = map._mapData.length;
		while(_g < _g1) {
			let i = _g++;
			cleanedMap._mapData[i] = map._mapData[i];
		}
		while(true) {
			nextTile = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfTypeSet(cleanedMap,tileType,visited);
			if(!(nextTile != null)) {
				break;
			}
			visited.add(nextTile);
			let tiles = dropecho_dungen_map_extensions_FloodFill.floodFill(cleanedMap,nextTile.x,nextTile.y,tileType);
			let isIsland = true;
			let t = tiles._data.iterator();
			while(t.hasNext()) {
				let t1 = t.next();
				if(dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,t1.x,t1.y,tileType) + dropecho_dungen_map_extensions_Neighbors.getNeighborCount(map,t1.x,t1.y,0) != 8) {
					isIsland = false;
					break;
				}
			}
			if(isIsland) {
				let t = tiles._data.iterator();
				while(t.hasNext()) {
					let t1 = t.next();
					cleanedMap._mapData[cleanedMap._width * t1.y + t1.x] = 0;
				}
			}
		}
		return cleanedMap;
	}
	static findAndTagBorders(map,borderType,startTag) {
		if(startTag == null) {
			startTag = 2;
		}
		if(borderType == null) {
			borderType = 1;
		}
		let borderMap = new dropecho_dungen_Map2d(map._width,map._height);
		let tile = new dropecho_dungen_TileIterator(borderMap);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			borderMap._mapData[borderMap._width * tile1.y + tile1.x] = tile1.val == borderType ? 1 : 0;
		}
		let nextTag = startTag;
		let nextBorder = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfType(borderMap,borderType);
		while(nextBorder != null) {
			let t = dropecho_dungen_map_extensions_FloodFill.floodFill(borderMap,nextBorder.x,nextBorder.y,borderType)._data.iterator();
			while(t.hasNext()) {
				let t1 = t.next();
				borderMap._mapData[borderMap._width * t1.y + t1.x] = nextTag;
			}
			++nextTag;
			nextBorder = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfType(borderMap,borderType);
		}
		return borderMap;
	}
	static findAndTagRegions(map,depth) {
		if(depth == null) {
			depth = 2;
		}
		let regionmap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let tile = new dropecho_dungen_TileIterator(regionmap);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			regionmap._mapData[regionmap._width * tile1.y + tile1.x] = tile1.val >= depth ? depth : tile1.val;
		}
		let nextTag = depth;
		let nextRegion = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfType(regionmap,depth);
		while(nextRegion != null) {
			let tile = dropecho_dungen_map_extensions_FloodFill.floodFill(regionmap,nextRegion.x,nextRegion.y,depth)._data.iterator();
			while(tile.hasNext()) {
				let tile1 = tile.next();
				regionmap._mapData[regionmap._width * tile1.y + tile1.x] = nextTag;
			}
			++nextTag;
			nextRegion = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfType(regionmap,depth);
		}
		return regionmap;
	}
	static raiseLevel(map,startTag) {
		let expandedMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let tile = new dropecho_dungen_TileIterator(map);
		while(tile.hasNext()) {
			let tile1 = tile.next();
			if(tile1.val < startTag && tile1.val != 0) {
				expandedMap._mapData[expandedMap._width * tile1.y + tile1.x] = tile1.val + 1;
			}
		}
		return expandedMap;
	}
	static expandRegionsByOne(map,startTag) {
		let expandedMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let emptyTag = startTag - 1;
		let regionTile = new dropecho_dungen_TileIterator(map);
		while(regionTile.hasNext()) {
			let regionTile1 = regionTile.next();
			if(regionTile1.val < startTag) {
				continue;
			}
			let _this = dropecho_dungen_map_extensions_Neighbors.getNeighbors(expandedMap,regionTile1.x,regionTile1.y);
			let _g = [];
			let _g1 = 0;
			while(_g1 < _this.length) {
				let v = _this[_g1];
				++_g1;
				if(v.val == emptyTag) {
					_g.push(v);
				}
			}
			let _g2 = 0;
			while(_g2 < _g.length) {
				let n = _g[_g2];
				++_g2;
				let nn = dropecho_dungen_map_extensions_Neighbors.getNeighbors(expandedMap,n.x,n.y,1,false);
				let _g1 = [];
				let _g3 = 0;
				while(_g3 < nn.length) {
					let v = nn[_g3];
					++_g3;
					if(v.val >= startTag && v.val != regionTile1.val) {
						_g1.push(v);
					}
				}
				let otherRegionsTouched = _g1.length;
				let _g4 = [];
				let _g5 = 0;
				while(_g5 < nn.length) {
					let v = nn[_g5];
					++_g5;
					if(v.val == emptyTag) {
						_g4.push(v);
					}
				}
				let open = _g4.length;
				let _g6 = [];
				let _g7 = 0;
				while(_g7 < nn.length) {
					let v = nn[_g7];
					++_g7;
					if(v.val == 0) {
						_g6.push(v);
					}
				}
				if(otherRegionsTouched > 0) {
					continue;
				}
				if(_g6.length >= 2 && open >= 1) {
					continue;
				}
				expandedMap._mapData[expandedMap._width * n.y + n.x] = regionTile1.val;
			}
		}
		return dropecho_dungen_map_extensions_RegionManager.raiseLevel(expandedMap,startTag - 1);
	}
	static fillAlcoves(map,startTag) {
		let expandedMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let visited = new dropecho_ds_Set(function(tile) {
			return expandedMap._width * tile.y + tile.x;
		});
		let first = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfTypeSet(expandedMap,startTag - 1,visited);
		while(first != null) {
			let fill = dropecho_dungen_map_extensions_FloodFill.floodFill(expandedMap,first.x,first.y,startTag - 1,true);
			let allneighbors = [];
			let tile = fill._data.iterator();
			while(tile.hasNext()) {
				let tile1 = tile.next();
				allneighbors = allneighbors.concat(dropecho_dungen_map_extensions_Neighbors.getNeighbors(expandedMap,tile1.x,tile1.y));
				visited.add(tile1);
			}
			let _g = [];
			let _g1 = 0;
			let _g2 = allneighbors;
			while(_g1 < _g2.length) {
				let v = _g2[_g1];
				++_g1;
				if(v.val >= startTag) {
					_g.push(v);
				}
			}
			let regions = _g;
			if(regions.length > 0) {
				if(Lambda.find(regions,function(t) {
					return t.val != regions[0].val;
				}) == null) {
					let tile = fill._data.iterator();
					while(tile.hasNext()) {
						let tile1 = tile.next();
						expandedMap._mapData[expandedMap._width * tile1.y + tile1.x] = regions[0].val;
					}
				}
			} else {
				let tile = fill._data.iterator();
				while(tile.hasNext()) {
					let tile1 = tile.next();
					expandedMap._mapData[expandedMap._width * tile1.y + tile1.x] = 0;
				}
			}
			first = dropecho_dungen_map_extensions_GetFirstTileOfType.getFirstTileOfTypeSet(expandedMap,startTag - 1,visited);
		}
		return expandedMap;
	}
	static expandRegions(map,startTag,eatWalls) {
		if(eatWalls == null) {
			eatWalls = false;
		}
		if(startTag == null) {
			startTag = 3;
		}
		let expandedMap = dropecho_dungen_map_Map2dExtensions.clone(map);
		let _g = 0;
		while(_g < 100) {
			++_g;
			let _g1 = startTag;
			let _g2 = startTag + 500;
			while(_g1 < _g2) {
				let currentTag = _g1++;
				let tilesToPaint = [];
				let tile = new dropecho_dungen_TileIterator(expandedMap);
				while(tile.hasNext()) {
					let tile1 = tile.next();
					if(tile1.val != currentTag) {
						continue;
					}
					let _g = 0;
					let _g1 = dropecho_dungen_map_extensions_Neighbors.getNeighbors(expandedMap,tile1.x,tile1.y);
					while(_g < _g1.length) {
						let neighbor = _g1[_g];
						++_g;
						if(neighbor.val > startTag) {
							continue;
						}
						if(!eatWalls && neighbor.val == 0) {
							continue;
						}
						let nWalls = dropecho_dungen_map_extensions_Neighbors.getNeighborCount(expandedMap,neighbor.x,neighbor.y,0);
						let nOpen = 0;
						let _g2 = 1;
						while(_g2 < startTag) nOpen += dropecho_dungen_map_extensions_Neighbors.getNeighborCount(expandedMap,neighbor.x,neighbor.y,_g2++);
						if(nWalls + nOpen + dropecho_dungen_map_extensions_Neighbors.getNeighborCount(expandedMap,neighbor.x,neighbor.y,currentTag) == 8) {
							tilesToPaint.push(expandedMap._width * neighbor.y + neighbor.x);
						}
					}
				}
				let _g = 0;
				while(_g < tilesToPaint.length) expandedMap._mapData[tilesToPaint[_g++]] = currentTag;
			}
		}
		return map;
	}
}
$hxClasses["dropecho.dungen.map.extensions.RegionManager"] = $hx_exports["dungen"]["RegionManager"] = dropecho_dungen_map_extensions_RegionManager;
dropecho_dungen_map_extensions_RegionManager.__name__ = "dropecho.dungen.map.extensions.RegionManager";
class dropecho_dungen_map_extensions_Splat {
	static splat(map,other,x,y,ignoreTile) {
		if(ignoreTile == null) {
			ignoreTile = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		let _g = 0;
		let _g1 = other._width;
		while(_g < _g1) {
			let x2 = _g++;
			let _g1 = 0;
			let _g2 = other._height;
			while(_g1 < _g2) {
				let y2 = _g1++;
				let otherTile = other._mapData[other._width * y2 + x2];
				if(otherTile != ignoreTile) {
					map._mapData[map._width * (y2 + y) + (x2 + x)] = otherTile;
				}
			}
		}
	}
}
$hxClasses["dropecho.dungen.map.extensions.Splat"] = dropecho_dungen_map_extensions_Splat;
dropecho_dungen_map_extensions_Splat.__name__ = "dropecho.dungen.map.extensions.Splat";
class dropecho_dungen_map_extensions_Utils {
	static getRect(map,rect,wrap) {
		if(wrap == null) {
			wrap = false;
		}
		let _g = [];
		let _g1 = rect.y;
		let _g2 = rect.y + rect.height;
		while(_g1 < _g2) {
			let j = _g1++;
			let _g2 = rect.x;
			let _g3 = rect.x + rect.width;
			while(_g2 < _g3) {
				let i = _g2++;
				if(wrap) {
					_g.push(map._mapData[map._width * (j % map._height) + i % map._width]);
				} else {
					_g.push(map._mapData[map._width * j + i]);
				}
			}
		}
		return _g;
	}
	static setRect(map,rect,data) {
		let _g = rect.y;
		let _g1 = rect.y + rect.height + 1;
		while(_g < _g1) {
			let j = _g++;
			let _g1 = rect.x;
			let _g2 = rect.x + rect.width + 1;
			while(_g1 < _g2) map._mapData[map._width * j + _g1++] = data;
		}
	}
	static checkOverlap(r1,r2) {
		return !(r1.x > r2.x + r2.width || r2.x > r1.x + r1.width || r1.y > r2.y + r2.height || r2.y > r1.y + r1.height);
	}
	static contains(r1,r2) {
		if(r2.x + r2.width < r1.x + r1.width && r2.y + r2.height < r1.y + r1.height && r2.x > r1.x) {
			return r2.y > r1.y;
		} else {
			return false;
		}
	}
	static isOverlappingArray(r1,a) {
		let _g = 0;
		while(_g < a.length) {
			let r = a[_g];
			++_g;
			if(r == r1) {
				continue;
			}
			if(dropecho_dungen_map_extensions_Utils.checkOverlap(r1,r)) {
				return true;
			}
		}
		return false;
	}
}
$hxClasses["dropecho.dungen.map.extensions.Utils"] = dropecho_dungen_map_extensions_Utils;
dropecho_dungen_map_extensions_Utils.__name__ = "dropecho.dungen.map.extensions.Utils";
class dropecho_interop_AbstractArray {
	static _new(a) {
		let this1;
		if(a != null) {
			this1 = a;
		} else {
			this1 = [];
		}
		return this1;
	}
	static get(this1,i) {
		return this1[i];
	}
	static set(this1,i,v) {
		return this1[i] = v;
	}
	static fromAny(d) {
		let arr = js_Boot.__cast(d , Array);
		let _g = [];
		let _g1 = 0;
		while(_g1 < arr.length) _g.push(arr[_g1++]);
		return dropecho_interop_AbstractArray._new(_g);
	}
}
class dropecho_interop_Action_$0 {
	static fromHaxe(f) {
		return f;
	}
	static toAction(this1) {
		return this1;
	}
	static call(this1) {
		this1();
	}
}
class dropecho_interop_Action_$1 {
	static fromHaxe(f) {
		return f;
	}
	static toAction(this1) {
		return this1;
	}
	static call(this1,p1) {
		this1(p1);
	}
}
class dropecho_interop_Action_$2 {
	static fromHaxe(f) {
		return f;
	}
	static toAction(this1) {
		return this1;
	}
	static call(this1,p1,p2) {
		this1(p1,p2);
	}
}
class dropecho_interop_Func_$0 {
	static fromHaxe(f) {
		return f;
	}
	static toFunc(this1) {
		return this1;
	}
	static call(this1) {
		return this1();
	}
}
class dropecho_interop_Func_$1 {
	static fromHaxe(f) {
		return f;
	}
	static toFunc(this1) {
		return this1;
	}
	static call(this1,p1) {
		return this1(p1);
	}
}
class dropecho_interop_Func_$2 {
	static fromHaxe(f) {
		return f;
	}
	static toFunc(this1) {
		return this1;
	}
	static call(this1,p1,p2) {
		return this1(p1,p2);
	}
}
class dropecho_interop_JSAbstractMapKeyValueIterator {
	constructor(map) {
		this._iter = new haxe_iterators_DynamicAccessKeyValueIterator(map);
	}
	hasNext() {
		let _this = this._iter;
		return _this.index < _this.keys.length;
	}
	next() {
		let _this = this._iter;
		let key = _this.keys[_this.index++];
		return { value : _this.access[key], key : key};
	}
}
$hxClasses["dropecho.interop.JSAbstractMapKeyValueIterator"] = dropecho_interop_JSAbstractMapKeyValueIterator;
dropecho_interop_JSAbstractMapKeyValueIterator.__name__ = "dropecho.interop.JSAbstractMapKeyValueIterator";
Object.assign(dropecho_interop_JSAbstractMapKeyValueIterator.prototype, {
	__class__: dropecho_interop_JSAbstractMapKeyValueIterator
	,_iter: null
});
class dropecho_interop_AbstractMap {
	static _new(s) {
		let this1;
		if(s != null) {
			this1 = s;
		} else {
			this1 = { };
		}
		return this1;
	}
	static keyValueIterator(this1) {
		return new dropecho_interop_JSAbstractMapKeyValueIterator(this1);
	}
	static fromMap(map) {
		let abs = dropecho_interop_AbstractMap._new();
		let _g = map.keyValueIterator();
		while(_g.hasNext()) {
			let _g1 = _g.next();
			abs[Std.string(_g1.key)] = _g1.value;
		}
		return abs;
	}
	static fromIMap(map) {
		let abs = dropecho_interop_AbstractMap._new();
		let _g = map.keyValueIterator();
		while(_g.hasNext()) {
			let _g1 = _g.next();
			abs[Std.string(_g1.key)] = _g1.value;
		}
		return abs;
	}
	static exists(this1,key) {
		return Object.prototype.hasOwnProperty.call(this1,Std.string(key));
	}
	static get(this1,key) {
		return this1[Std.string(key)];
	}
	static set(this1,key,value) {
		this1[Std.string(key)] = value;
		return value;
	}
	static clear(this1) {
		let _g = 0;
		let _g1 = Reflect.fields(this1);
		while(_g < _g1.length) Reflect.deleteField(this1,_g1[_g++]);
	}
}
class dropecho_interop_Extender {
	static extendThis(base,extension) {
		if(extension == null) {
			return;
		}
		let _g = 0;
		let _g1 = Reflect.fields(base);
		while(_g < _g1.length) {
			let f = _g1[_g];
			++_g;
			let opt = Reflect.field(extension,f);
			base[f] = opt != null ? opt : Reflect.field(base,f);
		}
	}
	static defaults(base,extension) {
		if(base == null) {
			throw haxe_Exception.thrown("Base cannot be null.");
		}
		if(extension == null) {
			return base;
		}
		let extensions = [];
		if(((extension) instanceof Array)) {
			extensions = extension.filter(function(x) {
				return x != null;
			});
		} else {
			extensions.push(extension);
		}
		let _g = 0;
		while(_g < extensions.length) {
			let ex = extensions[_g];
			++_g;
			let fields = Reflect.fields(ex);
			let exType = js_Boot.getClass(ex);
			let typeFields;
			if(exType != null) {
				let _this = Type.getInstanceFields(exType);
				let result = new Array(_this.length);
				let _g = 0;
				let _g1 = _this.length;
				while(_g < _g1) {
					let i = _g++;
					let f = _this[i];
					let typeFields;
					if(f.startsWith("get_") || f.startsWith("set_")) {
						let parts = f.split("_");
						parts.shift();
						typeFields = parts.join("_");
					} else {
						typeFields = f;
					}
					result[i] = typeFields;
				}
				typeFields = result;
			} else {
				typeFields = [];
			}
			if(fields.length == 0) {
				fields = typeFields;
			}
			[];
			let baseClass = js_Boot.getClass(base);
			if(baseClass != null) {
				Type.getInstanceFields(baseClass);
			}
			let _g1 = 0;
			while(_g1 < fields.length) {
				let ff = fields[_g1];
				++_g1;
				let exField = Reflect.field(ex,ff);
				let baseField = Reflect.field(base,ff);
				let bfIsArray = dropecho_interop_Extender.isArray(baseField);
				let bfIsMap = dropecho_interop_Extender.isMap(baseField);
				let bfIsObject = !bfIsArray && !bfIsMap && dropecho_interop_Extender.isObject(baseField);
				if(bfIsArray) {
					let _g = 0;
					let _g1 = dropecho_interop_AbstractArray.fromAny(exField);
					while(_g < _g1.length) baseField.push(_g1[_g++]);
				} else if(bfIsMap) {
					let abs = dropecho_interop_AbstractMap._new();
					let _g = exField.keyValueIterator();
					while(_g.hasNext()) {
						let _g1 = _g.next();
						abs[Std.string(_g1.key)] = _g1.value;
					}
					let _g1 = new dropecho_interop_JSAbstractMapKeyValueIterator(abs);
					while(_g1.hasNext()) {
						let _g = _g1.next();
						baseField.set(_g.key,_g.value);
					}
				} else if(bfIsObject) {
					dropecho_interop_Extender.defaults(baseField,exField);
				} else {
					try {
						base[ff] = exField;
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						let _g1 = haxe_Exception.caught(_g).unwrap();
						haxe_Log.trace("FAILED SETTING PROP: " + ff + " error: " + Std.string(_g1),{ fileName : "dropecho/interop/Extender.hx", lineNumber : 85, className : "dropecho.interop.Extender", methodName : "defaults"});
					}
				}
			}
		}
		return base;
	}
	static isObject(obj) {
		let stdis = Reflect.isObject(obj);
		let type = js_Boot.getClass(obj);
		let name = type != null ? type.__name__ : "";
		if(stdis) {
			return name != "String";
		} else {
			return false;
		}
	}
	static isArray(obj) {
		return ((obj) instanceof Array);
	}
	static isMap(obj) {
		if(((obj) instanceof Map)) {
			return true;
		}
		let type = js_Boot.getClass(obj);
		let name = type != null ? type.__name__ : "";
		if(name == null) {
			name = "";
		}
		if(name.startsWith("haxe.ds.")) {
			return name.endsWith("Map");
		} else {
			return false;
		}
	}
}
$hxClasses["dropecho.interop.Extender"] = dropecho_interop_Extender;
dropecho_interop_Extender.__name__ = "dropecho.interop.Extender";
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
class haxe_CallStack {
	static get_length(this1) {
		return this1.length;
	}
	static callStack() {
		return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
	}
	static exceptionStack(fullStack) {
		if(fullStack == null) {
			fullStack = false;
		}
		let eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
		return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
	}
	static toString(stack) {
		let b = new StringBuf();
		let _g = 0;
		let _g1 = stack;
		while(_g < _g1.length) {
			let s = _g1[_g++];
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static subtract(this1,stack) {
		let startIndex = -1;
		let i = -1;
		while(++i < this1.length) {
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) if(haxe_CallStack.equalItems(this1[i],stack[_g++])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
			if(startIndex >= 0) {
				break;
			}
		}
		if(startIndex >= 0) {
			return this1.slice(0,startIndex);
		} else {
			return this1;
		}
	}
	static copy(this1) {
		return this1.slice();
	}
	static get(this1,index) {
		return this1[index];
	}
	static asArray(this1) {
		return this1;
	}
	static equalItems(item1,item2) {
		if(item1 == null) {
			if(item2 == null) {
				return true;
			} else {
				return false;
			}
		} else {
			switch(item1._hx_index) {
			case 0:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 0) {
					return true;
				} else {
					return false;
				}
				break;
			case 1:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 1) {
					return item1.m == item2.m;
				} else {
					return false;
				}
				break;
			case 2:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 2) {
					if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
						return haxe_CallStack.equalItems(item1.s,item2.s);
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 3:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 3) {
					if(item1.classname == item2.classname) {
						return item1.method == item2.method;
					} else {
						return false;
					}
				} else {
					return false;
				}
				break;
			case 4:
				if(item2 == null) {
					return false;
				} else if(item2._hx_index == 4) {
					return item1.v == item2.v;
				} else {
					return false;
				}
				break;
			}
		}
	}
	static exceptionToString(e) {
		if(e.get_previous() == null) {
			let tmp = "Exception: " + e.toString();
			let tmp1 = e.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		}
		let result = "";
		let e1 = e;
		let prev = null;
		while(e1 != null) {
			if(prev == null) {
				let result1 = "Exception: " + e1.get_message();
				let tmp = e1.get_stack();
				result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
			} else {
				let prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
				result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
			}
			prev = e1;
			e1 = e1.get_previous();
		}
		return result;
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			let _g = s.m;
			b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
			break;
		case 2:
			let _g1 = s.s;
			let _g2 = s.file;
			let _g3 = s.line;
			let _g4 = s.column;
			if(_g1 != null) {
				haxe_CallStack.itemToString(b,_g1);
				b.b += " (";
			}
			b.b = (b.b += _g2 == null ? "null" : "" + _g2) + " line ";
			b.b += _g3 == null ? "null" : "" + _g3;
			if(_g4 != null) {
				b.b = (b.b += " column ") + (_g4 == null ? "null" : "" + _g4);
			}
			if(_g1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			let _g5 = s.classname;
			let _g6 = s.method;
			b.b = (b.b += Std.string(_g5 == null ? "<unknown>" : _g5)) + ".";
			b.b += _g6 == null ? "null" : "" + _g6;
			break;
		case 4:
			let _g7 = s.v;
			b.b = (b.b += "local function #") + (_g7 == null ? "null" : "" + _g7);
			break;
		}
	}
}
haxe_CallStack.__properties__ = {get_length: "get_length"};
class haxe_IMap {
}
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
});
class haxe_DynamicAccess {
	static _new() {
		return { };
	}
	static get(this1,key) {
		return this1[key];
	}
	static set(this1,key,value) {
		return this1[key] = value;
	}
	static exists(this1,key) {
		return Object.prototype.hasOwnProperty.call(this1,key);
	}
	static remove(this1,key) {
		return Reflect.deleteField(this1,key);
	}
	static keys(this1) {
		return Reflect.fields(this1);
	}
	static copy(this1) {
		return Reflect.copy(this1);
	}
	static iterator(this1) {
		return new haxe_iterators_DynamicAccessIterator(this1);
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
	}
}
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
		this.__skipStack = 0;
		let old = Error.prepareStackTrace;
		Error.prepareStackTrace = function(e) { return e.stack; }
		if(((native) instanceof Error)) {
			this.stack = native.stack;
		} else {
			let e = null;
			if(Error.captureStackTrace) {
				Error.captureStackTrace(this,haxe_Exception);
				e = this;
			} else {
				e = new Error();
				if(typeof(e.stack) == "undefined") {
					try { throw e; } catch(_) {}
					this.__skipStack++;
				}
			}
			this.stack = e.stack;
		}
		Error.prepareStackTrace = old;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	details() {
		if(this.get_previous() == null) {
			let tmp = "Exception: " + this.toString();
			let tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			let result = "";
			let e = this;
			let prev = null;
			while(e != null) {
				if(prev == null) {
					let result1 = "Exception: " + e.get_message();
					let tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					let prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	__shiftStack() {
		this.__skipStack++;
	}
	get_message() {
		return this.message;
	}
	get_previous() {
		return this.__previousException;
	}
	get_native() {
		return this.__nativeException;
	}
	get_stack() {
		let _g = this.__exceptionStack;
		if(_g == null) {
			let value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	setProperty(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	get___exceptionStack() {
		return this.__exceptionStack;
	}
	set___exceptionStack(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	get___skipStack() {
		return this.__skipStack;
	}
	set___skipStack(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	get___nativeException() {
		return this.__nativeException;
	}
	set___nativeException(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	get___previousException() {
		return this.__previousException;
	}
	set___previousException(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			e.__skipStack++;
			return e;
		}
	}
}
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__skipStack: null
	,__nativeException: null
	,__previousException: null
	,__properties__: {set___exceptionStack: "set___exceptionStack",get___exceptionStack: "get___exceptionStack",get_native: "get_native",get_previous: "get_previous",get_stack: "get_stack",get_message: "get_message"}
});
class haxe_Int32 {
	static negate(this1) {
		return ~this1 + 1 | 0;
	}
	static preIncrement(this1) {
		this1 = ++this1 | 0;
		return this1;
	}
	static postIncrement(this1) {
		let ret = this1++;
		this1 |= 0;
		return ret;
	}
	static preDecrement(this1) {
		this1 = --this1 | 0;
		return this1;
	}
	static postDecrement(this1) {
		let ret = this1--;
		this1 |= 0;
		return ret;
	}
	static add(a,b) {
		return a + b | 0;
	}
	static addInt(a,b) {
		return a + b | 0;
	}
	static sub(a,b) {
		return a - b | 0;
	}
	static subInt(a,b) {
		return a - b | 0;
	}
	static intSub(a,b) {
		return a - b | 0;
	}
	static mul(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static mulInt(a,b) {
		return haxe_Int32._mul(a,b);
	}
	static toFloat(this1) {
		return this1;
	}
	static ucompare(a,b) {
		if(a < 0) {
			if(b < 0) {
				return ~b - ~a | 0;
			} else {
				return 1;
			}
		}
		if(b < 0) {
			return -1;
		} else {
			return a - b | 0;
		}
	}
	static clamp(x) {
		return x | 0;
	}
}
class haxe_Int64 {
	static _new(x) {
		return x;
	}
	static copy(this1) {
		return new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	}
	static make(high,low) {
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static ofInt(x) {
		return new haxe__$Int64__$_$_$Int64(x >> 31,x);
	}
	static toInt(x) {
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		return x.low;
	}
	static is(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static isInt64(val) {
		return ((val) instanceof haxe__$Int64__$_$_$Int64);
	}
	static getHigh(x) {
		return x.high;
	}
	static getLow(x) {
		return x.low;
	}
	static isNeg(x) {
		return x.high < 0;
	}
	static isZero(x) {
		if(x.high == 0) {
			return x.low == 0;
		} else {
			return false;
		}
	}
	static compare(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		if(a.high < 0) {
			if(b.high < 0) {
				return v;
			} else {
				return -1;
			}
		} else if(b.high >= 0) {
			return v;
		} else {
			return 1;
		}
	}
	static ucompare(a,b) {
		let v = haxe_Int32.ucompare(a.high,b.high);
		if(v != 0) {
			return v;
		} else {
			return haxe_Int32.ucompare(a.low,b.low);
		}
	}
	static toStr(x) {
		return haxe_Int64.toString(x);
	}
	static toString(this1) {
		let i = this1;
		if(i.high == 0 && i.low == 0) {
			return "0";
		}
		let str = "";
		let neg = false;
		if(i.high < 0) {
			neg = true;
		}
		let ten = new haxe__$Int64__$_$_$Int64(0,10);
		while(i.high != 0 || i.low != 0) {
			let r = haxe_Int64.divMod(i,ten);
			if(r.modulus.high < 0) {
				str = (~r.modulus.low + 1 | 0) + str;
				let x = r.quotient;
				let high = ~x.high;
				let low = ~x.low + 1 | 0;
				if(low == 0) {
					++high;
					high = high | 0;
				}
				i = new haxe__$Int64__$_$_$Int64(high,low);
			} else {
				str = r.modulus.low + str;
				i = r.quotient;
			}
		}
		if(neg) {
			str = "-" + str;
		}
		return str;
	}
	static parseString(sParam) {
		return haxe_Int64Helper.parseString(sParam);
	}
	static fromFloat(f) {
		return haxe_Int64Helper.fromFloat(f);
	}
	static divMod(dividend,divisor) {
		if(divisor.high == 0) {
			switch(divisor.low) {
			case 0:
				throw haxe_Exception.thrown("divide by zero");
			case 1:
				return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
			}
		}
		let divSign = dividend.high < 0 != divisor.high < 0;
		let modulus;
		if(dividend.high < 0) {
			let high = ~dividend.high;
			let low = ~dividend.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		} else {
			modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		}
		if(divisor.high < 0) {
			let high = ~divisor.high;
			let low = ~divisor.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			divisor = new haxe__$Int64__$_$_$Int64(high,low);
		}
		let quotient = new haxe__$Int64__$_$_$Int64(0,0);
		let mask = new haxe__$Int64__$_$_$Int64(0,1);
		while(!(divisor.high < 0)) {
			let v = haxe_Int32.ucompare(divisor.high,modulus.high);
			let cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
			divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
			mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
			if(cmp >= 0) {
				break;
			}
		}
		while(mask.high != 0 || mask.low != 0) {
			let v = haxe_Int32.ucompare(modulus.high,divisor.high);
			if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
				quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
				let high = modulus.high - divisor.high | 0;
				if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
					--high;
					high = high | 0;
				}
				modulus = new haxe__$Int64__$_$_$Int64(high,modulus.low - divisor.low | 0);
			}
			mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
			divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
		}
		if(divSign) {
			let high = ~quotient.high;
			let low = ~quotient.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			quotient = new haxe__$Int64__$_$_$Int64(high,low);
		}
		if(dividend.high < 0) {
			let high = ~modulus.high;
			let low = ~modulus.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		return { quotient : quotient, modulus : modulus};
	}
	static neg(x) {
		let high = ~x.high;
		let low = ~x.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static preIncrement(this1) {
		let x = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = x;
		x.low++;
		x.low = x.low | 0;
		if(x.low == 0) {
			x.high++;
			x.high = x.high | 0;
		}
		return x;
	}
	static postIncrement(this1) {
		let ret = this1;
		let x = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = x;
		x.low++;
		x.low = x.low | 0;
		if(x.low == 0) {
			x.high++;
			x.high = x.high | 0;
		}
		return ret;
	}
	static preDecrement(this1) {
		let x = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = x;
		if(x.low == 0) {
			x.high--;
			x.high = x.high | 0;
		}
		x.low--;
		x.low = x.low | 0;
		return x;
	}
	static postDecrement(this1) {
		let ret = this1;
		let x = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
		this1 = x;
		if(x.low == 0) {
			x.high--;
			x.high = x.high | 0;
		}
		x.low--;
		x.low = x.low | 0;
		return ret;
	}
	static add(a,b) {
		let high = a.high + b.high | 0;
		let low = a.low + b.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static addInt(a,b) {
		let high = a.high + (b >> 31) | 0;
		let low = a.low + b | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static sub(a,b) {
		let high = a.high - b.high | 0;
		if(haxe_Int32.ucompare(a.low,b.low) < 0) {
			--high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,a.low - b.low | 0);
	}
	static subInt(a,b) {
		let b_low = b;
		let high = a.high - (b >> 31) | 0;
		if(haxe_Int32.ucompare(a.low,b_low) < 0) {
			--high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,a.low - b_low | 0);
	}
	static intSub(a,b) {
		let a_low = a;
		let high = (a >> 31) - b.high | 0;
		if(haxe_Int32.ucompare(a_low,b.low) < 0) {
			--high;
			high = high | 0;
		}
		return new haxe__$Int64__$_$_$Int64(high,a_low - b.low | 0);
	}
	static mul(a,b) {
		let al = a.low & 65535;
		let ah = a.low >>> 16;
		let bl = b.low & 65535;
		let bh = b.low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let low = p00;
		let high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = p00 + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b.high) + haxe_Int32._mul(a.high,b.low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static mulInt(a,b) {
		let b_low = b;
		let al = a.low & 65535;
		let ah = a.low >>> 16;
		let bl = b_low & 65535;
		let bh = b_low >>> 16;
		let p00 = haxe_Int32._mul(al,bl);
		let p10 = haxe_Int32._mul(ah,bl);
		let p01 = haxe_Int32._mul(al,bh);
		let low = p00;
		let high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
		p01 <<= 16;
		low = p00 + p01 | 0;
		if(haxe_Int32.ucompare(low,p01) < 0) {
			++high;
			high = high | 0;
		}
		p10 <<= 16;
		low = low + p10 | 0;
		if(haxe_Int32.ucompare(low,p10) < 0) {
			++high;
			high = high | 0;
		}
		high = high + (haxe_Int32._mul(a.low,b >> 31) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
		return new haxe__$Int64__$_$_$Int64(high,low);
	}
	static div(a,b) {
		return haxe_Int64.divMod(a,b).quotient;
	}
	static divInt(a,b) {
		return haxe_Int64.divMod(a,new haxe__$Int64__$_$_$Int64(b >> 31,b)).quotient;
	}
	static intDiv(a,b) {
		let x = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(a >> 31,a),b).quotient;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		return new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	}
	static mod(a,b) {
		return haxe_Int64.divMod(a,b).modulus;
	}
	static modInt(a,b) {
		let x = haxe_Int64.divMod(a,new haxe__$Int64__$_$_$Int64(b >> 31,b)).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		return new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	}
	static intMod(a,b) {
		let x = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(a >> 31,a),b).modulus;
		if(x.high != x.low >> 31) {
			throw haxe_Exception.thrown("Overflow");
		}
		let x1 = x.low;
		return new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	}
	static eq(a,b) {
		if(a.high == b.high) {
			return a.low == b.low;
		} else {
			return false;
		}
	}
	static eqInt(a,b) {
		if(a.high == b >> 31) {
			return a.low == b;
		} else {
			return false;
		}
	}
	static neq(a,b) {
		if(a.high == b.high) {
			return a.low != b.low;
		} else {
			return true;
		}
	}
	static neqInt(a,b) {
		if(a.high == b >> 31) {
			return a.low != b;
		} else {
			return true;
		}
	}
	static lt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static ltInt(a,b) {
		let b_high = b >> 31;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
	}
	static intLt(a,b) {
		let a_high = a >> 31;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
	}
	static lte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static lteInt(a,b) {
		let b_high = b >> 31;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
	}
	static intLte(a,b) {
		let a_high = a >> 31;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
	}
	static gt(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gtInt(a,b) {
		let b_high = b >> 31;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
	}
	static intGt(a,b) {
		let a_high = a >> 31;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
	}
	static gte(a,b) {
		let v = a.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b.low);
		}
		return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static gteInt(a,b) {
		let b_high = b >> 31;
		let v = a.high - b_high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,b);
		}
		return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
	}
	static intGte(a,b) {
		let a_high = a >> 31;
		let v = a_high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a,b.low);
		}
		return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
	}
	static complement(a) {
		return new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
	}
	static and(a,b) {
		return new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	}
	static or(a,b) {
		return new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
	}
	static xor(a,b) {
		return new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
	}
	static shl(a,b) {
		b &= 63;
		if(b == 0) {
			return new haxe__$Int64__$_$_$Int64(a.high,a.low);
		} else if(b < 32) {
			return new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		} else {
			return new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
		}
	}
	static shr(a,b) {
		b &= 63;
		if(b == 0) {
			return new haxe__$Int64__$_$_$Int64(a.high,a.low);
		} else if(b < 32) {
			return new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		} else {
			return new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
		}
	}
	static ushr(a,b) {
		b &= 63;
		if(b == 0) {
			return new haxe__$Int64__$_$_$Int64(a.high,a.low);
		} else if(b < 32) {
			return new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		} else {
			return new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
		}
	}
	static get_high(this1) {
		return this1.high;
	}
	static set_high(this1,x) {
		return this1.high = x;
	}
	static get_low(this1) {
		return this1.low;
	}
	static set_low(this1,x) {
		return this1.low = x;
	}
}
haxe_Int64.__properties__ = {get_low: "get_low",get_high: "get_high"};
class haxe__$Int64__$_$_$Int64 {
	constructor(high,low) {
		this.high = high;
		this.low = low;
	}
	toString() {
		return haxe_Int64.toString(this);
	}
}
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
Object.assign(haxe__$Int64__$_$_$Int64.prototype, {
	__class__: haxe__$Int64__$_$_$Int64
	,high: null
	,low: null
});
class haxe_Int64Helper {
	static parseString(sParam) {
		let base_high = 0;
		let base_low = 10;
		let current = new haxe__$Int64__$_$_$Int64(0,0);
		let multiplier = new haxe__$Int64__$_$_$Int64(0,1);
		let sIsNegative = false;
		let s = StringTools.trim(sParam);
		if(s.charAt(0) == "-") {
			sIsNegative = true;
			s = s.substring(1,s.length);
		}
		let len = s.length;
		let _g = 0;
		while(_g < len) {
			let digitInt = HxOverrides.cca(s,len - 1 - _g++) - 48;
			if(digitInt < 0 || digitInt > 9) {
				throw haxe_Exception.thrown("NumberFormatError");
			}
			if(digitInt != 0) {
				let digit_high = digitInt >> 31;
				let digit_low = digitInt;
				if(sIsNegative) {
					let al = multiplier.low & 65535;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & 65535;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let low = p00;
					let high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = p00 + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						++high;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						++high;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let b_low = low;
					let high1 = current.high - high | 0;
					if(haxe_Int32.ucompare(current.low,b_low) < 0) {
						--high1;
						high1 = high1 | 0;
					}
					current = new haxe__$Int64__$_$_$Int64(high1,current.low - b_low | 0);
					if(!(current.high < 0)) {
						throw haxe_Exception.thrown("NumberFormatError: Underflow");
					}
				} else {
					let al = multiplier.low & 65535;
					let ah = multiplier.low >>> 16;
					let bl = digit_low & 65535;
					let bh = digit_low >>> 16;
					let p00 = haxe_Int32._mul(al,bl);
					let p10 = haxe_Int32._mul(ah,bl);
					let p01 = haxe_Int32._mul(al,bh);
					let low = p00;
					let high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
					p01 <<= 16;
					low = p00 + p01 | 0;
					if(haxe_Int32.ucompare(low,p01) < 0) {
						++high;
						high = high | 0;
					}
					p10 <<= 16;
					low = low + p10 | 0;
					if(haxe_Int32.ucompare(low,p10) < 0) {
						++high;
						high = high | 0;
					}
					high = high + (haxe_Int32._mul(multiplier.low,digit_high) + haxe_Int32._mul(multiplier.high,digit_low) | 0) | 0;
					let high1 = current.high + high | 0;
					let low1 = current.low + low | 0;
					if(haxe_Int32.ucompare(low1,current.low) < 0) {
						++high1;
						high1 = high1 | 0;
					}
					current = new haxe__$Int64__$_$_$Int64(high1,low1);
					if(current.high < 0) {
						throw haxe_Exception.thrown("NumberFormatError: Overflow");
					}
				}
			}
			let al = multiplier.low & 65535;
			let ah = multiplier.low >>> 16;
			let bl = base_low & 65535;
			let bh = base_low >>> 16;
			let p00 = haxe_Int32._mul(al,bl);
			let p10 = haxe_Int32._mul(ah,bl);
			let p01 = haxe_Int32._mul(al,bh);
			let low = p00;
			let high = (haxe_Int32._mul(ah,bh) + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
			p01 <<= 16;
			low = p00 + p01 | 0;
			if(haxe_Int32.ucompare(low,p01) < 0) {
				++high;
				high = high | 0;
			}
			p10 <<= 16;
			low = low + p10 | 0;
			if(haxe_Int32.ucompare(low,p10) < 0) {
				++high;
				high = high | 0;
			}
			high = high + (haxe_Int32._mul(multiplier.low,base_high) + haxe_Int32._mul(multiplier.high,base_low) | 0) | 0;
			multiplier = new haxe__$Int64__$_$_$Int64(high,low);
		}
		return current;
	}
	static fromFloat(f) {
		if(isNaN(f) || !isFinite(f)) {
			throw haxe_Exception.thrown("Number is NaN or Infinite");
		}
		let noFractions = f - f % 1;
		if(noFractions > 9007199254740991) {
			throw haxe_Exception.thrown("Conversion overflow");
		}
		if(noFractions < -9007199254740991) {
			throw haxe_Exception.thrown("Conversion underflow");
		}
		let result = new haxe__$Int64__$_$_$Int64(0,0);
		let neg = noFractions < 0;
		let rest = neg ? -noFractions : noFractions;
		let i = 0;
		while(rest >= 1) {
			let curr = rest % 2;
			rest /= 2;
			if(curr >= 1) {
				let a_high = 0;
				let a_low = 1;
				let b = i;
				b &= 63;
				let b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(a_high,a_low) : b < 32 ? new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b) : new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
				let high = result.high + b1.high | 0;
				let low = result.low + b1.low | 0;
				if(haxe_Int32.ucompare(low,result.low) < 0) {
					++high;
					high = high | 0;
				}
				result = new haxe__$Int64__$_$_$Int64(high,low);
			}
			++i;
		}
		if(neg) {
			let high = ~result.high;
			let low = ~result.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			result = new haxe__$Int64__$_$_$Int64(high,low);
		}
		return result;
	}
}
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
class haxe_NativeStackTrace {
	static saveStack(e) {
		haxe_NativeStackTrace.lastError = e;
	}
	static callStack() {
		let e = new Error("");
		let stack = haxe_NativeStackTrace.tryHaxeStack(e);
		if(typeof(stack) == "undefined") {
			try {
				throw e;
			} catch( _g ) {
			}
			stack = e.stack;
		}
		return haxe_NativeStackTrace.normalize(stack,2);
	}
	static exceptionStack() {
		return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
	}
	static toHaxe(s,skip) {
		if(skip == null) {
			skip = 0;
		}
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			let stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			let m = [];
			let _g = 0;
			let _g1 = stack.length;
			while(_g < _g1) {
				let i = _g++;
				if(skip > i) {
					continue;
				}
				let line = stack[i];
				let matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
				if(matched != null) {
					let path = matched[1].split(".");
					if(path[0] == "$hxClasses") {
						path.shift();
					}
					let meth = path.pop();
					let file = matched[2];
					let line = Std.parseInt(matched[3]);
					let column = Std.parseInt(matched[4]);
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else if(skip > 0 && Array.isArray(s)) {
			return s.slice(skip);
		} else {
			return s;
		}
	}
	static tryHaxeStack(e) {
		if(e == null) {
			return [];
		}
		let oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
		let stack = e.stack;
		Error.prepareStackTrace = oldValue;
		return stack;
	}
	static prepareHxStackTrace(e,callsites) {
		let stack = [];
		let _g = 0;
		while(_g < callsites.length) {
			let site = callsites[_g];
			++_g;
			if(haxe_NativeStackTrace.wrapCallSite != null) {
				site = haxe_NativeStackTrace.wrapCallSite(site);
			}
			let method = null;
			let fullName = site.getFunctionName();
			if(fullName != null) {
				let idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					method = haxe_StackItem.Method(fullName.substring(0,idx),fullName.substring(idx + 1));
				} else {
					method = haxe_StackItem.Method(null,fullName);
				}
			}
			let fileName = site.getFileName();
			let fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
				fileName = fileName.substring(fileAddr + 6);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	}
	static normalize(stack,skipItems) {
		if(skipItems == null) {
			skipItems = 0;
		}
		if(Array.isArray(stack) && skipItems > 0) {
			return stack.slice(skipItems);
		} else if(typeof(stack) == "string") {
			switch(stack.substring(0,6)) {
			case "Error\n":case "Error:":
				++skipItems;
				break;
			default:
			}
			return haxe_NativeStackTrace.skipLines(stack,skipItems);
		} else {
			return stack;
		}
	}
	static skipLines(stack,skip,pos) {
		if(pos == null) {
			pos = 0;
		}
		while(true) if(skip > 0) {
			pos = stack.indexOf("\n",pos);
			if(pos < 0) {
				return "";
			} else {
				skip = --skip;
				pos += 1;
				continue;
			}
		} else {
			return stack.substring(pos);
		}
	}
}
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
class haxe_Rest {
	static get_length(this1) {
		return this1.length;
	}
	static of(array) {
		return array;
	}
	static _new(array) {
		return array;
	}
	static get(this1,index) {
		return this1[index];
	}
	static toArray(this1) {
		return this1.slice();
	}
	static iterator(this1) {
		return new haxe_iterators_RestIterator(this1);
	}
	static keyValueIterator(this1) {
		return new haxe_iterators_RestKeyValueIterator(this1);
	}
	static append(this1,item) {
		let result = this1.slice();
		result.push(item);
		return result;
	}
	static prepend(this1,item) {
		let result = this1.slice();
		result.unshift(item);
		return result;
	}
	static toString(this1) {
		return "[" + this1.toString() + "]";
	}
}
haxe_Rest.__properties__ = {get_length: "get_length"};
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
		this.__skipStack++;
	}
	unwrap() {
		return this.value;
	}
}
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
	,value: null
});
class haxe_crypto_Crc32 {
	constructor() {
		this.crc = -1;
	}
	byte(b) {
		let tmp = (this.crc ^ b) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		this.crc = this.crc >>> 8 ^ tmp;
	}
	update(b,pos,len) {
		let b1 = b.b.bufferValue;
		let _g = pos;
		let _g1 = pos + len;
		while(_g < _g1) {
			let tmp = (this.crc ^ b1.bytes[_g++]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			this.crc = this.crc >>> 8 ^ tmp;
		}
	}
	get() {
		return this.crc ^ -1;
	}
	static make(data) {
		let c_crc = -1;
		let len = data.length;
		let b = data.b.bufferValue;
		let _g = 0;
		while(_g < len) {
			let tmp = (c_crc ^ b.bytes[_g++]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
		}
		return c_crc ^ -1;
	}
}
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
Object.assign(haxe_crypto_Crc32.prototype, {
	__class__: haxe_crypto_Crc32
	,crc: null
});
class haxe_crypto_Md5 {
	constructor() {
	}
	bitOR(a,b) {
		return (a >>> 1 | b >>> 1) << 1 | (a & 1 | b & 1);
	}
	bitXOR(a,b) {
		return (a >>> 1 ^ b >>> 1) << 1 | a & 1 ^ b & 1;
	}
	bitAND(a,b) {
		return (a >>> 1 & b >>> 1) << 1 | a & 1 & (b & 1);
	}
	addme(x,y) {
		let lsw = (x & 65535) + (y & 65535);
		return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
	}
	hex(a) {
		let str = "";
		let _g = 0;
		while(_g < a.length) {
			let num = a[_g];
			++_g;
			str += "0123456789abcdef".charAt(num >> 4 & 15) + "0123456789abcdef".charAt(num & 15);
			str += "0123456789abcdef".charAt(num >> 12 & 15) + "0123456789abcdef".charAt(num >> 8 & 15);
			str += "0123456789abcdef".charAt(num >> 20 & 15) + "0123456789abcdef".charAt(num >> 16 & 15);
			str += "0123456789abcdef".charAt(num >> 28 & 15) + "0123456789abcdef".charAt(num >> 24 & 15);
		}
		return str;
	}
	rol(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	cmn(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	ff(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	gg(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	hh(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	ii(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	doEncode(x) {
		let a = 1732584193;
		let b = -271733879;
		let c = -1732584194;
		let d = 271733878;
		let i = 0;
		while(i < x.length) {
			let olda = a;
			let oldb = b;
			let oldc = c;
			let oldd = d;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	static encode(s) {
		let m = new haxe_crypto_Md5();
		return m.hex(m.doEncode(haxe_crypto_Md5.str2blks(s)));
	}
	static make(b) {
		let h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
		let out = new haxe_io_Bytes(new ArrayBuffer(16));
		out.b[0] = h[0] & 255;
		out.b[1] = h[0] >> 8 & 255;
		out.b[2] = h[0] >> 16 & 255;
		out.b[3] = h[0] >>> 24;
		out.b[4] = h[1] & 255;
		out.b[5] = h[1] >> 8 & 255;
		out.b[6] = h[1] >> 16 & 255;
		out.b[7] = h[1] >>> 24;
		out.b[8] = h[2] & 255;
		out.b[9] = h[2] >> 8 & 255;
		out.b[10] = h[2] >> 16 & 255;
		out.b[11] = h[2] >>> 24;
		out.b[12] = h[3] & 255;
		out.b[13] = h[3] >> 8 & 255;
		out.b[14] = h[3] >> 16 & 255;
		out.b[15] = h[3] >>> 24;
		return out;
	}
	static bytes2blks(b) {
		let nblk = (b.length + 8 >> 6) + 1;
		let blks = [];
		let blksSize = nblk * 16;
		let _g = 0;
		while(_g < blksSize) blks[_g++] = 0;
		let i = 0;
		while(i < b.length) {
			blks[i >> 2] |= b.b[i] << (((b.length << 3) + i & 3) << 3);
			++i;
		}
		blks[i >> 2] |= 128 << (b.length * 8 + i) % 4 * 8;
		let l = b.length * 8;
		let k = nblk * 16 - 2;
		blks[k] = l & 255;
		blks[k] = (blks[k] |= (l >>> 8 & 255) << 8) | (l >>> 16 & 255) << 16;
		blks[k] |= (l >>> 24 & 255) << 24;
		return blks;
	}
	static str2blks(str) {
		let str1 = haxe_io_Bytes.ofString(str);
		let nblk = (str1.length + 8 >> 6) + 1;
		let blks = [];
		let blksSize = nblk * 16;
		let _g = 0;
		while(_g < blksSize) blks[_g++] = 0;
		let i = 0;
		let max = str1.length;
		let l = max * 8;
		while(i < max) {
			blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
			++i;
		}
		blks[i >> 2] |= 128 << (l + i) % 4 * 8;
		let k = nblk * 16 - 2;
		blks[k] = l & 255;
		blks[k] = (blks[k] |= (l >>> 8 & 255) << 8) | (l >>> 16 & 255) << 16;
		blks[k] |= (l >>> 24 & 255) << 24;
		return blks;
	}
}
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
Object.assign(haxe_crypto_Md5.prototype, {
	__class__: haxe_crypto_Md5
});
class haxe_crypto_Sha1 {
	constructor() {
	}
	doEncode(x) {
		let w = [];
		let a = 1732584193;
		let b = -271733879;
		let c = -1732584194;
		let d = 271733878;
		let e = -1009589776;
		let i = 0;
		while(i < x.length) {
			let olda = a;
			let oldb = b;
			let oldc = c;
			let oldd = d;
			let olde = e;
			let j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					let num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				let t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j];
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t + this.kt(j);
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	rol(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	ft(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	kt(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	hex(a) {
		let str = "";
		let _g = 0;
		while(_g < a.length) str += StringTools.hex(a[_g++],8);
		return str.toLowerCase();
	}
	static encode(s) {
		let sh = new haxe_crypto_Sha1();
		return sh.hex(sh.doEncode(haxe_crypto_Sha1.str2blks(s)));
	}
	static make(b) {
		let h = new haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b));
		let out = new haxe_io_Bytes(new ArrayBuffer(20));
		out.b[0] = h[0] >>> 24;
		out.b[1] = h[0] >> 16 & 255;
		out.b[2] = h[0] >> 8 & 255;
		out.b[3] = h[0] & 255;
		out.b[4] = h[1] >>> 24;
		out.b[5] = h[1] >> 16 & 255;
		out.b[6] = h[1] >> 8 & 255;
		out.b[7] = h[1] & 255;
		out.b[8] = h[2] >>> 24;
		out.b[9] = h[2] >> 16 & 255;
		out.b[10] = h[2] >> 8 & 255;
		out.b[11] = h[2] & 255;
		out.b[12] = h[3] >>> 24;
		out.b[13] = h[3] >> 16 & 255;
		out.b[14] = h[3] >> 8 & 255;
		out.b[15] = h[3] & 255;
		out.b[16] = h[4] >>> 24;
		out.b[17] = h[4] >> 16 & 255;
		out.b[18] = h[4] >> 8 & 255;
		out.b[19] = h[4] & 255;
		return out;
	}
	static str2blks(s) {
		let s1 = haxe_io_Bytes.ofString(s);
		let nblk = (s1.length + 8 >> 6) + 1;
		let blks = [];
		let _g = 0;
		let _g1 = nblk * 16;
		while(_g < _g1) blks[_g++] = 0;
		let _g2 = 0;
		let _g3 = s1.length;
		while(_g2 < _g3) {
			let i = _g2++;
			blks[i >> 2] |= s1.b[i] << 24 - ((i & 3) << 3);
		}
		let i = s1.length;
		blks[i >> 2] |= 128 << 24 - ((i & 3) << 3);
		blks[nblk * 16 - 1] = s1.length * 8;
		return blks;
	}
	static bytes2blks(b) {
		let nblk = (b.length + 8 >> 6) + 1;
		let blks = [];
		let _g = 0;
		let _g1 = nblk * 16;
		while(_g < _g1) blks[_g++] = 0;
		let _g2 = 0;
		let _g3 = b.length;
		while(_g2 < _g3) {
			let i = _g2++;
			blks[i >> 2] |= b.b[i] << 24 - ((i & 3) << 3);
		}
		let i = b.length;
		blks[i >> 2] |= 128 << 24 - ((i & 3) << 3);
		blks[nblk * 16 - 1] = b.length * 8;
		return blks;
	}
}
$hxClasses["haxe.crypto.Sha1"] = haxe_crypto_Sha1;
haxe_crypto_Sha1.__name__ = "haxe.crypto.Sha1";
Object.assign(haxe_crypto_Sha1.prototype, {
	__class__: haxe_crypto_Sha1
});
class haxe_ds_ArraySort {
	static sort(a,cmp) {
		haxe_ds_ArraySort.rec(a,cmp,0,a.length);
	}
	static rec(a,cmp,from,to) {
		let middle = from + to >> 1;
		if(to - from < 12) {
			if(to <= from) {
				return;
			}
			let _g = from + 1;
			while(_g < to) {
				let j = _g++;
				while(j > from) {
					if(cmp(a[j],a[j - 1]) < 0) {
						haxe_ds_ArraySort.swap(a,j - 1,j);
					} else {
						break;
					}
					--j;
				}
			}
			return;
		}
		haxe_ds_ArraySort.rec(a,cmp,from,middle);
		haxe_ds_ArraySort.rec(a,cmp,middle,to);
		haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
	}
	static doMerge(a,cmp,from,pivot,to,len1,len2) {
		while(true) {
			let first_cut;
			let second_cut;
			let len11;
			let len22;
			if(len1 == 0 || len2 == 0) {
				return;
			}
			if(len1 + len2 == 2) {
				if(cmp(a[pivot],a[from]) < 0) {
					haxe_ds_ArraySort.swap(a,pivot,from);
				}
				return;
			}
			if(len1 > len2) {
				len11 = len1 >> 1;
				first_cut = from + len11;
				second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
				len22 = second_cut - pivot;
			} else {
				len22 = len2 >> 1;
				second_cut = pivot + len22;
				first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
				len11 = first_cut - from;
			}
			haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
			let new_mid = first_cut + len22;
			haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
			from = new_mid;
			pivot = second_cut;
			len1 -= len11;
			len2 -= len22;
		}
	}
	static rotate(a,cmp,from,mid,to) {
		if(from == mid || mid == to) {
			return;
		}
		let n = haxe_ds_ArraySort.gcd(to - from,mid - from);
		while(n-- != 0) {
			let val = a[from + n];
			let shift = mid - from;
			let p1 = from + n;
			let p2 = from + n + shift;
			while(p2 != from + n) {
				a[p1] = a[p2];
				p1 = p2;
				if(to - p2 > shift) {
					p2 += shift;
				} else {
					p2 = from + (shift - (to - p2));
				}
			}
			a[p1] = val;
		}
	}
	static gcd(m,n) {
		while(n != 0) {
			let t = m % n;
			m = n;
			n = t;
		}
		return m;
	}
	static upper(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[val],a[mid]) < 0) {
				len = half;
			} else {
				from = mid + 1;
				len = len - half - 1;
			}
		}
		return from;
	}
	static lower(a,cmp,from,to,val) {
		let len = to - from;
		let half;
		let mid;
		while(len > 0) {
			half = len >> 1;
			mid = from + half;
			if(cmp(a[mid],a[val]) < 0) {
				from = mid + 1;
				len = len - half - 1;
			} else {
				len = half;
			}
		}
		return from;
	}
	static swap(a,i,j) {
		let tmp = a[i];
		a[i] = a[j];
		a[j] = tmp;
	}
	static compare(a,cmp,i,j) {
		return cmp(a[i],a[j]);
	}
}
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
class haxe_ds_BalancedTree {
	constructor() {
	}
	set(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	get(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	remove(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	exists(key) {
		let node = this.root;
		while(node != null) {
			let c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	iterator() {
		let ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	keys() {
		let ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	copy() {
		let copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	setLoop(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			let nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	removeLoop(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		let c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	keysLoop(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	merge(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		let t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	minBinding(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	removeMinBinding(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	balance(l,k,v,r) {
		let hl = l == null ? 0 : l._height;
		let hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			let _this = l.left;
			let _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			let _this = r.right;
			let _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	compare(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	toString() {
		if(this.root == null) {
			return "[]";
		} else {
			return "[" + this.root.toString() + "]";
		}
	}
	clear() {
		this.root = null;
	}
	static iteratorLoop(node,acc) {
		while(true) {
			if(node != null) {
				haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
				acc.push(node.value);
				node = node.right;
				continue;
			}
			return;
		}
	}
}
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_BalancedTree.prototype, {
	__class__: haxe_ds_BalancedTree
	,root: null
});
class haxe_ds_TreeNode {
	constructor(l,k,v,r,h) {
		if(h == null) {
			h = -1;
		}
		this.left = l;
		this.key = k;
		this.value = v;
		this.right = r;
		if(h == -1) {
			let tmp;
			let _this = this.left;
			let _this1 = this.right;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				let _this = this.left;
				tmp = _this == null ? 0 : _this._height;
			} else {
				let _this = this.right;
				tmp = _this == null ? 0 : _this._height;
			}
			this._height = tmp + 1;
		} else {
			this._height = h;
		}
	}
	toString() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + " => " + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
}
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
Object.assign(haxe_ds_TreeNode.prototype, {
	__class__: haxe_ds_TreeNode
	,left: null
	,right: null
	,key: null
	,value: null
	,_height: null
});
class haxe_ds_EnumValueMap extends haxe_ds_BalancedTree {
	constructor() {
		super();
	}
	compare(k1,k2) {
		let d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		let p1 = Type.enumParameters(k1);
		let p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	compareArgs(a1,a2) {
		let ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		let _g = 0;
		let _g1 = a1.length;
		while(_g < _g1) {
			let i = _g++;
			let d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	compareArg(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	copy() {
		let copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
}
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
Object.assign(haxe_ds_EnumValueMap.prototype, {
	__class__: haxe_ds_EnumValueMap
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	set(key,value) {
		this.h[key] = value;
	}
	get(key) {
		return this.h[key];
	}
	exists(key) {
		return this.h.hasOwnProperty(key);
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_IntMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b = "[";
		let it = this.keys();
		while(it.hasNext()) {
			let i = it.next();
			s_b += i == null ? "null" : "" + i;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	clear() {
		this.h = { };
	}
}
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
	,h: null
});
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	last() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	pop() {
		if(this.h == null) {
			return null;
		}
		let x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	isEmpty() {
		return this.h == null;
	}
	clear() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	keyValueIterator() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	toString() {
		let s_b = "";
		let first = true;
		let l = this.h;
		s_b = "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	join(sep) {
		let s_b = "";
		let first = true;
		let l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	filter(f) {
		let l2 = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	map(f) {
		let b = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
}
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
	,head: null
});
class haxe_ds__$List_ListKeyValueIterator {
	constructor(head) {
		this.head = head;
		this.idx = 0;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
}
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
Object.assign(haxe_ds__$List_ListKeyValueIterator.prototype, {
	__class__: haxe_ds__$List_ListKeyValueIterator
	,idx: null
	,head: null
});
class haxe_ds_Map {
	static set(this1,key,value) {
		this1.set(key,value);
	}
	static get(this1,key) {
		return this1.get(key);
	}
	static exists(this1,key) {
		return this1.exists(key);
	}
	static remove(this1,key) {
		return this1.remove(key);
	}
	static keys(this1) {
		return this1.keys();
	}
	static iterator(this1) {
		return this1.iterator();
	}
	static keyValueIterator(this1) {
		return this1.keyValueIterator();
	}
	static copy(this1) {
		return this1.copy();
	}
	static toString(this1) {
		return this1.toString();
	}
	static clear(this1) {
		this1.clear();
	}
	static arrayWrite(this1,k,v) {
		this1.set(k,v);
		return v;
	}
	static toStringMap(t) {
		return new haxe_ds_StringMap();
	}
	static toIntMap(t) {
		return new haxe_ds_IntMap();
	}
	static toEnumValueMapMap(t) {
		return new haxe_ds_EnumValueMap();
	}
	static toObjectMap(t) {
		return new haxe_ds_ObjectMap();
	}
	static fromStringMap(map) {
		return map;
	}
	static fromIntMap(map) {
		return map;
	}
	static fromObjectMap(map) {
		return map;
	}
}
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	exists(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	keyValueIterator() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	copy() {
		let copied = new haxe_ds_ObjectMap();
		let key = this.keys();
		while(key.hasNext()) {
			let key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	toString() {
		let s_b = "";
		s_b = "[";
		let it = this.keys();
		while(it.hasNext()) {
			let i = it.next();
			s_b += Std.string(Std.string(i));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	clear() {
		this.h = { __keys__ : { }};
	}
	static assignId(obj) {
		return (obj.__id__ = $global.$haxeUID++);
	}
	static getId(obj) {
		return obj.__id__;
	}
}
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
class haxe_ds_ReadOnlyArray {
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,i) {
		return this1[i];
	}
	static concat(this1,a) {
		return this1.concat(a);
	}
}
haxe_ds_ReadOnlyArray.__properties__ = {get_length: "get_length"};
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	exists(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	get(key) {
		return this.h[key];
	}
	set(key,value) {
		this.h[key] = value;
	}
	remove(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	keys() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	keyValueIterator() {
		return new haxe_ds__$StringMap_StringMapKeyValueIterator(this.h);
	}
	copy() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	clear() {
		this.h = Object.create(null);
	}
	toString() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	static createCopy(h) {
		let copy = new haxe_ds_StringMap();
		for (var key in h) copy.h[key] = h[key];
		return copy;
	}
	static stringify(h) {
		let s = "[";
		let first = true;
		for (var key in h) {
			if (first) first = false; else s += ',';
			s += key + ' => ' + Std.string(h[key]);
		}
		return s + "]";
	}
}
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
});
class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
Object.assign(haxe_ds__$StringMap_StringMapKeyIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyIterator
	,h: null
	,keys: null
	,length: null
	,current: null
});
class haxe_ds__$StringMap_StringMapValueIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.h[this.keys[this.current++]];
	}
}
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
Object.assign(haxe_ds__$StringMap_StringMapValueIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapValueIterator
	,h: null
	,keys: null
	,length: null
	,current: null
});
class haxe_ds__$StringMap_StringMapKeyValueIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		let key = this.keys[this.current++];
		return { key : key, value : this.h[key]};
	}
}
$hxClasses["haxe.ds._StringMap.StringMapKeyValueIterator"] = haxe_ds__$StringMap_StringMapKeyValueIterator;
haxe_ds__$StringMap_StringMapKeyValueIterator.__name__ = "haxe.ds._StringMap.StringMapKeyValueIterator";
Object.assign(haxe_ds__$StringMap_StringMapKeyValueIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyValueIterator
	,h: null
	,keys: null
	,length: null
	,current: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	get(pos) {
		return this.b[pos];
	}
	set(pos,v) {
		this.b[pos] = v;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	fill(pos,len,value) {
		let _g = 0;
		while(_g < len) {
			++_g;
			this.b[pos++] = value;
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	compare(other) {
		let b1 = this.b;
		let b2 = other.b;
		let _g = 0;
		let _g1 = this.length < other.length ? this.length : other.length;
		while(_g < _g1) {
			let i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	initData() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	getDouble(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	getFloat(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	setDouble(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	setFloat(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	getUInt16(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	setUInt16(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	getInt32(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	setInt32(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	getInt64(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	setInt64(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let code = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	readString(pos,len) {
		return this.getString(pos,len);
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		let s_b = "";
		let chars = [];
		let str = "0123456789abcdef";
		let _g = 0;
		let _g1 = str.length;
		while(_g < _g1) chars.push(HxOverrides.cca(str,_g++));
		let _g2 = 0;
		let _g3 = this.length;
		while(_g2 < _g3) {
			let c = this.b[_g2++];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	getData() {
		return this.b.bufferValue;
	}
	static alloc(length) {
		return new haxe_io_Bytes(new ArrayBuffer(length));
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
	static ofHex(s) {
		if((s.length & 1) != 0) {
			throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
		}
		let a = [];
		let i = 0;
		let len = s.length >> 1;
		while(i < len) {
			let high = s.charCodeAt(i * 2);
			let low = s.charCodeAt(i * 2 + 1);
			high = (high & 15) + ((high & 64) >> 6) * 9;
			low = (low & 15) + ((low & 64) >> 6) * 9;
			a.push((high << 4 | low) & 255);
			++i;
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static fastGet(b,pos) {
		return b.bytes[pos];
	}
}
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
	,data: null
});
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	get_length() {
		return this.pos;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	add(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	addString(v,encoding) {
		this.add(haxe_io_Bytes.ofString(v,encoding));
	}
	addInt32(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	addInt64(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	addFloat(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	addDouble(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		let req = this.pos + delta;
		let nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		let nbuf = new ArrayBuffer(nsize);
		let nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		let b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
Object.assign(haxe_io_BytesBuffer.prototype, {
	__class__: haxe_io_BytesBuffer
	,buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,__properties__: {get_length: "get_length"}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
	,array: null
	,current: null
});
class haxe_iterators_ArrayKeyValueIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return { value : this.array[this.current], key : this.current++};
	}
}
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
Object.assign(haxe_iterators_ArrayKeyValueIterator.prototype, {
	__class__: haxe_iterators_ArrayKeyValueIterator
	,current: null
	,array: null
});
class haxe_iterators_DynamicAccessIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		return this.access[this.keys[this.index++]];
	}
}
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
Object.assign(haxe_iterators_DynamicAccessIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_DynamicAccessKeyValueIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		let key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
}
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
Object.assign(haxe_iterators_DynamicAccessKeyValueIterator.prototype, {
	__class__: haxe_iterators_DynamicAccessKeyValueIterator
	,access: null
	,keys: null
	,index: null
});
class haxe_iterators_MapKeyValueIterator {
	constructor(map) {
		this.map = map;
		this.keys = map.keys();
	}
	hasNext() {
		return this.keys.hasNext();
	}
	next() {
		let key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
}
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
Object.assign(haxe_iterators_MapKeyValueIterator.prototype, {
	__class__: haxe_iterators_MapKeyValueIterator
	,map: null
	,keys: null
});
class haxe_iterators_RestIterator {
	constructor(args) {
		this.current = 0;
		this.args = args;
	}
	hasNext() {
		return this.current < this.args.length;
	}
	next() {
		return this.args[this.current++];
	}
}
$hxClasses["haxe.iterators.RestIterator"] = haxe_iterators_RestIterator;
haxe_iterators_RestIterator.__name__ = "haxe.iterators.RestIterator";
Object.assign(haxe_iterators_RestIterator.prototype, {
	__class__: haxe_iterators_RestIterator
	,args: null
	,current: null
});
class haxe_iterators_RestKeyValueIterator {
	constructor(args) {
		this.current = 0;
		this.args = args;
	}
	hasNext() {
		return this.current < this.args.length;
	}
	next() {
		return { key : this.current, value : this.args[this.current++]};
	}
}
$hxClasses["haxe.iterators.RestKeyValueIterator"] = haxe_iterators_RestKeyValueIterator;
haxe_iterators_RestKeyValueIterator.__name__ = "haxe.iterators.RestKeyValueIterator";
Object.assign(haxe_iterators_RestKeyValueIterator.prototype, {
	__class__: haxe_iterators_RestKeyValueIterator
	,args: null
	,current: null
});
class haxe_iterators_StringIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return this.s.charCodeAt(this.offset++);
	}
}
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
Object.assign(haxe_iterators_StringIterator.prototype, {
	__class__: haxe_iterators_StringIterator
	,offset: null
	,s: null
});
class haxe_iterators_StringIteratorUnicode {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		let s = this.s;
		let index = this.offset++;
		let c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		let c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	static unicodeIterator(s) {
		return new haxe_iterators_StringIteratorUnicode(s);
	}
}
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
Object.assign(haxe_iterators_StringIteratorUnicode.prototype, {
	__class__: haxe_iterators_StringIteratorUnicode
	,offset: null
	,s: null
});
class haxe_iterators_StringKeyValueIterator {
	constructor(s) {
		this.offset = 0;
		this.s = s;
	}
	hasNext() {
		return this.offset < this.s.length;
	}
	next() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
}
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
Object.assign(haxe_iterators_StringKeyValueIterator.prototype, {
	__class__: haxe_iterators_StringKeyValueIterator
	,offset: null
	,s: null
});
class js_Boot {
	static isClass(o) {
		return o.__name__;
	}
	static isInterface(o) {
		return o.__isInterface__;
	}
	static isEnum(e) {
		return e.__ename__;
	}
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = intf[_g++];
					if(i == cl || js_Boot.__interfLoop(i,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__toStr = null;
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
class js_Lib {
	static debug() {
		debugger;
	}
	static dynamicImport(module) {
		return import(module);
	}
	static alert(v) {
		alert(js_Boot.__string_rec(v,""));
	}
	static eval(code) {
		return eval(code);
	}
	static get_undefined() {
		return undefined;
	}
	static rethrow() {
	}
	static getOriginalException() {
		return null;
	}
	static getNextHaxeUID() {
		return $global.$haxeUID++;
	}
}
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined: "get_undefined"};
class js_lib_HaxeIterator {
	constructor(jsIterator) {
		this.jsIterator = jsIterator;
		this.lastStep = jsIterator.next();
	}
	hasNext() {
		return !this.lastStep.done;
	}
	next() {
		let v = this.lastStep.value;
		this.lastStep = this.jsIterator.next();
		return v;
	}
	static iterator(jsIterator) {
		return new js_lib_HaxeIterator(jsIterator);
	}
}
$hxClasses["js.lib.HaxeIterator"] = js_lib_HaxeIterator;
js_lib_HaxeIterator.__name__ = "js.lib.HaxeIterator";
Object.assign(js_lib_HaxeIterator.prototype, {
	__class__: js_lib_HaxeIterator
	,jsIterator: null
	,lastStep: null
});
class js_lib_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_KeyValue.__properties__ = {get_value: "get_value",get_key: "get_key"};
class js_lib_ObjectEntry {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
js_lib_ObjectEntry.__properties__ = {get_value: "get_value",get_key: "get_key"};
class seedyrng_GeneratorInterface {
}
$hxClasses["seedyrng.GeneratorInterface"] = seedyrng_GeneratorInterface;
seedyrng_GeneratorInterface.__name__ = "seedyrng.GeneratorInterface";
seedyrng_GeneratorInterface.__isInterface__ = true;
Object.assign(seedyrng_GeneratorInterface.prototype, {
	__class__: seedyrng_GeneratorInterface
	,get_seed: null
	,set_seed: null
	,get_state: null
	,set_state: null
	,get_usesAllBits: null
	,nextInt: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
class seedyrng_Random {
	constructor(seed,generator) {
		if(seed == null) {
			seed = new haxe__$Int64__$_$_$Int64(seedyrng_Random.randomSystemInt(),seedyrng_Random.randomSystemInt());
		}
		if(generator == null) {
			generator = new seedyrng_Xorshift128Plus();
		}
		this.generator = generator;
		this.set_seed(seed);
	}
	get_seed() {
		return this.generator.get_seed();
	}
	set_seed(value) {
		return this.generator.set_seed(value);
	}
	get_state() {
		return this.generator.get_state();
	}
	set_state(value) {
		return this.generator.set_state(value);
	}
	get_usesAllBits() {
		return this.generator.get_usesAllBits();
	}
	nextInt() {
		return this.generator.nextInt();
	}
	nextFullInt() {
		if(this.generator.get_usesAllBits()) {
			return this.generator.nextInt();
		} else {
			let num1 = this.generator.nextInt();
			let num2 = this.generator.nextInt();
			num2 = num2 >>> 16 | num2 << 16;
			return num1 ^ num2;
		}
	}
	setStringSeed(seed) {
		this.setBytesSeed(haxe_io_Bytes.ofString(seed));
	}
	setBytesSeed(seed) {
		this.set_seed(haxe_crypto_Sha1.make(seed).getInt64(0));
	}
	random() {
		let upper = this.nextFullInt() & 2097151;
		return (UInt.toFloat(this.nextFullInt()) + upper * Math.pow(2,32)) * Math.pow(2,-53);
	}
	randomInt(lower,upper) {
		return Math.floor(this.random() * (upper - lower + 1)) + lower;
	}
	uniform(lower,upper) {
		return this.random() * (upper - lower) + lower;
	}
	choice(array) {
		return array[this.randomInt(0,array.length - 1)];
	}
	shuffle(array) {
		let _g = 0;
		let _g1 = array.length - 1;
		while(_g < _g1) {
			let index = _g++;
			let randIndex = this.randomInt(index,array.length - 1);
			let tempA = array[index];
			array[index] = array[randIndex];
			array[randIndex] = tempA;
		}
	}
	static randomSystemInt() {
		return Std.random(255) << 24 | Std.random(255) << 16 | Std.random(255) << 8 | Std.random(255);
	}
}
$hxClasses["seedyrng.Random"] = seedyrng_Random;
seedyrng_Random.__name__ = "seedyrng.Random";
seedyrng_Random.__interfaces__ = [seedyrng_GeneratorInterface];
Object.assign(seedyrng_Random.prototype, {
	__class__: seedyrng_Random
	,generator: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
class seedyrng_Xorshift128Plus {
	constructor() {
		this._currentAvailable = false;
		this.set_seed(new haxe__$Int64__$_$_$Int64(0,1));
	}
	get_usesAllBits() {
		return false;
	}
	get_seed() {
		return this._seed;
	}
	set_seed(value) {
		if(!(value.high != 0 || value.low != 0)) {
			value = new haxe__$Int64__$_$_$Int64(0,1);
		}
		this._seed = value;
		this._state0 = value;
		this._state1 = seedyrng_Xorshift128Plus.SEED_1;
		this._currentAvailable = false;
		return value;
	}
	get_state() {
		let bytes = new haxe_io_Bytes(new ArrayBuffer(33));
		bytes.setInt64(0,this._seed);
		bytes.setInt64(8,this._state0);
		bytes.setInt64(16,this._state1);
		bytes.b[24] = this._currentAvailable ? 1 : 0;
		if(this._currentAvailable) {
			bytes.setInt64(25,this._current);
		}
		return bytes;
	}
	set_state(value) {
		if(value.length != 33) {
			throw haxe_Exception.thrown("Wrong state size " + value.length);
		}
		this._seed = value.getInt64(0);
		this._state0 = value.getInt64(8);
		this._state1 = value.getInt64(16);
		this._currentAvailable = value.b[24] == 1;
		if(this._currentAvailable) {
			this._current = value.getInt64(25);
		}
		return value;
	}
	stepNext() {
		let x = this._state0;
		let y = this._state1;
		this._state0 = y;
		let b = new haxe__$Int64__$_$_$Int64(x.high << 23 | x.low >>> 9,x.low << 23);
		x = new haxe__$Int64__$_$_$Int64(x.high ^ b.high,x.low ^ b.low);
		let b1 = new haxe__$Int64__$_$_$Int64(x.high >> 17,x.high << 15 | x.low >>> 17);
		let b2 = new haxe__$Int64__$_$_$Int64(y.high >> 26,y.high << 6 | y.low >>> 26);
		this._state1 = new haxe__$Int64__$_$_$Int64(x.high ^ y.high ^ b1.high ^ b2.high,x.low ^ y.low ^ b1.low ^ b2.low);
		let a = this._state1;
		let high = a.high + y.high | 0;
		let low = a.low + y.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			++high;
			high = high | 0;
		}
		this._current = new haxe__$Int64__$_$_$Int64(high,low);
	}
	nextInt() {
		if(this._currentAvailable) {
			this._currentAvailable = false;
			return this._current.low;
		} else {
			this.stepNext();
			this._currentAvailable = true;
			return this._current.high;
		}
	}
}
$hxClasses["seedyrng.Xorshift128Plus"] = seedyrng_Xorshift128Plus;
seedyrng_Xorshift128Plus.__name__ = "seedyrng.Xorshift128Plus";
seedyrng_Xorshift128Plus.__interfaces__ = [seedyrng_GeneratorInterface];
Object.assign(seedyrng_Xorshift128Plus.prototype, {
	__class__: seedyrng_Xorshift128Plus
	,_seed: null
	,_state0: null
	,_state1: null
	,_current: null
	,_currentAvailable: null
	,__properties__: {get_usesAllBits: "get_usesAllBits",set_state: "set_state",get_state: "get_state",set_seed: "set_seed",get_seed: "get_seed"}
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
	String.__name__ = "String";
	$hxClasses["Array"] = Array;
	Array.__name__ = "Array";
	Date.prototype.__class__ = $hxClasses["Date"] = Date;
	Date.__name__ = "Date";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
dropecho_dungen_Map2d._hx_skip_constructor = false;
dropecho_dungen_bsp_BSPBuilderConfig._hx_skip_constructor = false;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
seedyrng_Xorshift128Plus.PARAMETER_A = 23;
seedyrng_Xorshift128Plus.PARAMETER_B = 17;
seedyrng_Xorshift128Plus.PARAMETER_C = 26;
seedyrng_Xorshift128Plus.SEED_1 = new haxe__$Int64__$_$_$Int64(842650776,685298713);
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
