// Generated by Haxe 3.4.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["degen"] = $hx_exports["degen"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var de_polygonal_ds_Hashable = function() { };
de_polygonal_ds_Hashable.__name__ = true;
de_polygonal_ds_Hashable.prototype = {
	__class__: de_polygonal_ds_Hashable
};
var de_polygonal_ds_Collection = function() { };
de_polygonal_ds_Collection.__name__ = true;
de_polygonal_ds_Collection.__interfaces__ = [de_polygonal_ds_Hashable];
de_polygonal_ds_Collection.prototype = {
	__class__: de_polygonal_ds_Collection
};
var de_polygonal_ds_BinaryTreeNode = function(val) {
	this.mStack = null;
	this.mTimestamp = 0;
	this.key = de_polygonal_ds_HashKey._counter++;
	this.val = val;
	this.parent = this.left = this.right = null;
};
de_polygonal_ds_BinaryTreeNode.__name__ = true;
de_polygonal_ds_BinaryTreeNode.__interfaces__ = [de_polygonal_ds_Collection];
de_polygonal_ds_BinaryTreeNode.prototype = {
	preorder: function(process,iterative,userData) {
		if(iterative == null) {
			iterative = false;
		}
		var _gthis = this;
		if(iterative == false) {
			if(process == null) {
				var v = this.val;
				var run = v.visit(false,userData);
				if(run && this.left != null) {
					run = this.preorderRecursiveVisitable(this.left,userData);
				}
				if(run && this.right != null) {
					this.preorderRecursiveVisitable(this.right,userData);
				}
			} else {
				var run1 = process(this,userData);
				if(run1 && this.left != null) {
					run1 = this.preorderRecursive(this.left,process,userData);
				}
				if(run1 && this.right != null) {
					this.preorderRecursive(this.right,process,userData);
				}
			}
		} else {
			var s = this.getStack();
			var top = 0;
			var max = s.length;
			s[top++] = this;
			if(process == null) {
				var node;
				var v1;
				while(top != 0) {
					node = s[--top];
					v1 = node.val;
					if(!v1.visit(false,userData)) {
						return;
					}
					if(top + 2 > max) {
						s = _gthis.resizeStack(max <<= 1);
					}
					if(node.right != null) {
						s[top++] = node.right;
					}
					if(node.left != null) {
						s[top++] = node.left;
					}
				}
			} else {
				var node1;
				while(top != 0) {
					node1 = s[--top];
					if(!process(node1,userData)) {
						return;
					}
					if(top + 2 > max) {
						s = _gthis.resizeStack(max <<= 1);
					}
					if(node1.right != null) {
						s[top++] = node1.right;
					}
					if(node1.left != null) {
						s[top++] = node1.left;
					}
				}
			}
		}
	}
	,inorder: function(process,iterative,userData) {
		if(iterative == null) {
			iterative = false;
		}
		var _gthis = this;
		if(iterative == false) {
			if(process == null) {
				if(this.left != null) {
					if(!this.inorderRecursiveVisitable(this.left,userData)) {
						return;
					}
				}
				var v = this.val;
				if(!v.visit(false,userData)) {
					return;
				}
				if(this.right != null) {
					this.inorderRecursiveVisitable(this.right,userData);
				}
			} else {
				if(this.left != null) {
					if(!this.inorderRecursive(this.left,process,userData)) {
						return;
					}
				}
				if(!process(this,userData)) {
					return;
				}
				if(this.right != null) {
					this.inorderRecursive(this.right,process,userData);
				}
			}
		} else {
			var s = this.getStack();
			var top = 0;
			var max = s.length;
			var node = this;
			if(process == null) {
				while(node != null) {
					while(node != null) {
						if(top + 2 > max) {
							s = _gthis.resizeStack(max <<= 1);
						}
						if(node.right != null) {
							s[top++] = node.right;
						}
						s[top++] = node;
						node = node.left;
					}
					var v1;
					node = s[--top];
					while(top != 0 && node.right == null) {
						v1 = node.val;
						if(!v1.visit(false,userData)) {
							return;
						}
						node = s[--top];
					}
					v1 = node.val;
					if(!v1.visit(false,userData)) {
						return;
					}
					if(top != 0) {
						node = s[--top];
					} else {
						node = null;
					}
				}
			} else {
				while(node != null) {
					while(node != null) {
						if(top + 2 > max) {
							s = _gthis.resizeStack(max <<= 1);
						}
						if(node.right != null) {
							s[top++] = node.right;
						}
						s[top++] = node;
						node = node.left;
					}
					node = s[--top];
					while(top != 0 && node.right == null) {
						if(!process(node,userData)) {
							return;
						}
						node = s[--top];
					}
					if(!process(node,userData)) {
						return;
					}
					if(top != 0) {
						node = s[--top];
					} else {
						node = null;
					}
				}
			}
		}
	}
	,postorder: function(process,iterative,userData) {
		if(iterative == null) {
			iterative = false;
		}
		var _gthis = this;
		if(iterative == false) {
			if(process == null) {
				if(this.left != null) {
					if(!this.postorderRecursiveVisitable(this.left,userData)) {
						return;
					}
				}
				if(this.right != null) {
					if(!this.postorderRecursiveVisitable(this.right,userData)) {
						return;
					}
				}
				var v = this.val;
				v.visit(false,userData);
			} else {
				if(this.left != null) {
					if(!this.postorderRecursive(this.left,process,userData)) {
						return;
					}
				}
				if(this.right != null) {
					if(!this.postorderRecursive(this.right,process,userData)) {
						return;
					}
				}
				process(this,userData);
			}
		} else {
			var s = this.getStack();
			var top = 0;
			var max = s.length;
			var time = this.mTimestamp + 1;
			s[top++] = this;
			if(process == null) {
				var node;
				var v1;
				while(top != 0) {
					if(top + 1 > max) {
						s = _gthis.resizeStack(max <<= 1);
					}
					node = s[top - 1];
					if(node.left != null && node.left.mTimestamp < time) {
						s[top++] = node.left;
					} else if(node.right != null && node.right.mTimestamp < time) {
						s[top++] = node.right;
					} else {
						v1 = node.val;
						if(!v1.visit(false,userData)) {
							return;
						}
						node.mTimestamp++;
						--top;
					}
				}
			} else {
				var node1;
				while(top != 0) {
					if(top + 1 > max) {
						s = _gthis.resizeStack(max <<= 1);
					}
					node1 = s[top - 1];
					if(node1.left != null && node1.left.mTimestamp < time) {
						s[top++] = node1.left;
					} else if(node1.right != null && node1.right.mTimestamp < time) {
						s[top++] = node1.right;
					} else {
						if(!process(node1,userData)) {
							return;
						}
						node1.mTimestamp++;
						--top;
					}
				}
			}
		}
	}
	,setLeft: function(val) {
		if(this.left == null) {
			this.left = new de_polygonal_ds_BinaryTreeNode(val);
			this.left.parent = this;
		} else {
			this.left.val = val;
		}
	}
	,setRight: function(val) {
		if(this.right == null) {
			this.right = new de_polygonal_ds_BinaryTreeNode(val);
			this.right.parent = this;
		} else {
			this.right.val = val;
		}
	}
	,depth: function() {
		var node = this.parent;
		var c = 0;
		while(node != null) {
			node = node.parent;
			++c;
		}
		return c;
	}
	,height: function() {
		var x = this.left != null ? this.left.height() : 0;
		var y = this.right != null ? this.right.height() : 0;
		return 1 + (x > y ? x : y);
	}
	,unlink: function() {
		if(this.parent != null) {
			if(this.parent == null ? false : this.parent.left == this) {
				this.parent.left = null;
			} else if(this.parent == null ? false : this.parent.right == this) {
				this.parent.right = null;
			}
			this.parent = null;
		}
		this.left = this.right = null;
	}
	,toString: function() {
		var b_b = "";
		var x = "[ BinaryTree val=" + Std.string(this.val) + " size=" + this.get_size() + " depth=";
		var node = this.parent;
		var c = 0;
		while(node != null) {
			node = node.parent;
			++c;
		}
		b_b += Std.string(x + c + " height=" + this.height());
		if(this.get_size() == 1) {
			b_b += " ]";
			return b_b;
		}
		b_b += "\n";
		var f = function(node1,userData) {
			var node2 = node1.parent;
			var c1 = 0;
			while(node2 != null) {
				node2 = node2.parent;
				++c1;
			}
			var d = c1;
			var t = "";
			var _g1 = 0;
			var _g = d;
			while(_g1 < _g) {
				var i = _g1++;
				if(i == d - 1) {
					t += ((node1.parent == null ? false : node1.parent.left == node1) ? "L" : "R") + "---";
				} else {
					t += "|   ";
				}
			}
			t = "  " + t;
			b_b += Std.string(t + Std.string(node1.val) + "\n");
			return true;
		};
		this.preorder(f);
		b_b += "]";
		return b_b;
	}
	,preorderRecursive: function(node,process,userData) {
		var run = process(node,userData);
		if(run && node.left != null) {
			run = this.preorderRecursive(node.left,process,userData);
		}
		if(run && node.right != null) {
			run = this.preorderRecursive(node.right,process,userData);
		}
		return run;
	}
	,preorderRecursiveVisitable: function(node,userData) {
		var v = node.val;
		var run = v.visit(false,userData);
		if(run && node.left != null) {
			run = this.preorderRecursiveVisitable(node.left,userData);
		}
		if(run && node.right != null) {
			run = this.preorderRecursiveVisitable(node.right,userData);
		}
		return run;
	}
	,inorderRecursive: function(node,process,userData) {
		if(node.left != null) {
			if(!this.inorderRecursive(node.left,process,userData)) {
				return false;
			}
		}
		if(!process(node,userData)) {
			return false;
		}
		if(node.right != null) {
			if(!this.inorderRecursive(node.right,process,userData)) {
				return false;
			}
		}
		return true;
	}
	,inorderRecursiveVisitable: function(node,userData) {
		if(node.left != null) {
			if(!this.inorderRecursiveVisitable(node.left,userData)) {
				return false;
			}
		}
		var v = node.val;
		if(!v.visit(false,userData)) {
			return false;
		}
		if(node.right != null) {
			if(!this.inorderRecursiveVisitable(node.right,userData)) {
				return false;
			}
		}
		return true;
	}
	,postorderRecursive: function(node,process,userData) {
		if(node.left != null) {
			if(!this.postorderRecursive(node.left,process,userData)) {
				return false;
			}
		}
		if(node.right != null) {
			if(!this.postorderRecursive(node.right,process,userData)) {
				return false;
			}
		}
		return process(node,userData);
	}
	,postorderRecursiveVisitable: function(node,userData) {
		if(node.left != null) {
			if(!this.postorderRecursiveVisitable(node.left,userData)) {
				return false;
			}
		}
		if(node.right != null) {
			if(!this.postorderRecursiveVisitable(node.right,userData)) {
				return false;
			}
		}
		var v = node.val;
		return v.visit(false,userData);
	}
	,heightRecursive: function(node) {
		var cl = -1;
		var cr = -1;
		if(node.left != null) {
			cl = this.heightRecursive(node.left);
		}
		if(node.right != null) {
			cr = this.heightRecursive(node.right);
		}
		return (cl > cr ? cl : cr) + 1;
	}
	,get_size: function() {
		var c = 1;
		if(this.left != null) {
			c += this.left.get_size();
		}
		if(this.right != null) {
			c += this.right.get_size();
		}
		return c;
	}
	,free: function() {
		if(this.left != null) {
			this.left.free();
		}
		if(this.right != null) {
			this.right.free();
		}
		this.val = null;
		this.right = this.left = this.parent = null;
		this.mStack = null;
	}
	,contains: function(val) {
		var stack = [];
		stack[0] = this;
		var c = 1;
		var found = false;
		while(c > 0) {
			var node = stack[--c];
			if(node.val == val) {
				found = true;
				break;
			}
			if(node.left != null) {
				stack[c++] = node.left;
			}
			if(node.right != null) {
				stack[c++] = node.right;
			}
		}
		return found;
	}
	,remove: function(val) {
		var found = false;
		if(this.val == val) {
			if(this.parent != null) {
				if(this.parent == null ? false : this.parent.left == this) {
					this.parent.left = null;
				} else if(this.parent == null ? false : this.parent.right == this) {
					this.parent.right = null;
				}
				this.parent = null;
			}
			this.left = this.right = null;
			found = true;
		}
		if(this.left != null) {
			if(!found) {
				found = this.left.remove(val);
			} else {
				found = true;
			}
		}
		if(this.right != null) {
			if(!found) {
				found = this.right.remove(val);
			} else {
				found = true;
			}
		}
		return found;
	}
	,clear: function(gc) {
		if(gc == null) {
			gc = false;
		}
		if(gc) {
			if(this.left != null) {
				this.left.clear(gc);
			}
			if(this.right != null) {
				this.right.clear(gc);
			}
			this.left = this.right = this.parent = null;
			this.val = null;
		} else {
			this.left = this.right = null;
		}
	}
	,iterator: function() {
		return new de_polygonal_ds_BinaryTreeNodeIterator(this);
	}
	,isEmpty: function() {
		return false;
	}
	,toArray: function() {
		var out = de_polygonal_ds_tools_ArrayTools.alloc(this.get_size());
		var i = 0;
		this.preorder(function(node,userData) {
			i += 1;
			out[i - 1] = node.val;
			return true;
		});
		return out;
	}
	,clone: function(byRef,copier) {
		if(byRef == null) {
			byRef = true;
		}
		var stack = [];
		var copy = new de_polygonal_ds_BinaryTreeNode(copier != null ? copier(this.val) : this.val);
		stack[0] = this;
		stack[1] = copy;
		var top = 2;
		if(byRef) {
			while(top > 0) {
				var c = stack[--top];
				var n = stack[--top];
				if(n.right != null) {
					var val = n.right.val;
					if(c.right == null) {
						c.right = new de_polygonal_ds_BinaryTreeNode(val);
						c.right.parent = c;
					} else {
						c.right.val = val;
					}
					stack[top++] = n.right;
					stack[top++] = c.right;
				}
				if(n.left != null) {
					var val1 = n.left.val;
					if(c.left == null) {
						c.left = new de_polygonal_ds_BinaryTreeNode(val1);
						c.left.parent = c;
					} else {
						c.left.val = val1;
					}
					stack[top++] = n.left;
					stack[top++] = c.left;
				}
			}
		} else if(copier == null) {
			while(top > 0) {
				var c1 = stack[--top];
				var n1 = stack[--top];
				if(n1.right != null) {
					var val2 = (js_Boot.__cast(n1.right.val , de_polygonal_ds_Cloneable)).clone();
					if(c1.right == null) {
						c1.right = new de_polygonal_ds_BinaryTreeNode(val2);
						c1.right.parent = c1;
					} else {
						c1.right.val = val2;
					}
					stack[top++] = n1.right;
					stack[top++] = c1.right;
				}
				if(n1.left != null) {
					var val3 = (js_Boot.__cast(n1.left.val , de_polygonal_ds_Cloneable)).clone();
					if(c1.left == null) {
						c1.left = new de_polygonal_ds_BinaryTreeNode(val3);
						c1.left.parent = c1;
					} else {
						c1.left.val = val3;
					}
					stack[top++] = n1.left;
					stack[top++] = c1.left;
				}
			}
		} else {
			while(top > 0) {
				var c2 = stack[--top];
				var n2 = stack[--top];
				if(n2.right != null) {
					var val4 = copier(n2.right.val);
					if(c2.right == null) {
						c2.right = new de_polygonal_ds_BinaryTreeNode(val4);
						c2.right.parent = c2;
					} else {
						c2.right.val = val4;
					}
					stack[top++] = n2.right;
					stack[top++] = c2.right;
				}
				if(n2.left != null) {
					var val5 = copier(n2.left.val);
					if(c2.left == null) {
						c2.left = new de_polygonal_ds_BinaryTreeNode(val5);
						c2.left.parent = c2;
					} else {
						c2.left.val = val5;
					}
					stack[top++] = n2.left;
					stack[top++] = c2.left;
				}
			}
		}
		return copy;
	}
	,getStack: function() {
		if(this.mStack == null) {
			var n = this.parent;
			while(n != null) {
				if(n.mStack != null) {
					this.mStack = n.mStack;
					break;
				}
				n = n.parent;
			}
			if(this.mStack == null) {
				this.mStack = new Array(2);
			}
		}
		return this.mStack;
	}
	,resizeStack: function(newSize) {
		var t = new Array(newSize);
		de_polygonal_ds_tools_NativeArrayTools.blit(this.mStack,0,t,0,this.mStack.length);
		return this.mStack = t;
	}
	,__class__: de_polygonal_ds_BinaryTreeNode
};
var de_polygonal_ds_Itr = function() { };
de_polygonal_ds_Itr.__name__ = true;
de_polygonal_ds_Itr.prototype = {
	__class__: de_polygonal_ds_Itr
};
var de_polygonal_ds_BinaryTreeNodeIterator = function(x) {
	this.mObject = x;
	this.mStack = [];
	this.mStack[0] = this.mObject;
	this.mTop = 1;
	this.mC = 0;
};
de_polygonal_ds_BinaryTreeNodeIterator.__name__ = true;
de_polygonal_ds_BinaryTreeNodeIterator.__interfaces__ = [de_polygonal_ds_Itr];
de_polygonal_ds_BinaryTreeNodeIterator.prototype = {
	reset: function() {
		this.mStack[0] = this.mObject;
		this.mTop = 1;
		this.mC = 0;
		return this;
	}
	,hasNext: function() {
		return this.mTop > 0;
	}
	,next: function() {
		var node = this.mStack[--this.mTop];
		this.mC = 0;
		if(node.left != null) {
			this.mStack[this.mTop++] = node.left;
			this.mC++;
		}
		if(node.right != null) {
			this.mStack[this.mTop++] = node.right;
			this.mC++;
		}
		return node.val;
	}
	,remove: function() {
		this.mTop -= this.mC;
	}
	,__class__: de_polygonal_ds_BinaryTreeNodeIterator
};
var de_polygonal_ds_Cloneable = function() { };
de_polygonal_ds_Cloneable.__name__ = true;
de_polygonal_ds_Cloneable.prototype = {
	__class__: de_polygonal_ds_Cloneable
};
var de_polygonal_ds_HashKey = function() { };
de_polygonal_ds_HashKey.__name__ = true;
de_polygonal_ds_HashKey.next = function() {
	return de_polygonal_ds_HashKey._counter++;
};
var de_polygonal_ds_tools_ArrayTools = function() { };
de_polygonal_ds_tools_ArrayTools.__name__ = true;
de_polygonal_ds_tools_ArrayTools.alloc = function(len) {
	var a = new Array(len);
	return a;
};
de_polygonal_ds_tools_ArrayTools.trim = function(a,len) {
	if(a.length > len) {
		a.length = len;
		return a;
	} else {
		return a;
	}
};
de_polygonal_ds_tools_ArrayTools.init = function(a,val,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? a.length : min + n;
	while(min < max) a[min++] = val;
	return a;
};
de_polygonal_ds_tools_ArrayTools.blit = function(src,srcPos,dst,dstPos,n) {
	if(n > 0) {
		if(src == dst) {
			if(srcPos < dstPos) {
				var i = srcPos + n;
				var j = dstPos + n;
				var _g1 = 0;
				var _g = n;
				while(_g1 < _g) {
					var k = _g1++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > dstPos) {
				var i1 = srcPos;
				var j1 = dstPos;
				var _g11 = 0;
				var _g2 = n;
				while(_g11 < _g2) {
					var k1 = _g11++;
					src[j1] = src[i1];
					++i1;
					++j1;
				}
			}
		} else if(srcPos == 0 && dstPos == 0) {
			var _g12 = 0;
			var _g3 = n;
			while(_g12 < _g3) {
				var i2 = _g12++;
				dst[i2] = src[i2];
			}
		} else if(srcPos == 0) {
			var _g13 = 0;
			var _g4 = n;
			while(_g13 < _g4) {
				var i3 = _g13++;
				dst[dstPos + i3] = src[i3];
			}
		} else if(dstPos == 0) {
			var _g14 = 0;
			var _g5 = n;
			while(_g14 < _g5) {
				var i4 = _g14++;
				dst[i4] = src[srcPos + i4];
			}
		} else {
			var _g15 = 0;
			var _g6 = n;
			while(_g15 < _g6) {
				var i5 = _g15++;
				dst[dstPos + i5] = src[srcPos + i5];
			}
		}
	}
};
de_polygonal_ds_tools_ArrayTools.binarySearchCmp = function(a,x,min,max,comparator) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(comparator(a[m],x) < 0) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && comparator(a[l],x) == 0) {
		return l;
	} else {
		return ~l;
	}
};
de_polygonal_ds_tools_ArrayTools.binarySearchf = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == x) {
		return l;
	} else {
		return ~l;
	}
};
de_polygonal_ds_tools_ArrayTools.binarySearchi = function(a,x,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < x) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == x) {
		return l;
	} else {
		return ~l;
	}
};
de_polygonal_ds_tools_ArrayTools.shuffle = function(a,rvals) {
	var s = a.length;
	if(rvals == null) {
		var m = Math;
		while(--s > 1) {
			var i = m.random() * s | 0;
			var t = a[s];
			a[s] = a[i];
			a[i] = t;
		}
	} else {
		var j = 0;
		while(--s > 1) {
			var i1 = rvals[j++] * s | 0;
			var t1 = a[s];
			a[s] = a[i1];
			a[i1] = t1;
		}
	}
};
de_polygonal_ds_tools_ArrayTools.sortRange = function(a,cmp,useInsertionSort,first,n) {
	var k = a.length;
	if(k > 1) {
		if(useInsertionSort) {
			var _g1 = first + 1;
			var _g = first + n;
			while(_g1 < _g) {
				var i = _g1++;
				var x = a[i];
				var j = i;
				while(j > first) {
					var y = a[j - 1];
					if(cmp(y,x) > 0) {
						a[j] = y;
						--j;
					} else {
						break;
					}
				}
				a[j] = x;
			}
		} else {
			de_polygonal_ds_tools_ArrayTools._quickSort(a,first,n,cmp);
		}
	}
};
de_polygonal_ds_tools_ArrayTools.quickPerm = function(n) {
	var results = [];
	var a = [];
	var p = [];
	var i;
	var j;
	var t;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i1 = _g1++;
		a[i1] = i1 + 1;
		p[i1] = 0;
	}
	results.push(a.slice());
	i = 1;
	while(i < n) if(p[i] < i) {
		j = i % 2 * p[i];
		t = a[j];
		a[j] = a[i];
		a[i] = t;
		results.push(a.slice());
		p[i]++;
		i = 1;
	} else {
		p[i] = 0;
		++i;
	}
	return results;
};
de_polygonal_ds_tools_ArrayTools.equals = function(a,b) {
	if(a.length != b.length) {
		return false;
	}
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(a[i] != b[i]) {
			return false;
		}
	}
	return true;
};
de_polygonal_ds_tools_ArrayTools.split = function(a,n,k) {
	var out = [];
	var b = null;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		if(i % k == 0) {
			b = [];
			out[i / k | 0] = b;
		}
		b.push(a[i]);
	}
	return out;
};
de_polygonal_ds_tools_ArrayTools._quickSort = function(a,first,n,cmp) {
	var last = first + n - 1;
	var lo = first;
	var hi = last;
	if(n > 1) {
		var i0 = first;
		var i1 = i0 + (n >> 1);
		var i2 = i0 + n - 1;
		var t0 = a[i0];
		var t1 = a[i1];
		var t2 = a[i2];
		var mid;
		var t = cmp(t0,t2);
		if(t < 0 && cmp(t0,t1) < 0) {
			if(cmp(t1,t2) < 0) {
				mid = i1;
			} else {
				mid = i2;
			}
		} else if(cmp(t1,t0) < 0 && cmp(t1,t2) < 0) {
			if(t < 0) {
				mid = i0;
			} else {
				mid = i2;
			}
		} else if(cmp(t2,t0) < 0) {
			mid = i1;
		} else {
			mid = i0;
		}
		var pivot = a[mid];
		a[mid] = a[first];
		while(lo < hi) {
			while(cmp(pivot,a[hi]) < 0 && lo < hi) --hi;
			if(hi != lo) {
				a[lo] = a[hi];
				++lo;
			}
			while(cmp(pivot,a[lo]) > 0 && lo < hi) ++lo;
			if(hi != lo) {
				a[hi] = a[lo];
				--hi;
			}
		}
		a[lo] = pivot;
		de_polygonal_ds_tools_ArrayTools._quickSort(a,first,lo - first,cmp);
		de_polygonal_ds_tools_ArrayTools._quickSort(a,lo + 1,last - lo,cmp);
	}
};
var de_polygonal_ds_tools_Assert = function() { };
de_polygonal_ds_tools_Assert.__name__ = true;
var de_polygonal_ds_tools_NativeArrayTools = function() { };
de_polygonal_ds_tools_NativeArrayTools.__name__ = true;
de_polygonal_ds_tools_NativeArrayTools.alloc = function(len) {
	return new Array(len);
};
de_polygonal_ds_tools_NativeArrayTools.get = function(src,index) {
	return src[index];
};
de_polygonal_ds_tools_NativeArrayTools.set = function(dst,index,val) {
	dst[index] = val;
};
de_polygonal_ds_tools_NativeArrayTools.size = function(a) {
	return a.length;
};
de_polygonal_ds_tools_NativeArrayTools.toArray = function(src,first,len,dst) {
	if(len == 0) {
		return [];
	}
	var out = de_polygonal_ds_tools_ArrayTools.alloc(len);
	if(first == 0) {
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			out[i] = src[i];
		}
	} else {
		var j;
		var _g11 = first;
		var _g2 = first + len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			out[i1 - first] = src[i1];
		}
	}
	return out;
};
de_polygonal_ds_tools_NativeArrayTools.ofArray = function(src) {
	return src.slice(0,src.length);
};
de_polygonal_ds_tools_NativeArrayTools.blit = function(src,srcPos,dst,dstPos,n) {
	if(n > 0) {
		if(src == dst) {
			if(srcPos < dstPos) {
				var i = srcPos + n;
				var j = dstPos + n;
				var _g1 = 0;
				var _g = n;
				while(_g1 < _g) {
					var k = _g1++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > dstPos) {
				var i1 = srcPos;
				var j1 = dstPos;
				var _g11 = 0;
				var _g2 = n;
				while(_g11 < _g2) {
					var k1 = _g11++;
					src[j1] = src[i1];
					++i1;
					++j1;
				}
			}
		} else if(srcPos == 0 && dstPos == 0) {
			var _g12 = 0;
			var _g3 = n;
			while(_g12 < _g3) {
				var i2 = _g12++;
				dst[i2] = src[i2];
			}
		} else if(srcPos == 0) {
			var _g13 = 0;
			var _g4 = n;
			while(_g13 < _g4) {
				var i3 = _g13++;
				dst[dstPos + i3] = src[i3];
			}
		} else if(dstPos == 0) {
			var _g14 = 0;
			var _g5 = n;
			while(_g14 < _g5) {
				var i4 = _g14++;
				dst[i4] = src[srcPos + i4];
			}
		} else {
			var _g15 = 0;
			var _g6 = n;
			while(_g15 < _g6) {
				var i5 = _g15++;
				dst[dstPos + i5] = src[srcPos + i5];
			}
		}
	}
};
de_polygonal_ds_tools_NativeArrayTools.copy = function(src) {
	return src.slice(0);
};
de_polygonal_ds_tools_NativeArrayTools.zero = function(dst,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? dst.length : min + n;
	var val = 0;
	while(min < max) dst[min++] = val;
	return dst;
};
de_polygonal_ds_tools_NativeArrayTools.init = function(a,val,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? a.length : min + n;
	while(min < max) a[min++] = val;
	return a;
};
de_polygonal_ds_tools_NativeArrayTools.nullify = function(a,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? a.length : min + n;
	while(min < max) a[min++] = null;
	return a;
};
de_polygonal_ds_tools_NativeArrayTools.binarySearchCmp = function(a,val,min,max,cmp) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(cmp(a[m],val) < 0) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && cmp(a[l],val) == 0) {
		return l;
	} else {
		return ~l;
	}
};
de_polygonal_ds_tools_NativeArrayTools.binarySearchf = function(a,val,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < val) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == val) {
		return l;
	} else {
		return ~l;
	}
};
de_polygonal_ds_tools_NativeArrayTools.binarySearchi = function(a,val,min,max) {
	var l = min;
	var m;
	var h = max + 1;
	while(l < h) {
		m = l + (h - l >> 1);
		if(a[m] < val) {
			l = m + 1;
		} else {
			h = m;
		}
	}
	if(l <= max && a[l] == val) {
		return l;
	} else {
		return ~l;
	}
};
var degen_bsp_BspData = $hx_exports["degen"]["bspNode"] = function(ops) {
	this.y = 0;
	this.x = 0;
	this.height = 0;
	this.width = 0;
	degen_utils_Extender.extend(this,ops);
};
degen_bsp_BspData.__name__ = true;
degen_bsp_BspData.prototype = {
	__class__: degen_bsp_BspData
};
var degen_bsp_Generator = $hx_exports["degen"]["BSPGenerator"] = function(ops) {
	this.y = 0;
	this.x = 0;
	this.ratio = .45;
	this.depth = 10;
	this.minWidth = 10;
	this.minHeight = 10;
	this.height = 60;
	this.width = 120;
	degen_utils_Extender.extend(this,ops);
};
degen_bsp_Generator.__name__ = true;
degen_bsp_Generator.prototype = {
	generate: function(root) {
		if(root == null) {
			var rootData = new degen_bsp_BspData({ height : this.height, width : this.width, x : this.x, y : this.y});
			root = new de_polygonal_ds_BinaryTreeNode(rootData);
		}
		this.buildTree(root);
		return root;
	}
	,buildTree: function(node,level) {
		if(level == null) {
			level = 0;
		}
		if(node == null || level >= this.depth) {
			return;
		}
		this.makeSplit(node);
		this.buildTree(node.left,level + 1);
		this.buildTree(node.right,level + 1);
	}
	,makeSplit: function(node) {
		var val = node.val;
		var lData;
		var rData;
		if(val.width < this.minWidth * 2 && val.height < this.minHeight * 2) {
			return;
		}
		var splitAt = 0;
		var splitHeight = Math.random() > 0.5;
		if(val.width >= val.height * this.ratio) {
			splitHeight = false;
		} else if(val.height >= val.width * this.ratio) {
			splitHeight = true;
		} else {
			return;
		}
		if(splitHeight) {
			splitAt = Std.random(val.height - this.minHeight * 2 + 1) + this.minHeight;
			var rHeight = val.height - splitAt;
			lData = new degen_bsp_BspData({ height : splitAt, width : val.width, parent : val, x : val.x, y : val.y});
			rData = new degen_bsp_BspData({ height : rHeight, width : val.width, parent : val, x : val.x, y : val.y + splitAt});
		} else {
			splitAt = Std.random(val.width - this.minWidth * 2 + 1) + this.minWidth;
			var rWidth = val.width - splitAt;
			lData = new degen_bsp_BspData({ height : val.height, width : splitAt, parent : val, x : val.x, y : val.y});
			rData = new degen_bsp_BspData({ height : val.height, width : rWidth, parent : val, x : val.x + splitAt, y : val.y});
		}
		node.left = new de_polygonal_ds_BinaryTreeNode(lData);
		node.right = new de_polygonal_ds_BinaryTreeNode(rData);
		return;
	}
	,__class__: degen_bsp_Generator
};
var degen_ca_Generator = $hx_exports["degen"]["CAGenerator"] = function() { };
degen_ca_Generator.__name__ = true;
degen_ca_Generator.generate = function(params) {
	var map = new degen_map_Map2d(params.width,params.height,-1);
	map.fillMapRandomly(params.tile_wall,params.tile_floor,params.start_fill_percent);
	map.ensureEdgesAreWalls(params.tile_wall);
	var steps = params.steps;
	var _g = 0;
	while(_g < steps.length) {
		var step = steps[_g];
		++_g;
		var _g2 = 0;
		var _g1 = step.reps;
		while(_g2 < _g1) {
			var rep = _g2++;
			degen_ca_Generator.buildFromCA(map,params,step);
		}
	}
	map.ensureEdgesAreWalls(params.tile_wall);
	return map;
};
degen_ca_Generator.buildFromCA = function(map,params,step) {
	var temp = new haxe_ds_IntMap();
	var _g1 = 1;
	var _g = params.width - 1;
	while(_g1 < _g) {
		var x = _g1++;
		var _g3 = 1;
		var _g2 = params.height - 1;
		while(_g3 < _g2) {
			var y = _g3++;
			var nCount = map.getNeighborCount(x,y,params.tile_wall);
			var nCount2 = map.getNeighborCount(x,y,params.tile_wall,2);
			var pos = map.XYtoIndex(x,y);
			if(nCount >= step.r1_cutoff || nCount2 <= step.r2_cutoff) {
				temp.h[pos] = params.tile_floor;
			} else {
				temp.h[pos] = params.tile_wall;
			}
		}
	}
	var i = temp.keys();
	while(i.hasNext()) {
		var i1 = i.next();
		var pos1 = map.IndexToXY(i1);
		map.set(pos1.x,pos1.y,temp.h[i1]);
	}
};
var degen_export__$TiledExporter_TiledMap = function(map) {
	this.width = 0;
	this.version = 1;
	this.tilewidth = 16;
	this.tilesets = [];
	this.tileheight = 16;
	this.renderorder = "right-down";
	this.properties = new haxe_ds_StringMap();
	this.orientation = "orthogonal";
	this.nextobjectid = 1;
	this.layers = [];
	this.height = 0;
	this.backgroundcolor = "#000000";
	this.height = map._height;
	this.width = map._width;
	this.layers.push(new degen_export__$TiledExporter_TiledLayer(map));
	this.tilesets.push(new degen_export__$TiledExporter_TiledTileSet());
};
degen_export__$TiledExporter_TiledMap.__name__ = true;
degen_export__$TiledExporter_TiledMap.prototype = {
	__class__: degen_export__$TiledExporter_TiledMap
};
var degen_export__$TiledExporter_TiledLayer = function(map) {
	this.y = 0;
	this.x = 0;
	this.width = -1;
	this.visible = true;
	this.type = "tilelayer";
	this.properties = new haxe_ds_StringMap();
	this.opacity = 1;
	this.name = "degen";
	this.height = -1;
	this.data = [];
	this.height = map._height;
	this.width = map._width;
	this.data = map._mapData;
};
degen_export__$TiledExporter_TiledLayer.__name__ = true;
degen_export__$TiledExporter_TiledLayer.prototype = {
	__class__: degen_export__$TiledExporter_TiledLayer
};
var degen_export__$TiledExporter_TiledTileSet = function() {
	this.tileheight = 16;
	this.tilewidth = 16;
	this.spacing = 0;
	this.properties = new haxe_ds_StringMap();
	this.name = "degen";
	this.margin = 0;
	this.imagewidth = 32;
	this.imageheight = 16;
	this.image = "./test.png";
	this.firstgid = 1;
};
degen_export__$TiledExporter_TiledTileSet.__name__ = true;
degen_export__$TiledExporter_TiledTileSet.prototype = {
	__class__: degen_export__$TiledExporter_TiledTileSet
};
var degen_export_TiledExporter = function() { };
degen_export_TiledExporter.__name__ = true;
degen_export_TiledExporter["export"] = function(filename,map) {
	var tiled_map = new degen_export__$TiledExporter_TiledMap(map);
	var json = JSON.stringify(tiled_map,null," ");
	return json;
};
var degen_map_Map2d = function(width,height,initTileData) {
	if(initTileData == null) {
		initTileData = 0;
	}
	this._height = 0;
	this._width = 0;
	this._width = width;
	this._height = height;
	this._mapData = [];
	this.initializeData(initTileData);
};
degen_map_Map2d.__name__ = true;
degen_map_Map2d.prototype = {
	initializeData: function(initTileData) {
		if(initTileData == -1) {
			return;
		}
		var _g1 = 0;
		var _g = this._height * this._width;
		while(_g1 < _g) {
			var i = _g1++;
			this._mapData[i] = initTileData;
		}
	}
	,fillMapRandomly: function(wallTile,floorTile,wallPercent) {
		if(wallPercent == null) {
			wallPercent = 45;
		}
		var _g1 = 0;
		var _g = this._width * this._height;
		while(_g1 < _g) {
			var i = _g1++;
			this._mapData[i] = Std.random(100) > wallPercent ? floorTile : wallTile;
		}
	}
	,ensureEdgesAreWalls: function(tileType) {
		if(tileType == null) {
			tileType = 0;
		}
		var _g1 = 0;
		var _g = this._width - 1;
		while(_g1 < _g) {
			var x = _g1++;
			this._mapData[this.XYtoIndex(x,0)] = tileType;
			this._mapData[this.XYtoIndex(x,this._height - 1)] = tileType;
		}
		var _g11 = 0;
		var _g2 = this._height - 1;
		while(_g11 < _g2) {
			var y = _g11++;
			this._mapData[this.XYtoIndex(0,y)] = tileType;
			this._mapData[this.XYtoIndex(this._width - 1,y)] = tileType;
		}
	}
	,getNeighborCount: function(x,y,neighborType,dist) {
		if(dist == null) {
			dist = 1;
		}
		var _gthis = this;
		var isNeighborType = function(tile) {
			if(_gthis._mapData[_gthis.XYtoIndex(tile.x,tile.y)] != neighborType) {
				return tile.onMap == false;
			} else {
				return true;
			}
		};
		return this.getNeighbors(x,y,dist).filter(isNeighborType).length;
	}
	,getNeighbors: function(x,y,dist,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(dist == null) {
			dist = 1;
		}
		var neighbors = [];
		var isSelf = false;
		var isNotOnMap = false;
		var _g1 = -dist;
		var _g = dist + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = -dist;
			var _g2 = dist + 1;
			while(_g3 < _g2) {
				var j = _g3++;
				if(i == 0) {
					isSelf = j == 0;
				} else {
					isSelf = false;
				}
				if(!(x + i < 0 || x + i > this._width - 1 || y + j < 0)) {
					isNotOnMap = y + j > this._height - 1;
				} else {
					isNotOnMap = true;
				}
				if(isSelf || isNotOnMap) {
					continue;
				}
				if(!diagonal && i == j) {
					continue;
				}
				neighbors.push({ x : x + i, y : y + j, onMap : true});
			}
		}
		return neighbors;
	}
	,XYtoIndex: function(x,y) {
		return this._width * y + x;
	}
	,IndexToXY: function(index) {
		var x = index % this._width | 0;
		var y = index / this._width | 0;
		return { x : x, y : y, onMap : x >= 0 && y >= 0 && x < this._width && y < this._height};
	}
	,set: function(x,y,data) {
		this._mapData[this.XYtoIndex(x,y)] = data;
	}
	,get: function(x,y) {
		return this._mapData[this.XYtoIndex(x,y)];
	}
	,toString: function() {
		var output = "\n MAP2d: \n\n";
		var _g1 = 0;
		var _g = this._height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this._width;
			while(_g3 < _g2) {
				var x = _g3++;
				output += String.fromCharCode(this._mapData[this.XYtoIndex(x,y)]);
			}
			output += "\n";
		}
		return output;
	}
	,__class__: degen_map_Map2d
};
var degen_map_MapHelper = function() { };
degen_map_MapHelper.__name__ = true;
degen_map_MapHelper.isMapConnected = function(map,tile,diagonal) {
	if(diagonal == null) {
		diagonal = true;
	}
	if(tile == null) {
		tile = 0;
	}
	var start = degen_map_MapHelper.getFirstEmptyTile(map,tile);
	var filled = degen_map_MapHelper.floodFill(map,start.x,start.y,tile,diagonal);
	return degen_map_MapHelper.getFirstEmptyTile(map,tile,filled) == null;
};
degen_map_MapHelper.getFirstEmptyTile = function(map,tile,ignore) {
	if(tile == null) {
		tile = 0;
	}
	var _g1 = 0;
	var _g = map._height * map._width;
	while(_g1 < _g) {
		var i = _g1++;
		if(map._mapData[i] == tile) {
			var cur = [map.IndexToXY(i)];
			if(ignore != null) {
				var foo = Lambda.find(ignore,(function(cur1) {
					return function(tile1) {
						if(tile1.x == cur1[0].x) {
							return tile1.y == cur1[0].y;
						} else {
							return false;
						}
					};
				})(cur));
				if(foo != null) {
					continue;
				}
			}
			return cur[0];
		}
	}
	return null;
};
degen_map_MapHelper.floodFill = function(map,startX,startY,tile,diagonal) {
	if(diagonal == null) {
		diagonal = true;
	}
	if(tile == null) {
		tile = 0;
	}
	var closed = new haxe_ds_IntMap();
	var open = [];
	var neighbors = [];
	var currentTile = map.XYtoIndex(startX,startY);
	var currentTile1 = map.IndexToXY(currentTile);
	open.push(currentTile1);
	var whereHasNotBeenVisited = function(tile1) {
		var key = map.XYtoIndex(tile1.x,tile1.y);
		return closed.h[key] == null;
	};
	var whereTileIsSameType = function(t) {
		return map.get(t.x,t.y) == tile;
	};
	while(open.length > 0) {
		currentTile1 = open.pop();
		var key1 = map.XYtoIndex(currentTile1.x,currentTile1.y);
		closed.h[key1] = currentTile1;
		neighbors = map.getNeighbors(currentTile1.x,currentTile1.y,1,diagonal).filter(whereHasNotBeenVisited).filter(whereTileIsSameType);
		open = open.concat(neighbors);
	}
	return Lambda.array(closed);
};
degen_map_MapHelper.getHallwayTiles = function(map,tile) {
	var hallwayTiles = [];
	var _g1 = 0;
	var _g = map._height;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = map._width;
		while(_g3 < _g2) {
			var j = _g3++;
			if(map._mapData[map.XYtoIndex(i,j)] != tile) {
				continue;
			}
			var c = map.getNeighborCount(i,j,tile,2);
			var tmp = c < 8;
		}
	}
	return hallwayTiles;
};
var degen_map_generators_DrunkWalkGenerator = $hx_exports["degen"]["WalkGenerator"] = function() { };
degen_map_generators_DrunkWalkGenerator.__name__ = true;
degen_map_generators_DrunkWalkGenerator.generate = function(params) {
	var height = params.height;
	var width = params.width;
	var tile_floor = params.tile_floor;
	var tile_wall = params.tile_wall;
	var start_fill_percent = params.start_fill_percent;
	var countOfFilled = 0;
	var totalCount = height * width;
	var map = new degen_map_Map2d(width,height,tile_wall);
	var walkerPos_y;
	var walkerPos_x = width / 2 | 0;
	walkerPos_y = height / 2 | 0;
	map.set(walkerPos_x,walkerPos_y,0);
	var counter = 0;
	var direction = Std.random(4);
	while(countOfFilled < totalCount * (start_fill_percent / 100)) {
		direction = Std.random(4);
		if(map.get(walkerPos_x,walkerPos_y) != tile_floor) {
			map.set(walkerPos_x,walkerPos_y,tile_floor);
			++countOfFilled;
		}
		walkerPos_y += direction == 0 ? -1 : 0;
		walkerPos_y += direction == 2 ? 1 : 0;
		walkerPos_x += direction == 1 ? -1 : 0;
		walkerPos_x += direction == 3 ? 1 : 0;
		if(walkerPos_x < 0 || walkerPos_x > width - 1) {
			walkerPos_x = width / 2 | 0;
			walkerPos_y = height / 2 | 0;
		}
		if(walkerPos_y < 0 || walkerPos_y > height - 1) {
			walkerPos_x = width / 2 | 0;
			walkerPos_y = height / 2 | 0;
		}
		if(counter >= 500000) {
			break;
		}
		++counter;
	}
	return map;
};
var degen_map_generators_MixedGenerator = function() { };
degen_map_generators_MixedGenerator.__name__ = true;
degen_map_generators_MixedGenerator.buildRooms = function(root,userData) {
	userData = degen_utils_Extender.extend({ tile_wall : 0, tile_floor : 1},userData);
	var rootVal = root.val;
	var map = new degen_map_Map2d(rootVal.width,rootVal.height,userData.tile_wall);
	var makeRooms = function(node,foo) {
		if(node.left != null || node.right != null) {
			return true;
		}
		var roomStartX = node.val.x + (Math.random() * 2 | 0) + 1;
		var roomStartY = node.val.y + (Math.random() * 2 | 0) + 1;
		var roomEndX = node.val.x + node.val.width - (Math.random() * 2 | 0) - 1;
		var roomEndY = node.val.y + node.val.height - (Math.random() * 2 | 0) - 1;
		var _g1 = roomStartX;
		var _g = roomEndX;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = roomStartY;
			var _g2 = roomEndY;
			while(_g3 < _g2) {
				var y = _g3++;
				map.set(x,y,userData.tile_floor);
			}
		}
		return true;
	};
	var makeCaveFromCA = function(node1,userData1) {
		if((node1.left != null || node1.right != null) && (node1.right.right != null || node1.right.left != null || node1.left.right != null || node1.left.left != null)) {
			return true;
		}
		var roomStartX1 = node1.val.x + (Math.random() * 2 | 0);
		var roomStartY1 = node1.val.y + (Math.random() * 2 | 0);
		var cave = degen_ca_Generator.generate({ height : node1.val.height, width : node1.val.width});
		var _g11 = 0;
		var _g4 = cave._width;
		while(_g11 < _g4) {
			var x1 = _g11++;
			var _g31 = 0;
			var _g21 = cave._height;
			while(_g31 < _g21) {
				var y1 = _g31++;
				var makeCaveFromCA1 = cave.get(x1,y1);
				map.set(x1 + roomStartX1,y1 + roomStartY1,makeCaveFromCA1);
			}
		}
		return true;
	};
	var makeCorridors = function(node2,userData2) {
		if(node2.left == null && node2.right == null) {
			return true;
		}
		var leftXcenter = node2.left.val.x + node2.left.val.width / 2 | 0;
		var leftYcenter = node2.left.val.y + node2.left.val.height / 2 | 0;
		var rightXcenter = node2.right.val.x + node2.right.val.width / 2 | 0;
		var rightYcenter = node2.right.val.y + node2.right.val.height / 2 | 0;
		var startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
		var endX = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
		var startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
		var endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
		var _g12 = startX;
		var _g5 = endX;
		while(_g12 < _g5) {
			var x2 = _g12++;
			map.set(x2,startY,userData2.tile_floor);
		}
		var _g13 = startY;
		var _g6 = endY;
		while(_g13 < _g6) {
			var y2 = _g13++;
			map.set(startX,y2,userData2.tile_floor);
		}
		return true;
	};
	var chooseRoomOrCave = function(node3,userData3) {
		if(Std.random(10) > 2) {
			return makeRooms(node3,null);
		} else {
			return makeCaveFromCA(node3,null);
		}
	};
	var closeEdges = function(node4,userData4) {
		if(node4.parent != null) {
			return true;
		}
		var _g14 = 0;
		var _g7 = node4.val.width;
		while(_g14 < _g7) {
			var x3 = _g14++;
			map.set(x3,0,userData4.tile_wall);
			map.set(x3,node4.val.height,userData4.tile_wall);
		}
		var _g15 = 0;
		var _g8 = node4.val.height;
		while(_g15 < _g8) {
			var y3 = _g15++;
			map.set(0,y3,userData4.tile_wall);
			map.set(node4.val.width,y3,userData4.tile_wall);
		}
		return false;
	};
	root.postorder(chooseRoomOrCave,false,userData);
	root.inorder(closeEdges,false,userData);
	root.postorder(makeCorridors,false,userData);
	return map;
};
var degen_map_generators_RoomGenerator = $hx_exports["degen"]["RoomGenerator"] = function() { };
degen_map_generators_RoomGenerator.__name__ = true;
degen_map_generators_RoomGenerator.buildRooms = function(root,params) {
	params = degen_utils_Extender.extend({ },[degen_map_generators_RoomGenerator._params,params]);
	var rootVal = root.val;
	var map = new degen_map_Map2d(rootVal.width,rootVal.height,params.tileWall);
	var makeRoom = function(node,foo) {
		if(node.left != null || node.right != null) {
			return true;
		}
		var xPadding = Math.random() * (node.val.width * params.paddingRatio) | 0;
		var yPadding = Math.random() * (node.val.height * params.paddingRatio) | 0;
		var roomStartX = node.val.x + (xPadding | 0) + 1;
		var roomStartY = node.val.y + (xPadding | 0) + 1;
		var roomEndX = node.val.x + node.val.width - yPadding - 1;
		var roomEndY = node.val.y + node.val.height - yPadding - 1;
		var _g1 = roomStartX;
		var _g = roomEndX;
		while(_g1 < _g) {
			var x = _g1++;
			var _g3 = roomStartY;
			var _g2 = roomEndY;
			while(_g3 < _g2) {
				var y = _g3++;
				map.set(x,y,params.tileFloor);
			}
		}
		return true;
	};
	var makeCorridors = function(node1,userData) {
		if(node1.left == null && node1.right == null) {
			return true;
		}
		var leftXcenter = node1.left.val.x + node1.left.val.width / 2 | 0;
		var leftYcenter = node1.left.val.y + node1.left.val.height / 2 | 0;
		var rightXcenter = node1.right.val.x + node1.right.val.width / 2 | 0;
		var rightYcenter = node1.right.val.y + node1.right.val.height / 2 | 0;
		var startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
		var endX = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
		var startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
		var endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
		var _g11 = startX;
		var _g4 = endX;
		while(_g11 < _g4) {
			var x1 = _g11++;
			map.set(x1,startY,params.tileFloor);
		}
		var _g12 = startY;
		var _g5 = endY;
		while(_g12 < _g5) {
			var y1 = _g12++;
			map.set(startX,y1,params.tileFloor);
		}
		return true;
	};
	root.postorder(makeRoom);
	root.postorder(makeCorridors);
	return map;
};
var degen_map_helpers_ConnectivityChecker = function() { };
degen_map_helpers_ConnectivityChecker.__name__ = true;
degen_map_helpers_ConnectivityChecker.prototype = {
	check: function(map,tile) {
		if(tile == null) {
			tile = 0;
		}
		var firstEmpty = degen_map_MapHelper.getFirstEmptyTile(map,tile);
		if(firstEmpty == null) {
			return false;
		}
		var filledTiles = degen_map_MapHelper.floodFill(map,tile,firstEmpty.x,firstEmpty.y);
		firstEmpty = degen_map_MapHelper.getFirstEmptyTile(map,tile);
		return firstEmpty != null;
	}
	,__class__: degen_map_helpers_ConnectivityChecker
};
var degen_utils_Extender = function() { };
degen_utils_Extender.__name__ = true;
degen_utils_Extender.extend = function(base,extension) {
	if(base == null) {
		base = { };
	}
	var extensions;
	if((extension instanceof Array) && extension.__enum__ == null) {
		extensions = extension;
	} else {
		extensions = [];
		extensions.push(extension);
	}
	var _g = 0;
	while(_g < extensions.length) {
		var ex = extensions[_g];
		++_g;
		var _g1 = 0;
		var _g2 = Reflect.fields(ex);
		while(_g1 < _g2.length) {
			var ff = _g2[_g1];
			++_g1;
			var exField = Reflect.field(ex,ff);
			var baseField = Reflect.field(base,ff);
			if(baseField != null && Reflect.isObject(baseField)) {
				if(Reflect.isObject(exField)) {
					degen_utils_Extender.extend(baseField,exField);
				}
				continue;
			}
			base[ff] = exField;
		}
	}
	return base;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
de_polygonal_ds_HashKey._counter = 0;
degen_ca_Generator._params = { steps : [{ reps : 4, r1_cutoff : 5, r2_cutoff : 2},{ reps : 3, r1_cutoff : 5, r2_cutoff : 0}], height : 64, width : 64, tile_floor : 1, tile_wall : 0, start_fill_percent : 65};
degen_map_generators_RoomGenerator._params = { tileFloor : 1, tileWall : 0, paddingRatio : 0.001};
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
