// Generated by Haxe 4.0.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["dungen"] = $hx_exports["dungen"] || {};
$hx_exports["algos"] = $hx_exports["algos"] || {};
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var dropecho_ds_GraphNode = $hx_exports["GraphNode"] = function(value,id) {
	this.id = id != null ? id : Std.string(Std.random(10000000));
	this.value = value;
};
dropecho_ds_GraphNode.__name__ = "dropecho.ds.GraphNode";
dropecho_ds_GraphNode.prototype = {
	id: null
	,value: null
	,graph: null
	,neighborIds: function() {
		return this.graph.neighborIds(this);
	}
	,neighbors: function(filter) {
		var n = this.graph.neighbors(this,filter);
		return n;
	}
	,edgeData: function(toId) {
		return this.graph.edgeData(this.id,toId);
	}
	,__class__: dropecho_ds_GraphNode
};
var dropecho_ds_BSPNode = $hx_exports["BSPNode"] = function(value) {
	dropecho_ds_GraphNode.call(this,value);
};
dropecho_ds_BSPNode.__name__ = "dropecho.ds.BSPNode";
dropecho_ds_BSPNode.__super__ = dropecho_ds_GraphNode;
dropecho_ds_BSPNode.prototype = $extend(dropecho_ds_GraphNode.prototype,{
	parent: null
	,left: null
	,right: null
	,createLeft: function(value) {
		return this.setLeft(new dropecho_ds_BSPNode(value));
	}
	,createRight: function(value) {
		return this.setRight(new dropecho_ds_BSPNode(value));
	}
	,setLeft: function(node) {
		this.left = node;
		node.parent = this;
		this.graph.addNode(node);
		this.graph.addUniEdge(this.id,node.id,"left");
		this.graph.addUniEdge(node.id,this.id,"parent");
		return node;
	}
	,setRight: function(node) {
		this.right = node;
		node.parent = this;
		this.graph.addNode(node);
		this.graph.addUniEdge(this.id,node.id,"right");
		this.graph.addUniEdge(node.id,this.id,"parent");
		return node;
	}
	,isLeaf: function() {
		if(this.right == null) {
			return this.left == null;
		} else {
			return false;
		}
	}
	,isRoot: function() {
		return this.parent == null;
	}
	,hasLeft: function() {
		return this.left != null;
	}
	,hasRight: function() {
		return this.right != null;
	}
	,__class__: dropecho_ds_BSPNode
});
var dropecho_ds_Graph = $hx_exports["Graph"] = function() {
	this.nodes = new haxe_ds_StringMap();
	this.edges = new haxe_ds_StringMap();
};
dropecho_ds_Graph.__name__ = "dropecho.ds.Graph";
dropecho_ds_Graph.prototype = {
	nodes: null
	,edges: null
	,createNode: function(value) {
		return this.addNode(new dropecho_ds_GraphNode(value));
	}
	,addNode: function(node) {
		var key = node.id;
		var _this = this.nodes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,node);
		} else {
			_this.h[key] = node;
		}
		node.graph = this;
		return node;
	}
	,addUniEdge: function(nodeId,otherId,data) {
		var _this = this.edges;
		if(__map_reserved[nodeId] != null ? _this.existsReserved(nodeId) : _this.h.hasOwnProperty(nodeId)) {
			var _this1 = this.edges;
			var _this2 = __map_reserved[nodeId] != null ? _this1.getReserved(nodeId) : _this1.h[nodeId];
			if(__map_reserved[otherId] != null) {
				_this2.setReserved(otherId,data);
			} else {
				_this2.h[otherId] = data;
			}
		} else {
			var this1 = this.edges;
			var _g = new haxe_ds_StringMap();
			if(__map_reserved[otherId] != null) {
				_g.setReserved(otherId,data);
			} else {
				_g.h[otherId] = data;
			}
			var value = _g;
			var _this3 = this1;
			if(__map_reserved[nodeId] != null) {
				_this3.setReserved(nodeId,value);
			} else {
				_this3.h[nodeId] = value;
			}
		}
	}
	,addBiEdge: function(nodeId,otherId,data) {
		this.addUniEdge(nodeId,otherId,data);
		this.addUniEdge(otherId,nodeId,data);
	}
	,remove: function(id) {
		this.nodes.remove(id);
	}
	,neighbors: function(node,filter) {
		var _gthis = this;
		var _this = this.neighborIds(node,filter);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var id = _this[i];
			var _this1 = _gthis.nodes;
			result[i] = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		}
		return result;
	}
	,neighborIds: function(node,filter) {
		var key = node.id;
		var _this = this.edges;
		var edges = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(edges == null) {
			return [];
		}
		var _g = [];
		var _g1 = new haxe_iterators_MapKeyValueIterator(edges);
		while(_g1.hasNext()) {
			var _g2 = _g1.next();
			var id = _g2.key;
			var data = _g2.value;
			var tmp;
			if(filter == null || filter(id,data)) {
				tmp = id;
			} else {
				continue;
			}
			_g.push(tmp);
		}
		var ids = _g;
		haxe_ds_ArraySort.sort(ids,Reflect.compare);
		return ids;
	}
	,edgeData: function(fromId,toId) {
		var _this = this.edges;
		if(__map_reserved[fromId] != null ? _this.existsReserved(fromId) : _this.h.hasOwnProperty(fromId)) {
			var _this1 = this.edges;
			var _this2 = __map_reserved[fromId] != null ? _this1.getReserved(fromId) : _this1.h[fromId];
			if(__map_reserved[toId] != null) {
				return _this2.getReserved(toId);
			} else {
				return _this2.h[toId];
			}
		}
		return null;
	}
	,__class__: dropecho_ds_Graph
};
var dropecho_ds_BSPTree = $hx_exports["BSPTree"] = function(rootValue) {
	dropecho_ds_Graph.call(this);
	this.root = new dropecho_ds_BSPNode();
	this.root.value = rootValue;
	this.addNode(this.root);
};
dropecho_ds_BSPTree.__name__ = "dropecho.ds.BSPTree";
dropecho_ds_BSPTree.__super__ = dropecho_ds_Graph;
dropecho_ds_BSPTree.prototype = $extend(dropecho_ds_Graph.prototype,{
	root: null
	,getParent: function(node) {
		return this.neighbors(node,function(id,data) {
			return data == "parent";
		})[0];
	}
	,getChildren: function(node) {
		return this.neighbors(node,function(id,data) {
			if(data != "left") {
				return data == "right";
			} else {
				return true;
			}
		});
	}
	,getRoot: function() {
		return this.root;
	}
	,getLeafs: function() {
		var _g = [];
		var _this = this.nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			var tmp;
			if(this.getChildren(node1).length == 0) {
				tmp = node1;
			} else {
				continue;
			}
			_g.push(tmp);
		}
		return _g;
	}
	,__class__: dropecho_ds_BSPTree
});
var dropecho_ds_algos_InOrderTraversal = $hx_exports["algos"]["InOrderTraversal"] = function() {
	this.visited = [];
};
dropecho_ds_algos_InOrderTraversal.__name__ = "dropecho.ds.algos.InOrderTraversal";
dropecho_ds_algos_InOrderTraversal.prototype = {
	visited: null
	,run: function(node,visitor) {
		if(node.left != null) {
			this.run(node.left,visitor);
		}
		if(visitor != null) {
			if(visitor(node)) {
				this.visited.push(node.id);
			} else {
				return this.visited;
			}
		} else {
			this.visited.push(node.id);
		}
		if(node.right != null) {
			this.run(node.right,visitor);
		}
		return this.visited;
	}
	,__class__: dropecho_ds_algos_InOrderTraversal
};
var dropecho_ds_algos_PostOrderTraversal = $hx_exports["algos"]["PostOrderTraversal"] = function() {
	this.visited = [];
};
dropecho_ds_algos_PostOrderTraversal.__name__ = "dropecho.ds.algos.PostOrderTraversal";
dropecho_ds_algos_PostOrderTraversal.prototype = {
	visited: null
	,run: function(node,visitor) {
		if(node.left != null) {
			this.run(node.left,visitor);
		}
		if(node.right != null) {
			this.run(node.right,visitor);
		}
		if(visitor != null) {
			if(visitor(node)) {
				this.visited.push(node.id);
			} else {
				return this.visited;
			}
		} else {
			this.visited.push(node.id);
		}
		return this.visited;
	}
	,__class__: dropecho_ds_algos_PostOrderTraversal
};
var dropecho_dungen_bsp_BspData = $hx_exports["dungen"]["BSPData"] = function(ops) {
	this.y = 0;
	this.x = 0;
	this.height = 0;
	this.width = 0;
	dropecho_utils_Extender.extendThis(this,ops);
};
dropecho_dungen_bsp_BspData.__name__ = "dropecho.dungen.bsp.BspData";
dropecho_dungen_bsp_BspData.prototype = {
	width: null
	,height: null
	,x: null
	,y: null
	,__class__: dropecho_dungen_bsp_BspData
};
var dropecho_dungen_bsp_BSPGeneratorConfig = $hx_exports["dungen"]["BSPGeneratorConfig"] = function() {
	this.y = 0;
	this.x = 0;
	this.ratio = .45;
	this.depth = 10;
	this.minWidth = 10;
	this.minHeight = 10;
	this.height = 60;
	this.width = 120;
};
dropecho_dungen_bsp_BSPGeneratorConfig.__name__ = "dropecho.dungen.bsp.BSPGeneratorConfig";
dropecho_dungen_bsp_BSPGeneratorConfig.prototype = {
	width: null
	,height: null
	,minHeight: null
	,minWidth: null
	,depth: null
	,ratio: null
	,x: null
	,y: null
	,__class__: dropecho_dungen_bsp_BSPGeneratorConfig
};
var dropecho_dungen_bsp_Generator = $hx_exports["dungen"]["BSPGenerator"] = function(ops) {
	dropecho_dungen_bsp_BSPGeneratorConfig.call(this);
	dropecho_utils_Extender.extendThis(this,ops);
};
dropecho_dungen_bsp_Generator.__name__ = "dropecho.dungen.bsp.Generator";
dropecho_dungen_bsp_Generator.__super__ = dropecho_dungen_bsp_BSPGeneratorConfig;
dropecho_dungen_bsp_Generator.prototype = $extend(dropecho_dungen_bsp_BSPGeneratorConfig.prototype,{
	generate: function() {
		var rootData = { height : this.height, width : this.width, x : this.x, y : this.y};
		var tree = new dropecho_ds_BSPTree(rootData);
		this.buildTree(tree.getRoot());
		return tree;
	}
	,buildTree: function(node,level) {
		if(level == null) {
			level = 0;
		}
		if(node == null || level >= this.depth) {
			return;
		}
		this.makeSplit(node);
		this.buildTree(node.left,level + 1);
		this.buildTree(node.right,level + 1);
	}
	,makeSplit: function(node) {
		var val = node.value;
		var lData;
		var rData;
		if(val.width < this.minWidth * 2 && val.height < this.minHeight * 2) {
			return;
		}
		var splitAt = 0;
		var splitHeight = Math.random() > 0.5;
		if(val.width >= val.height * this.ratio) {
			splitHeight = false;
		} else if(val.height >= val.width * this.ratio) {
			splitHeight = true;
		} else {
			return;
		}
		if(splitHeight) {
			splitAt = Std.random(val.height - this.minHeight * 2 + 1) + this.minHeight;
			var rHeight = val.height - splitAt;
			lData = new dropecho_dungen_bsp_BspData({ height : splitAt, width : val.width, x : val.x, y : val.y});
			rData = new dropecho_dungen_bsp_BspData({ height : rHeight, width : val.width, x : val.x, y : val.y + splitAt});
		} else {
			splitAt = Std.random(val.width - this.minWidth * 2 + 1) + this.minWidth;
			var rWidth = val.width - splitAt;
			lData = new dropecho_dungen_bsp_BspData({ height : val.height, width : splitAt, x : val.x, y : val.y});
			rData = new dropecho_dungen_bsp_BspData({ height : val.height, width : rWidth, x : val.x + splitAt, y : val.y});
		}
		node.setLeft(new dropecho_ds_BSPNode(lData));
		node.setRight(new dropecho_ds_BSPNode(rData));
		return;
	}
	,__class__: dropecho_dungen_bsp_Generator
});
var dropecho_dungen_ca_CA_$PARAM_$STEP = $hx_exports["dungen"]["CA_PARAM_STEP"] = function() {
	this.r2_cutoff = 2;
	this.r1_cutoff = 5;
	this.reps = 4;
};
dropecho_dungen_ca_CA_$PARAM_$STEP.__name__ = "dropecho.dungen.ca.CA_PARAM_STEP";
dropecho_dungen_ca_CA_$PARAM_$STEP.prototype = {
	reps: null
	,r1_cutoff: null
	,r2_cutoff: null
	,__class__: dropecho_dungen_ca_CA_$PARAM_$STEP
};
var dropecho_dungen_ca_CA_$PARAMS = $hx_exports["dungen"]["CA_PARAMS"] = function() {
	this.start_fill_percent = 65;
	this.tile_wall = 0;
	this.tile_floor = 1;
	this.width = 64;
	this.height = 64;
	this.steps = [];
	var step1 = new dropecho_dungen_ca_CA_$PARAM_$STEP();
	step1.reps = 4;
	step1.r1_cutoff = 5;
	step1.r2_cutoff = 2;
	var step2 = new dropecho_dungen_ca_CA_$PARAM_$STEP();
	step2.reps = 3;
	step2.r1_cutoff = 5;
	step2.r2_cutoff = 0;
	this.steps.push(step1);
	this.steps.push(step2);
};
dropecho_dungen_ca_CA_$PARAMS.__name__ = "dropecho.dungen.ca.CA_PARAMS";
dropecho_dungen_ca_CA_$PARAMS.prototype = {
	steps: null
	,height: null
	,width: null
	,tile_floor: null
	,tile_wall: null
	,start_fill_percent: null
	,__class__: dropecho_dungen_ca_CA_$PARAMS
};
var dropecho_dungen_ca_Generator = $hx_exports["dungen"]["CAGenerator"] = function() { };
dropecho_dungen_ca_Generator.__name__ = "dropecho.dungen.ca.Generator";
dropecho_dungen_ca_Generator.generate = function(opts) {
	var params = dropecho_utils_Extender.defaults(new dropecho_dungen_ca_CA_$PARAMS(),opts);
	var map = new dropecho_dungen_map_Map2d(params.width,params.height,-1);
	map.fillMapRandomly(params.tile_wall,params.tile_floor,params.start_fill_percent);
	map.ensureEdgesAreWalls(params.tile_wall);
	var _g = 0;
	var _g1 = params.steps;
	while(_g < _g1.length) {
		var step = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g11 = step.reps;
		while(_g2 < _g11) {
			var _ = _g2++;
			dropecho_dungen_ca_Generator.buildFromCA(map,params,step);
		}
	}
	map.ensureEdgesAreWalls(params.tile_wall);
	return map;
};
dropecho_dungen_ca_Generator.buildFromCA = function(map,params,step) {
	var temp = new haxe_ds_IntMap();
	var _g = 1;
	var _g1 = params.width - 1;
	while(_g < _g1) {
		var x = _g++;
		var _g2 = 1;
		var _g11 = params.height - 1;
		while(_g2 < _g11) {
			var y = _g2++;
			var nCount = map.getNeighborCount(x,y,params.tile_wall);
			var nCount2 = map.getNeighborCount(x,y,params.tile_wall,2);
			var pos = map.XYtoIndex(x,y);
			if(nCount >= step.r1_cutoff || nCount2 <= step.r2_cutoff) {
				temp.h[pos] = params.tile_floor;
			} else {
				temp.h[pos] = params.tile_wall;
			}
		}
	}
	var i = temp.keys();
	while(i.hasNext()) {
		var i1 = i.next();
		var pos1 = map.IndexToXY(i1);
		map.set(pos1.x,pos1.y,temp.h[i1]);
	}
};
var dropecho_dungen_export__$TiledExporter_TiledMap = function(map) {
	this.width = 0;
	this.version = 1;
	this.tilewidth = 16;
	this.tilesets = [];
	this.tileheight = 16;
	this.renderorder = "right-down";
	this.properties = new haxe_ds_StringMap();
	this.orientation = "orthogonal";
	this.nextobjectid = 1;
	this.layers = [];
	this.height = 0;
	this.backgroundcolor = "#000000";
	this.height = map._height;
	this.width = map._width;
	this.layers.push(new dropecho_dungen_export__$TiledExporter_TiledLayer(map));
	this.tilesets.push(new dropecho_dungen_export__$TiledExporter_TiledTileSet());
};
dropecho_dungen_export__$TiledExporter_TiledMap.__name__ = "dropecho.dungen.export._TiledExporter.TiledMap";
dropecho_dungen_export__$TiledExporter_TiledMap.prototype = {
	backgroundcolor: null
	,height: null
	,layers: null
	,nextobjectid: null
	,orientation: null
	,properties: null
	,renderorder: null
	,tileheight: null
	,tilesets: null
	,tilewidth: null
	,version: null
	,width: null
	,__class__: dropecho_dungen_export__$TiledExporter_TiledMap
};
var dropecho_dungen_export__$TiledExporter_TiledLayer = function(map) {
	this.y = 0;
	this.x = 0;
	this.width = -1;
	this.visible = true;
	this.type = "tilelayer";
	this.properties = new haxe_ds_StringMap();
	this.opacity = 1;
	this.name = "degen";
	this.height = -1;
	this.data = [];
	this.height = map._height;
	this.width = map._width;
	this.data = map._mapData;
};
dropecho_dungen_export__$TiledExporter_TiledLayer.__name__ = "dropecho.dungen.export._TiledExporter.TiledLayer";
dropecho_dungen_export__$TiledExporter_TiledLayer.prototype = {
	data: null
	,height: null
	,name: null
	,opacity: null
	,properties: null
	,type: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,__class__: dropecho_dungen_export__$TiledExporter_TiledLayer
};
var dropecho_dungen_export__$TiledExporter_TiledTileSet = function() {
	this.tileheight = 16;
	this.tilewidth = 16;
	this.spacing = 0;
	this.properties = new haxe_ds_StringMap();
	this.name = "degen";
	this.margin = 0;
	this.imagewidth = 32;
	this.imageheight = 16;
	this.image = "./test.png";
	this.firstgid = 1;
};
dropecho_dungen_export__$TiledExporter_TiledTileSet.__name__ = "dropecho.dungen.export._TiledExporter.TiledTileSet";
dropecho_dungen_export__$TiledExporter_TiledTileSet.prototype = {
	firstgid: null
	,image: null
	,imageheight: null
	,imagewidth: null
	,margin: null
	,name: null
	,properties: null
	,spacing: null
	,tilewidth: null
	,tileheight: null
	,__class__: dropecho_dungen_export__$TiledExporter_TiledTileSet
};
var dropecho_dungen_export_TiledExporter = $hx_exports["dungen"]["TiledExporter"] = function() { };
dropecho_dungen_export_TiledExporter.__name__ = "dropecho.dungen.export.TiledExporter";
dropecho_dungen_export_TiledExporter.export = function(map) {
	var tiled_map = new dropecho_dungen_export__$TiledExporter_TiledMap(map);
	var json = JSON.stringify(tiled_map,null," ");
	return json;
};
var dropecho_dungen_map_Map2d = function(width,height,initTileData) {
	if(initTileData == null) {
		initTileData = 0;
	}
	this._height = 0;
	this._width = 0;
	this._width = width;
	this._height = height;
	this._mapData = [];
	this.initializeData(initTileData);
};
dropecho_dungen_map_Map2d.__name__ = "dropecho.dungen.map.Map2d";
dropecho_dungen_map_Map2d.prototype = {
	_width: null
	,_height: null
	,_mapData: null
	,initializeData: function(initTileData) {
		if(initTileData == -1) {
			return;
		}
		var _g = 0;
		var _g1 = this._height * this._width;
		while(_g < _g1) {
			var i = _g++;
			this._mapData[i] = initTileData;
		}
	}
	,fillMapRandomly: function(wallTile,floorTile,wallPercent) {
		if(wallPercent == null) {
			wallPercent = 45;
		}
		var _g = 0;
		var _g1 = this._width * this._height;
		while(_g < _g1) {
			var i = _g++;
			this._mapData[i] = Std.random(100) > wallPercent ? floorTile : wallTile;
		}
	}
	,ensureEdgesAreWalls: function(tileType) {
		if(tileType == null) {
			tileType = 0;
		}
		var _g = 0;
		var _g1 = this._width - 1;
		while(_g < _g1) {
			var x = _g++;
			this._mapData[this.XYtoIndex(x,0)] = tileType;
			this._mapData[this.XYtoIndex(x,this._height - 1)] = tileType;
		}
		var _g2 = 0;
		var _g3 = this._height - 1;
		while(_g2 < _g3) {
			var y = _g2++;
			this._mapData[this.XYtoIndex(0,y)] = tileType;
			this._mapData[this.XYtoIndex(this._width - 1,y)] = tileType;
		}
	}
	,getNeighborCount: function(x,y,neighborType,dist) {
		if(dist == null) {
			dist = 1;
		}
		var _gthis = this;
		var isNeighborType = function(tile) {
			if(_gthis._mapData[_gthis.XYtoIndex(tile.x,tile.y)] != neighborType) {
				return tile.onMap == false;
			} else {
				return true;
			}
		};
		var _g = [];
		var _g1 = 0;
		var _g2 = this.getNeighbors(x,y,dist);
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(isNeighborType(v)) {
				_g.push(v);
			}
		}
		return _g.length;
	}
	,getNeighbors: function(x,y,dist,diagonal) {
		if(diagonal == null) {
			diagonal = true;
		}
		if(dist == null) {
			dist = 1;
		}
		var neighbors = [];
		var isSelf = false;
		var isNotOnMap = false;
		var _g = -dist;
		var _g1 = dist + 1;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = -dist;
			var _g11 = dist + 1;
			while(_g2 < _g11) {
				var j = _g2++;
				isSelf = i == 0 && j == 0;
				isNotOnMap = x + i < 0 || x + i > this._width - 1 || y + j < 0 || y + j > this._height - 1;
				if(isSelf || isNotOnMap) {
					continue;
				}
				if(!diagonal && i == j) {
					continue;
				}
				neighbors.push({ x : x + i, y : y + j, onMap : true});
			}
		}
		return neighbors;
	}
	,XYtoIndex: function(x,y) {
		return this._width * y + x;
	}
	,IndexToXY: function(index) {
		var x = index % this._width | 0;
		var y = index / this._width | 0;
		return { x : x, y : y, onMap : x >= 0 && y >= 0 && x < this._width && y < this._height};
	}
	,set: function(x,y,data) {
		this._mapData[this.XYtoIndex(x,y)] = data;
	}
	,setRect: function(x,y,x2,y2,data) {
		var _g = x;
		var _g1 = x2;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = y;
			var _g11 = y2;
			while(_g2 < _g11) {
				var j = _g2++;
				this.set(i,j,data);
			}
		}
	}
	,get: function(x,y) {
		return this._mapData[this.XYtoIndex(x,y)];
	}
	,toString: function() {
		var output = "\n MAP2d: \n\n";
		var _g = 0;
		var _g1 = this._height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = this._width;
			while(_g2 < _g11) {
				var x = _g2++;
				var val = this._mapData[this.XYtoIndex(x,y)];
				if(val != 0 && val != 1) {
					output += String.fromCodePoint(val);
				} else {
					output += val;
				}
			}
			output += "\n";
		}
		return output;
	}
	,__class__: dropecho_dungen_map_Map2d
};
var dropecho_dungen_map_MapHelper = function() { };
dropecho_dungen_map_MapHelper.__name__ = "dropecho.dungen.map.MapHelper";
dropecho_dungen_map_MapHelper.isMapConnected = function(map,tile,diagonal) {
	if(diagonal == null) {
		diagonal = true;
	}
	if(tile == null) {
		tile = 0;
	}
	var start = dropecho_dungen_map_MapHelper.getFirstEmptyTile(map,tile);
	var filled = dropecho_dungen_map_MapHelper.floodFill(map,start.x,start.y,tile,diagonal);
	return dropecho_dungen_map_MapHelper.getFirstEmptyTile(map,tile,filled) == null;
};
dropecho_dungen_map_MapHelper.getFirstEmptyTile = function(map,tile,ignore) {
	if(tile == null) {
		tile = 0;
	}
	var _g = 0;
	var _g1 = map._height * map._width;
	while(_g < _g1) {
		var i = _g++;
		if(map._mapData[i] == tile) {
			var cur = [map.IndexToXY(i)];
			if(ignore != null) {
				var foo = Lambda.find(ignore,(function(cur1) {
					return function(tile1) {
						if(tile1.x == cur1[0].x) {
							return tile1.y == cur1[0].y;
						} else {
							return false;
						}
					};
				})(cur));
				if(foo != null) {
					continue;
				}
			}
			return cur[0];
		}
	}
	return null;
};
dropecho_dungen_map_MapHelper.floodFill = function(map,startX,startY,tile,diagonal) {
	if(diagonal == null) {
		diagonal = true;
	}
	if(tile == null) {
		tile = 0;
	}
	var closed = new haxe_ds_IntMap();
	var open = [];
	var neighbors = [];
	var currentTile = map.XYtoIndex(startX,startY);
	var currentTile1 = map.IndexToXY(currentTile);
	open.push(currentTile1);
	var whereHasNotBeenVisited = function(tile1) {
		var key = map.XYtoIndex(tile1.x,tile1.y);
		return closed.h[key] == null;
	};
	var whereTileIsSameType = function(t) {
		return map.get(t.x,t.y) == tile;
	};
	while(open.length > 0) {
		currentTile1 = open.pop();
		var key1 = map.XYtoIndex(currentTile1.x,currentTile1.y);
		closed.h[key1] = currentTile1;
		var _g = [];
		var _g1 = 0;
		var _g2 = map.getNeighbors(currentTile1.x,currentTile1.y,1,diagonal);
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(whereHasNotBeenVisited(v)) {
				_g.push(v);
			}
		}
		var _g3 = [];
		var _g11 = 0;
		var _g21 = _g;
		while(_g11 < _g21.length) {
			var v1 = _g21[_g11];
			++_g11;
			if(whereTileIsSameType(v1)) {
				_g3.push(v1);
			}
		}
		neighbors = _g3;
		open = open.concat(neighbors);
	}
	return Lambda.array(closed);
};
dropecho_dungen_map_MapHelper.getHallwayTiles = function(map,tile) {
	var hallwayTiles = [];
	var _g = 0;
	var _g1 = map._height;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g11 = map._width;
		while(_g2 < _g11) {
			var j = _g2++;
			if(map._mapData[map.XYtoIndex(i,j)] != tile) {
				continue;
			}
			var c = map.getNeighborCount(i,j,tile,2);
			var tmp = c < 8;
		}
	}
	return hallwayTiles;
};
var dropecho_dungen_map_generators_DrunkWalkGenerator = $hx_exports["dungen"]["WalkGenerator"] = function() { };
dropecho_dungen_map_generators_DrunkWalkGenerator.__name__ = "dropecho.dungen.map.generators.DrunkWalkGenerator";
dropecho_dungen_map_generators_DrunkWalkGenerator.generate = function(params) {
	var height = params.height;
	var width = params.width;
	var tile_floor = params.tile_floor;
	var tile_wall = params.tile_wall;
	var start_fill_percent = params.start_fill_percent;
	var countOfFilled = 0;
	var totalCount = height * width;
	var map = new dropecho_dungen_map_Map2d(width,height,tile_wall);
	var walkerPos_x = width / 2 | 0;
	var walkerPos_y = height / 2 | 0;
	map.set(walkerPos_x,walkerPos_y,0);
	var counter = 0;
	var direction = Std.random(4);
	while(countOfFilled < totalCount * (start_fill_percent / 100)) {
		direction = Std.random(4);
		if(map.get(walkerPos_x,walkerPos_y) != tile_floor) {
			map.set(walkerPos_x,walkerPos_y,tile_floor);
			++countOfFilled;
		}
		walkerPos_y += direction == 0 ? -1 : 0;
		walkerPos_y += direction == 2 ? 1 : 0;
		walkerPos_x += direction == 1 ? -1 : 0;
		walkerPos_x += direction == 3 ? 1 : 0;
		if(walkerPos_x < 0 || walkerPos_x > width - 1) {
			walkerPos_x = width / 2 | 0;
			walkerPos_y = height / 2 | 0;
		}
		if(walkerPos_y < 0 || walkerPos_y > height - 1) {
			walkerPos_x = width / 2 | 0;
			walkerPos_y = height / 2 | 0;
		}
		if(counter >= 500000) {
			break;
		}
		++counter;
	}
	return map;
};
var dropecho_dungen_map_generators_FloorPlanGenerator = $hx_exports["dungen"]["FloorPlanGenerator"] = function() { };
dropecho_dungen_map_generators_FloorPlanGenerator.__name__ = "dropecho.dungen.map.generators.FloorPlanGenerator";
dropecho_dungen_map_generators_FloorPlanGenerator.generate = function(params) {
	var width = params.width;
	var height = params.height;
	var tile_floor = params.tile_floor;
	var tile_wall = params.tile_wall;
	var map = new dropecho_dungen_map_Map2d(width,height);
	var rooms = [];
	rooms.push({ width : 20, height : 20, x : -999999, y : -999999});
	rooms.push({ width : 20, height : 20, x : -999999, y : -999999});
	rooms.push({ width : 20, height : 30, x : -999999, y : -999999});
	rooms.push({ width : 30, height : 20, x : -999999, y : -999999});
	dropecho_dungen_map_generators_FloorPlanGenerator.arrangeRooms(map,rooms);
	return map;
};
dropecho_dungen_map_generators_FloorPlanGenerator.scaleFloorPlan = function(map,rooms) {
};
dropecho_dungen_map_generators_FloorPlanGenerator.arrangeRooms = function(map,rooms) {
	var mapMidX = map._width / 2;
	var mapMidY = map._height / 2;
	var randomRooms = dropecho_dungen_map_helpers_Utils.shuffleArray(rooms);
	var _g = 0;
	while(_g < randomRooms.length) {
		var r = randomRooms[_g];
		++_g;
		r.x = 500;
		r.y = 500;
		var isRight = r.x > mapMidX;
		var isAbove = r.y > mapMidY;
	}
};
var dropecho_dungen_map_generators_MixedGenerator = function() { };
dropecho_dungen_map_generators_MixedGenerator.__name__ = "dropecho.dungen.map.generators.MixedGenerator";
dropecho_dungen_map_generators_MixedGenerator.buildRooms = function(tree,userData) {
	userData = { tile_wall : 0, tile_floor : 1};
	var rootvalue = tree.root.value;
	var map = new dropecho_dungen_map_Map2d(rootvalue.width,rootvalue.height,userData.tile_wall);
	var makeRooms = function(node) {
		if(node.hasLeft() || node.hasRight()) {
			return true;
		}
		var roomStartX = node.value.x + (Math.random() * 2 | 0) + 1;
		var roomStartY = node.value.y + (Math.random() * 2 | 0) + 1;
		var roomEndX = node.value.x + node.value.width - (Math.random() * 2 | 0) - 1;
		var roomEndY = node.value.y + node.value.height - (Math.random() * 2 | 0) - 1;
		var _g = roomStartX;
		var _g1 = roomEndX;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = roomStartY;
			var _g11 = roomEndY;
			while(_g2 < _g11) {
				var y = _g2++;
				map.set(x,y,userData.tile_floor);
			}
		}
		return true;
	};
	var makeCaveFromCA = function(node1) {
		if((node1.hasLeft() || node1.hasRight()) && (node1.right.hasRight() || node1.right.hasLeft() || node1.left.hasRight() || node1.left.hasLeft())) {
			return true;
		}
		var roomStartX1 = node1.value.x + (Math.random() * 2 | 0);
		var roomStartY1 = node1.value.y + (Math.random() * 2 | 0);
		var cave = dropecho_dungen_ca_Generator.generate({ height : node1.value.height, width : node1.value.width});
		var _g3 = 0;
		var _g12 = cave._width;
		while(_g3 < _g12) {
			var x1 = _g3++;
			var _g4 = 0;
			var _g13 = cave._height;
			while(_g4 < _g13) {
				var y1 = _g4++;
				var makeCaveFromCA1 = cave.get(x1,y1);
				map.set(x1 + roomStartX1,y1 + roomStartY1,makeCaveFromCA1);
			}
		}
		return true;
	};
	var makeCorridors = function(node2) {
		if(!node2.hasLeft() && !node2.hasRight()) {
			return true;
		}
		var leftXcenter = node2.left.value.x + node2.left.value.width / 2 | 0;
		var leftYcenter = node2.left.value.y + node2.left.value.height / 2 | 0;
		var rightXcenter = node2.right.value.x + node2.right.value.width / 2 | 0;
		var rightYcenter = node2.right.value.y + node2.right.value.height / 2 | 0;
		var startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
		var endX = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
		var startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
		var endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
		var _g5 = startX;
		var _g14 = endX;
		while(_g5 < _g14) {
			var x2 = _g5++;
			map.set(x2,startY,userData.tile_floor);
		}
		var _g21 = startY;
		var _g31 = endY;
		while(_g21 < _g31) {
			var y2 = _g21++;
			map.set(startX,y2,userData.tile_floor);
		}
		return true;
	};
	var chooseRoomOrCave = function(node3) {
		if(Std.random(10) > 2) {
			return makeRooms(node3);
		} else {
			return makeCaveFromCA(node3);
		}
	};
	var closeEdges = function(node4) {
		if(!node4.isRoot()) {
			return true;
		}
		var _g6 = 0;
		var _g15 = node4.value.width;
		while(_g6 < _g15) {
			var x3 = _g6++;
			map.set(x3,0,userData.tile_wall);
			map.set(x3,node4.value.height,userData.tile_wall);
		}
		var _g22 = 0;
		var _g32 = node4.value.height;
		while(_g22 < _g32) {
			var y3 = _g22++;
			map.set(0,y3,userData.tile_wall);
			map.set(node4.value.width,y3,userData.tile_wall);
		}
		return false;
	};
	var povisitor = new dropecho_ds_algos_PostOrderTraversal();
	var invisitor = new dropecho_ds_algos_InOrderTraversal();
	povisitor.run(tree.root,chooseRoomOrCave);
	povisitor.visited.length = 0;
	invisitor.run(tree.root,closeEdges);
	povisitor.run(tree.root,makeCorridors);
	return map;
};
var dropecho_dungen_map_generators_RoomParams = function() {
	this.paddingRatio = 0.001;
	this.tileWall = 0;
	this.tileFloor = 1;
};
dropecho_dungen_map_generators_RoomParams.__name__ = "dropecho.dungen.map.generators.RoomParams";
dropecho_dungen_map_generators_RoomParams.prototype = {
	tileFloor: null
	,tileWall: null
	,paddingRatio: null
	,__class__: dropecho_dungen_map_generators_RoomParams
};
var dropecho_dungen_map_generators_RoomGenerator = $hx_exports["dungen"]["RoomGenerator"] = function() { };
dropecho_dungen_map_generators_RoomGenerator.__name__ = "dropecho.dungen.map.generators.RoomGenerator";
dropecho_dungen_map_generators_RoomGenerator.buildRooms = function(tree,opts) {
	var params = dropecho_utils_Extender.defaults(new dropecho_dungen_map_generators_RoomParams(),opts);
	var rootvalue = tree.getRoot().value;
	var map = new dropecho_dungen_map_Map2d(rootvalue.width,rootvalue.height,params.tileWall);
	var makeRoom = function(node) {
		if(node.hasLeft() || node.hasRight()) {
			return true;
		}
		var xPadding = Math.random() * (node.value.width * params.paddingRatio) | 0;
		var yPadding = Math.random() * (node.value.height * params.paddingRatio) | 0;
		var roomStartX = node.value.x + (xPadding | 0) + 1;
		var roomStartY = node.value.y + (xPadding | 0) + 1;
		var roomEndX = node.value.x + node.value.width - yPadding - 1;
		var roomEndY = node.value.y + node.value.height - yPadding - 1;
		var _g = roomStartX;
		var _g1 = roomEndX;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = roomStartY;
			var _g11 = roomEndY;
			while(_g2 < _g11) {
				var y = _g2++;
				map.set(x,y,params.tileFloor);
			}
		}
		return true;
	};
	var makeCorridors = function(node1) {
		if(!node1.hasLeft() && !node1.hasRight()) {
			return true;
		}
		var leftXcenter = node1.left.value.x + node1.left.value.width / 2 | 0;
		var leftYcenter = node1.left.value.y + node1.left.value.height / 2 | 0;
		var rightXcenter = node1.right.value.x + node1.right.value.width / 2 | 0;
		var rightYcenter = node1.right.value.y + node1.right.value.height / 2 | 0;
		var startX = leftXcenter <= rightXcenter ? leftXcenter : rightXcenter;
		var endX = leftXcenter >= rightXcenter ? leftXcenter : rightXcenter;
		var startY = leftYcenter <= rightYcenter ? leftYcenter : rightYcenter;
		var endY = leftYcenter >= rightYcenter ? leftYcenter : rightYcenter;
		var _g3 = startX;
		var _g12 = endX;
		while(_g3 < _g12) {
			var x1 = _g3++;
			map.set(x1,startY,params.tileFloor);
		}
		var _g21 = startY;
		var _g31 = endY;
		while(_g21 < _g31) {
			var y1 = _g21++;
			map.set(startX,y1,params.tileFloor);
		}
		return true;
	};
	var visitor = new dropecho_ds_algos_PostOrderTraversal();
	visitor.run(tree.root,makeRoom);
	visitor.visited.length = 0;
	visitor.run(tree.root,makeCorridors);
	return map;
};
var dropecho_dungen_map_generators_TunnelerGenerator = $hx_exports["dungen"]["TunnelerGenerator"] = function() { };
dropecho_dungen_map_generators_TunnelerGenerator.__name__ = "dropecho.dungen.map.generators.TunnelerGenerator";
dropecho_dungen_map_generators_TunnelerGenerator.generate = function(params) {
	var height = params.height;
	var width = params.width;
	var tile_floor = params.tile_floor;
	var tile_wall = params.tile_wall;
	var start_fill_percent = params.start_fill_percent;
	var countOfFilled = 0;
	var totalCount = height * width;
	var map = new dropecho_dungen_map_Map2d(width,height,tile_wall);
	var walkerPos_x = width / 2 | 0;
	var walkerPos_y = height / 2 | 0;
	map.set(walkerPos_x,walkerPos_y,0);
	return map;
};
dropecho_dungen_map_generators_TunnelerGenerator.getEntrancePosition = function(map) {
	var top = Std.random(2) == 1;
	var right = Std.random(2) == 1;
	return null;
};
var dropecho_dungen_map_generators__$TunnelerGenerator_Tunneler = function(map,position,width,direction,lifeSpan) {
	if(lifeSpan == null) {
		lifeSpan = 5;
	}
	if(direction == null) {
		direction = 2;
	}
	if(width == null) {
		width = 1;
	}
	this.map = map;
	this.position = position;
	this.width = width;
	this.direction = direction;
	this.lifeSpan = lifeSpan;
};
dropecho_dungen_map_generators__$TunnelerGenerator_Tunneler.__name__ = "dropecho.dungen.map.generators._TunnelerGenerator.Tunneler";
dropecho_dungen_map_generators__$TunnelerGenerator_Tunneler.prototype = {
	map: null
	,position: null
	,width: null
	,direction: null
	,lifeSpan: null
	,run: function() {
		var ticks = 0;
		while(ticks < this.lifeSpan) {
		}
	}
	,__class__: dropecho_dungen_map_generators__$TunnelerGenerator_Tunneler
};
var dropecho_dungen_map_helpers_ConnectivityChecker = function() { };
dropecho_dungen_map_helpers_ConnectivityChecker.__name__ = "dropecho.dungen.map.helpers.ConnectivityChecker";
dropecho_dungen_map_helpers_ConnectivityChecker.prototype = {
	check: function(map,tile) {
		if(tile == null) {
			tile = 0;
		}
		var firstEmpty = dropecho_dungen_map_MapHelper.getFirstEmptyTile(map,tile);
		if(firstEmpty == null) {
			return false;
		}
		var filledTiles = dropecho_dungen_map_MapHelper.floodFill(map,tile,firstEmpty.x,firstEmpty.y);
		firstEmpty = dropecho_dungen_map_MapHelper.getFirstEmptyTile(map,tile);
		return firstEmpty != null;
	}
	,__class__: dropecho_dungen_map_helpers_ConnectivityChecker
};
var dropecho_dungen_map_helpers_Utils = function() { };
dropecho_dungen_map_helpers_Utils.__name__ = "dropecho.dungen.map.helpers.Utils";
dropecho_dungen_map_helpers_Utils.checkOverlap = function(r1,r2) {
	var r1p1_x = r1.x;
	var r1p1_y = r1.y;
	var r1p2_x = r1.x + r1.width;
	var r1p2_y = r1.y + r1.height;
	var r2p1_x = r2.x;
	var r2p1_y = r2.y;
	var r2p2_x = r2.x + r2.width;
	var r2p2_y = r2.y + r2.height;
	return !(r1p1_x > r2p2_x || r2p1_x > r1p2_x || r1p1_y > r2p2_y || r2p1_y > r1p2_y);
};
dropecho_dungen_map_helpers_Utils.contains = function(r1,r2) {
	var r1p1_x = r1.x;
	var r1p1_y = r1.y;
	var r1p2_x = r1.x + r1.width;
	var r1p2_y = r1.y + r1.height;
	var r2p1_x = r2.x;
	var r2p1_y = r2.y;
	var r2p2_x = r2.x + r2.width;
	var r2p2_y = r2.y + r2.height;
	if(r2p2_x < r1p2_x && r2p2_y < r1p2_y && r2p1_x > r1p1_x) {
		return r2p1_y > r1p1_y;
	} else {
		return false;
	}
};
dropecho_dungen_map_helpers_Utils.isOverlappingArray = function(r1,a) {
	var _g = 0;
	while(_g < a.length) {
		var r = a[_g];
		++_g;
		if(r == r1) {
			continue;
		}
		if(dropecho_dungen_map_helpers_Utils.checkOverlap(r1,r)) {
			return true;
		}
	}
	return false;
};
dropecho_dungen_map_helpers_Utils.shuffleArray = function(a) {
	var rand;
	var shuffled = [];
	var copy = a.slice(0);
	while(copy.length > 0) {
		rand = copy.splice(Std.random(copy.length),1)[0];
		shuffled.push(rand);
	}
	return shuffled;
};
var dropecho_utils__$AbstractArray_AbstractArray_$Impl_$ = {};
dropecho_utils__$AbstractArray_AbstractArray_$Impl_$.__name__ = "dropecho.interop._AbstractArray.AbstractArray_Impl_";
dropecho_utils__$AbstractArray_AbstractArray_$Impl_$._new = function(a) {
	var this1;
	if(a != null) {
		this1 = a;
	} else {
		this1 = [];
	}
	return this1;
};
dropecho_utils__$AbstractArray_AbstractArray_$Impl_$.fromAny = function(d) {
	var arr = js_Boot.__cast(d , Array);
	var _g = [];
	var _g1 = 0;
	while(_g1 < arr.length) {
		var v = arr[_g1];
		++_g1;
		_g.push(v);
	}
	return dropecho_utils__$AbstractArray_AbstractArray_$Impl_$._new(_g);
};
var dropecho_utils__$AbstractMap_AbstractMap_$Impl_$ = {};
dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.__name__ = "dropecho.interop._AbstractMap.AbstractMap_Impl_";
dropecho_utils__$AbstractMap_AbstractMap_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.jsMap = function(d) {
	var map = new haxe_ds_StringMap();
	d.forEach(function(v,k,m) {
		var key = k;
		if(__map_reserved[key] != null) {
			map.setReserved(key,v);
		} else {
			map.h[key] = v;
		}
		return;
	});
	return dropecho_utils__$AbstractMap_AbstractMap_$Impl_$._new(map);
};
dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.fromAny = function(d) {
	if(dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.isJsMap(d)) {
		return dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.jsMap(d);
	}
	var fields = Reflect.fields(d);
	var _g = new haxe_ds_StringMap();
	var _g1 = 0;
	while(_g1 < fields.length) {
		var f = fields[_g1];
		++_g1;
		var value = Reflect.field(d,f);
		if(__map_reserved[f] != null) {
			_g.setReserved(f,value);
		} else {
			_g.h[f] = value;
		}
	}
	var map = _g;
	return dropecho_utils__$AbstractMap_AbstractMap_$Impl_$._new(map);
};
dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.isJsMap = function(value) {
	return ((value) instanceof Map);
};
var dropecho_utils_Extender = $hx_exports["Extender"] = function() { };
dropecho_utils_Extender.__name__ = "dropecho.interop.Extender";
dropecho_utils_Extender.extendThis = function(base,extension) {
	if(extension == null) {
		return;
	}
	var _g = 0;
	var _g1 = Reflect.fields(base);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var def = Reflect.field(base,f);
		var opt = Reflect.field(extension,f);
		base[f] = opt != null ? opt : def;
	}
};
dropecho_utils_Extender.defaults = function(base,extension) {
	if(extension == null) {
		return base;
	}
	var extensions = [];
	if(((extension) instanceof Array)) {
		extensions = extension.filter(function(x) {
			return x != null;
		});
	} else {
		extensions.push(extension);
	}
	var _g = 0;
	while(_g < extensions.length) {
		var ex = extensions[_g];
		++_g;
		var fields = Reflect.fields(ex);
		var exType = js_Boot.getClass(ex);
		var typeFields;
		if(exType != null) {
			var _this = Type.getInstanceFields(exType);
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g11 = _this.length;
			while(_g1 < _g11) {
				var i = _g1++;
				result[i] = _this[i].split("_")[1];
			}
			typeFields = result;
		} else {
			typeFields = [];
		}
		fields = fields.length == 0 ? typeFields : fields;
		var _g2 = 0;
		while(_g2 < fields.length) {
			var ff = fields[_g2];
			++_g2;
			var exField = Reflect.field(ex,ff);
			var baseField = Reflect.field(base,ff);
			var bfIsArray = dropecho_utils_Extender.isArray(baseField);
			var bfIsMap = dropecho_utils_Extender.isMap(baseField);
			var bfIsObject = !bfIsArray && !bfIsMap && dropecho_utils_Extender.isObject(baseField);
			if(bfIsArray) {
				var copy = dropecho_utils__$AbstractArray_AbstractArray_$Impl_$.fromAny(exField);
				var _g3 = 0;
				var _g12 = copy;
				while(_g3 < _g12.length) {
					var v = _g12[_g3];
					++_g3;
					baseField.push(v);
				}
			} else if(bfIsMap) {
				var copy1 = dropecho_utils__$AbstractMap_AbstractMap_$Impl_$.fromAny(exField);
				var _g4 = new haxe_iterators_MapKeyValueIterator(copy1);
				while(_g4.hasNext()) {
					var _g13 = _g4.next();
					var k = _g13.key;
					var v1 = _g13.value;
					baseField.set(k,v1);
				}
			} else if(bfIsObject) {
				dropecho_utils_Extender.defaults(baseField,exField);
			} else {
				base[ff] = exField;
			}
		}
	}
	return base;
};
dropecho_utils_Extender.isObject = function(obj) {
	var stdis = Reflect.isObject(obj);
	var type = js_Boot.getClass(obj);
	var name = type != null ? type.__name__ : "";
	var refis = name != "String";
	if(stdis) {
		return refis;
	} else {
		return false;
	}
};
dropecho_utils_Extender.isArray = function(obj) {
	return ((obj) instanceof Array);
};
dropecho_utils_Extender.isMap = function(obj) {
	if(((obj) instanceof Map)) {
		return true;
	}
	var type = js_Boot.getClass(obj);
	var name = type != null ? type.__name__ : "";
	name = name != null ? name : "";
	var isMap = StringTools.startsWith(name,"haxe.ds.") && StringTools.endsWith(name,"Map");
	return isMap;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
